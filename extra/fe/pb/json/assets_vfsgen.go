// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 7, 15, 16, 58, 54, 833420500, time.UTC),
			uncompressedSize: 3131,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\x13\x31\x10\xbd\xe7\x57\x8c\x0c\xc7\xd2\x6d\x2b\xc4\x21\x27\x90\x4a\x45\xa4\xf2\xa1\xc2\x0d\x55\x95\xb3\x3b\x9b\xb8\xda\xb5\xdd\xf1\x6c\x20\xa0\xfc\x77\x64\x37\xc9\x7a\x9d\x0d\x49\x1a\x81\x7a\x8b\x76\xe6\x3d\xcf\xbc\x79\x1e\xe7\xf7\x00\x40\xb8\x1f\x72\x32\x41\x12\x43\x10\x17\xa7\x67\xe2\xc4\x7f\x53\xba\x34\x62\x08\x3e\x0e\x20\x58\x71\x85\x3e\xfe\x99\x25\x35\xaf\x4a\x84\x77\x5f\x46\x21\x11\x40\xcc\x90\x9c\x32\xda\x87\xcf\x97\x70\x00\x91\x1b\xcd\x32\xe7\x35\x07\x80\xd0\xb2\x6e\x49\xc0\x92\xb9\xc7\x9c\x97\xf9\x00\xa2\xa1\xca\x47\xa7\xcc\xd6\x0d\xb3\x6c\xa2\x78\xda\x8c\x4f\x73\x53\x67\x7a\x2e\x7f\x72\x66\x3c\xac\x4d\xc7\x5a\xaa\x00\x68\x50\x9b\xb7\x21\xc5\x31\x5a\x0f\x10\x21\x67\x31\x00\x58\x84\x66\x5c\x3e\xc5\x1a\x9d\x18\xc2\xf7\xc7\xe2\xc2\x19\x3e\xeb\x36\xc4\x73\xa3\x5d\xd3\x49\x90\xd6\x56\x2a\x97\xac\x8c\xce\xee\x9d\xd1\x6d\xae\x25\x53\x34\xf9\x9e\xb9\x92\xa7\xae\x55\x31\x93\x56\x65\xb3\xf3\xac\xc4\x6c\x6a\x1c\xbb\x58\x9b\x09\xc6\x52\x01\x08\x63\x91\x02\xe7\xa8\xf0\x4d\x5e\x2b\xc7\x1f\x02\xe8\xa4\xcd\x21\x74\xd6\x68\x87\xae\x03\x05\x10\x17\x67\x67\xc9\x27\x00\x51\xa0\xcb\x49\x59\x5e\xce\x2a\x22\x0a\xe1\x20\x92\xdc\x80\x01\x88\x97\x84\xa5\x47\xbc\xc8\x0a\x2c\x95\x56\x9e\xc1\x65\x76\xbc\xae\xe9\x66\x59\x87\xe8\x20\x17\x83\xbe\xdf\x8b\xa8\x7e\x96\x93\x56\xc7\xe5\xb7\x2b\xfc\x8a\x34\x53\x79\x44\x76\x3b\x88\x49\x96\x04\xb1\x9a\x95\xc9\x65\x95\x55\x07\x0b\x7a\xed\x71\x97\x8a\x9e\x99\xa6\xab\xb2\x9e\x2a\xab\x95\x24\x6b\x64\xa4\x54\xdc\xa4\xf8\xd5\x7d\xf4\x36\x4d\x2b\x57\xa1\x9f\x87\x06\x69\x9e\x86\x08\x1f\x1a\x45\xe8\x55\x2c\x65\xe5\x30\x09\xf3\xdc\x06\x56\xc7\xa4\xf4\x44\xf4\x56\x7b\xfb\xcf\x4c\x50\xcf\x62\x13\x58\xe3\xfe\xee\x82\x8f\x66\x86\x41\xee\x67\x64\x81\x75\x4d\xff\x6b\xfe\x63\x53\x6c\x0c\xf9\x71\xfe\x7d\x91\x68\xfc\x4c\x4d\x3a\xfd\xa3\xda\x7d\x68\xd0\xf1\x3e\xdd\x1e\xef\x9f\xf5\xdb\x10\x15\xd3\x6e\x6a\x3b\xbe\x52\x15\x8e\xe2\x37\x30\x72\xb6\x19\x77\x1f\x2e\x4b\xde\x55\xac\x12\xc3\xac\xf4\xed\x58\x68\xdb\xed\xe8\xac\xc5\xc7\x9c\x0e\x6e\x9b\x7a\xa3\x4f\xa6\xc0\x6f\x1e\xd0\x4b\xe5\xd4\xaf\x5d\x25\xc4\x03\x14\xa5\xa1\x5a\xfa\x2b\x23\x94\xe6\x37\xaf\xfb\x49\x2d\x52\x7d\x57\x9b\x62\x2b\xb3\xd2\x8c\xfe\x0f\xc5\xe1\xd4\xb5\x29\x54\xa9\xb0\xb8\x63\xb5\x53\xbb\x3d\xd9\x7b\xf7\x46\x2c\x5c\xcf\x84\x93\x13\x04\xea\xa6\xee\x78\x4c\x5c\x8d\xae\xdf\xc7\x3b\xe3\x72\x74\xb3\x3a\x73\x6d\x4e\xef\x2d\xd9\x54\xa1\xaa\x90\x9f\x94\xb0\xf9\x7e\x1e\x61\xb6\x69\xba\xea\x22\x0e\x49\x24\xbb\xf7\x58\x28\xc6\x3a\xdd\x6f\x7b\x2e\xef\x6d\x8a\xf6\x3e\x5d\x47\x74\x84\x9a\x69\x7e\x7c\x4b\xdb\x6e\xce\xfa\x86\x1f\xd4\xe4\xc6\xb6\x3a\xa2\x41\xff\xee\xde\x39\xca\x9f\xb2\x23\x02\xb6\xc0\xed\x33\xdf\x00\xef\x6e\x68\xe7\xc8\xda\xd5\x39\x58\x0c\xfe\x04\x00\x00\xff\xff\x1d\xb0\xe5\x55\x3b\x0c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
