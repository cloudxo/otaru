// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 8, 5, 5, 27, 53, 54071892, time.UTC),
			uncompressedSize: 4806,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4f\x6f\xdb\x3e\x0c\xbd\xe7\x53\x08\xfa\xfd\x8e\x5d\xdd\x16\xc3\x0e\x39\x6d\x40\x57\x2c\x40\xf7\x07\xdd\x6e\x43\x11\x28\x36\x9d\xa8\xb3\x25\x95\xa2\xb3\x65\x43\xbe\xfb\x20\x35\x89\x65\xc5\x5e\x9c\x06\x2d\x02\xf4\x16\x98\xe4\xf3\xe3\xf3\x13\xc5\xfc\x19\x30\xc6\xed\x4f\x31\x9d\x02\xf2\x21\xe3\x17\xa7\x67\xfc\xc4\x3d\x93\x2a\xd7\x7c\xc8\x5c\x9c\x31\x4e\x92\x0a\x70\xf1\xcf\x24\xb0\x7a\x95\x03\x7b\xf7\x65\xe4\x13\x19\xe3\x73\x40\x2b\xb5\x72\xe1\xf3\x55\x39\x63\x3c\xd5\x8a\x44\x4a\x1b\x0c\xc6\xb8\x12\x65\x0d\xc2\x0c\xea\x3b\x48\x69\x95\xcf\x18\xaf\xb0\x70\xd1\x19\x91\xb1\xc3\x24\x99\x4a\x9a\x55\x93\xd3\x54\x97\x89\x5a\x88\x5f\x94\x68\x57\x56\xa7\x43\x29\xa4\x2f\xa8\x40\xe9\xb7\x3e\xc5\x12\x18\x57\xc0\x7d\xce\x72\xc0\xd8\xd2\x37\x63\xd3\x19\x94\x60\xf9\x90\x7d\x7f\x20\xe7\xdf\xe1\xb2\x6e\x7d\x3c\xd5\xca\x56\x8d\x04\x61\x4c\x21\x53\x41\x52\xab\xe4\xce\x6a\x55\xe7\x1a\xd4\x59\x95\xf6\xcc\x15\x34\xb3\xb5\x8a\x89\x30\x32\x99\x9f\x27\x39\x24\x33\x6d\xc9\x86\xda\x4c\x21\x94\x8a\x31\xae\x0d\xa0\xc7\x1c\x65\xae\xc9\x6b\x69\xe9\x83\x2f\x3a\xa9\x73\x10\xac\xd1\xca\x82\x6d\x94\x32\xc6\x2f\xce\xce\xa2\x47\x8c\xf1\x0c\x6c\x8a\xd2\xd0\xea\x5b\x05\x40\x3e\xec\x45\x12\x5b\x65\x8c\xf1\xff\x11\x72\x57\xf1\x5f\x92\x41\x2e\x95\x74\x08\x36\x31\x93\x0d\xa7\x9b\x15\x0f\xde\xa8\x5c\x0e\xda\x7e\x2f\x03\xfe\x24\xa6\xb5\x8e\xab\x67\x57\xf0\x15\x70\x2e\xd3\x00\xec\x76\x10\x82\xac\x00\x42\x35\x0b\x9d\x8a\x22\x29\xf6\x16\xf4\xda\xd5\x5d\x4a\x3c\x32\x4d\xd7\xb4\x1e\x2b\xab\x11\x28\x4a\x20\xc0\x58\xdc\x88\xfc\xfa\x3c\x3a\x9b\xc6\xcc\xa5\xef\xe7\xbe\x02\x5c\xc4\x21\x84\xfb\x4a\x22\x38\x15\x73\x51\x58\x88\xc2\xb4\x30\x1e\xd5\x12\x4a\x35\xe5\xad\x6c\x6f\x9f\xcc\x04\xe5\x8f\x4c\x62\xe8\x03\xa3\xed\xbf\x8d\xf0\xd1\x55\x78\xc9\x8f\xc8\x06\x35\xa9\xe7\x32\xc1\x44\x67\x5b\x5f\xfa\xc1\x04\x6d\x91\xc0\x03\x84\x55\x6c\x81\xc3\xfa\xbd\xaf\xc0\x52\x9f\x76\x9f\xd0\x45\xf3\xfd\x2c\xa4\xe7\x70\x74\x0e\x5a\x73\x7a\x21\x06\xaa\xdb\x3d\x02\xff\x60\xb9\x97\x7f\x6e\xa0\x3c\x42\x07\x05\xac\x5e\x86\x87\x1a\x0d\x3f\xa3\x8b\x36\x7b\x6a\x40\xa7\xde\x1a\xcd\xe4\x4a\x16\x30\x0a\xf7\xf1\xe0\x96\xd5\x93\xe6\x12\x6d\xd0\x79\x8b\x64\x64\x9a\xb5\xc2\x0d\x1b\x75\xdd\xd4\x8d\x15\xed\x21\xa7\x51\xd7\xa5\xdf\xe8\x93\xce\xe0\x9b\x2b\x68\x85\xb2\xf2\xf7\x2e\x0a\xe1\x27\xe4\xb9\xc6\x52\xb8\x83\xc3\xa5\xa2\x37\xaf\xdb\x41\x0d\x60\x39\x2e\x75\xd6\x89\x2c\x15\x81\xfb\x73\xb3\x3f\x74\xa9\x33\x99\x4b\xc8\xc6\x24\x77\x6a\xd7\x13\xbd\x75\x7a\x84\xc2\xb5\x7c\xe1\xe8\x0d\x1c\x54\x55\x36\x3c\xc6\xaf\x46\xd7\xef\xc3\xb9\x71\x39\xba\x59\xbf\x73\x63\x4e\xe7\x2d\x51\x15\x9e\x95\xcf\x8f\x28\x6c\xef\xf2\x07\x98\x6d\x16\x0f\xbc\x00\x43\x20\x8a\xe6\x49\xe6\x92\xa0\x8c\x67\x5c\xcf\x45\xb2\x4b\xd1\xd6\x35\xfa\x80\x8e\x40\x11\x2e\x0e\x6f\xa9\xeb\xe4\x6c\x4e\xf8\x5e\x4d\x6e\x2f\x4d\x07\x74\xe8\xff\x04\xf4\x1d\x10\x3d\x08\xed\xd4\x3c\xae\x8d\x47\xef\x81\xbd\x8c\x2d\xa6\x8f\x19\x78\xbe\x36\x83\x6e\x03\xf7\x16\x63\xeb\xf2\xec\xad\x45\xcb\x45\xf4\x5c\x5f\xb6\xb1\x7e\x38\x16\xe3\x74\x26\x8b\x0c\x41\x75\x41\x4c\xb4\x2e\x40\xa8\xae\x11\xb8\x0e\xef\xd4\xab\x6d\xdd\xd8\xa5\x98\xbb\x39\x07\xcb\xc1\xdf\x00\x00\x00\xff\xff\xa3\x18\x09\x6a\xc6\x12\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
