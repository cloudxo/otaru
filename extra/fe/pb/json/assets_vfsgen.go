// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 8, 26, 15, 5, 37, 878450033, time.UTC),
			uncompressedSize: 7536,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\x6c\x8f\xdb\x55\x76\x51\xf4\x90\x53\x0b\xa4\x41\x0d\xa4\x1f\x48\xdb\x53\x11\x18\xb4\x34\xb6\xb9\x95\x38\xcc\x70\xe4\x34\x2d\xfc\xdf\x0b\x72\x6d\x8b\x92\xa5\x8d\x64\xe7\x43\x80\x6f\x86\x39\x33\x7a\xf3\xf8\x38\xe4\xcc\x7f\x13\x21\xa4\x7b\x50\xcb\x25\x90\xbc\x14\xf2\xe3\xfb\x0b\xf9\xce\xff\xa7\xcd\x02\xe5\xa5\xf0\xeb\x42\x48\xd6\x9c\x83\x5f\xff\x95\x15\x95\xdf\x2c\x40\xfc\xf0\xdb\x34\x18\x0a\x21\xd7\x40\x4e\xa3\xf1\xcb\x1f\xb6\xee\x42\xc8\x14\x0d\xab\x94\xf7\x31\x84\x90\x46\x15\x55\x10\x61\x09\x3f\x41\xca\x5b\x7b\x21\x64\x49\xb9\x5f\x5d\x31\x5b\x77\x99\x24\x4b\xcd\xab\x72\xfe\x3e\xc5\x22\x31\x8f\xea\x1f\x4e\xd0\xbb\x55\xe6\x50\x28\x1d\x1c\x4a\x30\xf8\x7d\x30\x71\x0c\xd6\x3b\xc8\x60\xb3\x99\x08\xb1\x09\xc9\xb8\x74\x05\x05\x38\x79\x29\xfe\xfa\x0c\x2e\x7c\xc3\x5b\xdd\x85\xf5\x14\x8d\x2b\x6b\x06\xca\xda\x5c\xa7\x8a\x35\x9a\xe4\x93\x43\x53\xd9\x5a\xc2\xac\x4c\x7b\xda\x2a\x5e\xb9\x8a\xc5\x44\x59\x9d\xac\x3f\x24\x0b\x48\x56\xe8\xd8\xc5\xdc\x2c\x21\xa6\x4a\x08\x89\x16\x28\xc4\x9c\x66\x3e\xc9\x1b\xed\xf8\xa7\xe0\xf4\xae\xb2\x21\x70\x16\x8d\x03\x57\x73\x15\x42\x7e\xbc\xb8\x68\xfc\x25\x84\xcc\xc0\xa5\xa4\x2d\x6f\xf7\x2a\x0a\x14\x96\x03\x49\xea\xc0\x4d\x08\xf9\x35\xc1\xc2\x7b\x7c\x95\x64\xb0\xd0\x46\xfb\x08\x2e\xb1\xf3\x3d\xa6\xdb\x2d\x0e\x59\xf3\xdc\x4c\xda\x7e\x6f\x22\xfc\xac\x96\x15\x8f\xdb\xff\xae\xe1\x77\xa0\xb5\x4e\xa3\x60\x77\x93\x38\xc8\x36\x40\xcc\x66\x8e\xa9\xca\x93\x0c\x1f\x4c\x8e\x2a\x8b\x69\xb5\xe8\xbe\xcc\xeb\xd5\xce\x69\x3c\xb4\xee\x20\x1d\xcb\xaa\x55\xa4\x0a\x60\xa0\x26\xb7\x0d\xe0\xbb\xe3\x38\xc7\xec\xb1\x89\x5a\x9b\xae\x15\x82\xfb\x52\x13\x78\xf2\x98\x4a\x78\xc6\x6c\xef\x4b\x70\xdc\x27\xd9\xbb\x17\x93\x50\x3e\xf8\x4c\xde\x78\xbf\x2b\x4d\x23\xd2\x4f\x0c\xeb\xb5\x34\xe4\x2b\x5d\xbb\x86\xee\x4b\xa0\x2f\x89\x68\xa1\x72\xd7\x54\x11\x3f\xda\x10\xd5\x31\x69\xb3\x94\xaf\x2c\x82\xe2\xef\x4c\xd3\xa0\x22\xf2\xb3\xf7\x08\x94\x8f\x48\x06\x15\xa8\xf3\x28\x24\x71\xbe\x23\x28\x25\xc5\x7a\x98\x84\x70\x0d\xa3\x53\xd0\x0e\xd3\x99\x08\xa8\x4a\x77\x04\xfa\xa1\x62\x90\x7e\x6e\xa1\x18\xa1\x82\x22\x54\xe7\xa1\xa1\x5a\xc2\x23\x50\x51\x69\x07\xbf\x88\xff\xb4\x23\x7b\x0f\x7f\x06\x74\x1e\xfa\xd9\xe5\xfa\xa6\xd2\x21\x28\x90\x61\x36\xf0\x06\xbb\x0d\x5e\xbe\x88\x8e\x48\x3b\x15\xa8\xf3\xd0\x4f\x9c\xef\x2b\x6a\x68\x3f\x69\x89\xd0\x54\x73\x8f\xc3\x26\x2f\xd2\xd5\xee\xad\x8f\xf3\xfa\x34\xc8\x92\xd7\x17\xeb\x86\x72\x24\xfa\x56\x63\xe6\x28\x6d\x0a\xaa\xab\x69\xa8\x6f\x26\xaf\x66\x19\x34\x94\xdc\xd3\x59\xe5\x39\x3e\xcc\x70\x0d\xf4\x40\x9a\xa1\x2b\xc4\x1c\x31\x07\x65\x6a\x3b\x2d\x17\x48\x85\xe2\x78\x79\xd2\xdc\x87\xfa\x71\x6c\x19\x03\x74\x93\xd6\xf0\xbc\xd6\x39\x4c\xe3\xf9\xdd\x11\x34\x6f\xe5\x3c\x98\xa4\xad\x4d\xcd\xaf\x4b\xac\xd3\x5f\x30\x83\x3f\xbc\x43\x6b\x28\xa7\xff\x7d\x0a\x42\x07\xc7\xda\xf0\x77\xdf\x76\x28\x00\xa8\x98\x15\x98\x75\x46\xd6\x86\x61\x09\x74\x44\xe8\x02\x33\xbd\xd0\x90\xcd\x58\x3f\xc9\x5d\xcf\xe8\x1d\xd2\xa8\x88\x6b\xd9\xe1\xc6\x17\x24\x98\xb2\xa8\x9d\x68\x79\x3d\xbd\xf9\x31\xae\xd1\x57\xd3\xdb\xdd\x37\xf7\xa5\xc0\x9f\x64\x55\xe6\x01\x55\xb0\x6f\x40\x38\x9c\xfd\x9d\x20\xb6\x55\xf3\x6e\x89\x62\x28\x22\x55\x2f\x9b\x52\x33\x14\xcd\xfb\xa4\xe7\xd4\xa0\x8b\xd1\xd6\x99\xc9\x09\x19\x81\x61\x7a\x3c\x3d\xa5\xae\x93\xb3\x3f\xe1\x83\x92\x3c\xec\x90\x4f\xc8\x30\x4c\x7c\xfa\x16\x88\x1e\x80\x86\x16\xb9\x83\x6e\xed\xc4\x5c\x5e\xef\x4a\xe9\x22\xe3\xa0\x53\xea\xcd\xc5\xe1\xad\xff\x56\x17\x2c\x3e\x1b\x1d\x2d\x2f\xb7\x41\x7c\x3c\xaf\x3a\x8e\xe1\x82\x02\x8a\x59\xba\xd2\x79\x46\x60\x5e\xfa\xbd\xd0\xd6\x6b\xf7\x66\xac\xde\x77\xbc\xd1\x51\x3a\x42\x3c\x6f\xf7\x3c\x6b\x74\xa5\x4f\x31\xed\x5f\xc8\x93\xcd\xe4\xff\x00\x00\x00\xff\xff\x68\x00\xf6\x30\x70\x1d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
