// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 7, 15, 14, 10, 16, 103513084, time.UTC),
			uncompressedSize: 2684,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\x4f\x6f\xdb\x3e\x0c\xbd\xe7\x53\x10\xfa\xfd\x8e\x5d\xdd\x16\xc3\x0e\x39\x6d\x40\x57\x2c\x40\xf7\x07\xdd\x6e\x43\x51\x28\x36\x9d\xb0\xb0\x25\x95\xa2\xb3\x65\x43\xbe\xfb\x20\x35\x89\x65\xd7\x5e\xdb\x15\x1b\x7a\x33\x4c\xbe\xa7\xc7\x27\x92\xfa\x39\x01\x50\xfe\x9b\x5e\x2c\x90\xd5\x14\xd4\xc9\xe1\x91\x3a\x08\xff\xc8\x94\x56\x4d\x21\xc4\x01\x94\x90\x54\x18\xe2\x1f\x45\x73\xf3\xa2\x44\x78\xf3\x69\x16\x13\x01\xd4\x0a\xd9\x93\x35\x21\x7c\xbc\x85\x03\xa8\xdc\x1a\xd1\xb9\xec\x39\x00\x94\xd1\x75\x4b\x02\x8e\xed\x35\xe6\xb2\xcd\x07\x50\x0d\x57\x21\xba\x14\x71\x7e\x9a\x65\x0b\x92\x65\x33\x3f\xcc\x6d\x9d\x99\xb5\xfe\x2e\x99\x0d\xb0\x36\x1d\x6b\x4d\x11\xd0\xa0\xb1\xaf\x63\x8a\x17\x74\x01\xa0\x62\xce\x66\x02\xb0\x89\xc5\xf8\x7c\x89\x35\x7a\x35\x85\xaf\xb7\xe2\xe2\x19\x21\xeb\x32\xc6\x73\x6b\x7c\xd3\x49\xd0\xce\x55\x94\x6b\x21\x6b\xb2\x6b\x6f\x4d\x9b\xeb\xd8\x16\x4d\xfe\xc0\x5c\x2d\x4b\xdf\xba\x98\x69\x47\xd9\xea\x38\x2b\x31\x5b\x5a\x2f\x3e\xf5\x66\x81\xa9\x55\x00\xca\x3a\xe4\xc8\x39\x2b\x42\x91\xe7\xe4\xe5\x5d\x04\x1d\xb4\x39\x8c\xde\x59\xe3\xd1\x77\xa0\x00\xea\xe4\xe8\xa8\xf7\x0b\x40\x15\xe8\x73\x26\x27\xdb\xbb\x4a\x88\x62\x38\x9a\xa4\xef\xc0\x00\xd4\xff\x8c\x65\x40\xfc\x97\x15\x58\x92\xa1\xc0\xe0\x33\x37\xdf\x6b\xba\xd8\xea\x50\x1d\xe4\x66\x32\xf4\xbd\x49\xf4\x8b\x5e\xb4\x3e\x6e\xff\x9d\xe1\x67\xe4\x15\xe5\x09\xd9\xe5\x24\x25\xd9\x12\xa4\x6e\x56\x36\xd7\x55\x56\x3d\xda\xd0\xf3\x80\x3b\x25\x7e\x66\x9e\xee\x64\xfd\xa9\xad\x4e\xb3\xae\x51\x90\xfb\xe6\xf6\xc4\xef\xe6\x31\xb4\x69\x5f\x39\xc5\x7a\x6e\x1a\xe4\x75\x3f\xc4\x78\xd3\x10\x63\x70\xb1\xd4\x95\xc7\x5e\x58\xd6\x2e\xb2\x7a\x61\x32\x0b\x35\xa8\xf6\xf2\xaf\x35\x41\xbd\x4a\x9b\xc0\x59\xff\xfb\x2e\x78\x6f\x57\x18\xed\x7e\x46\x2d\xb0\xd7\xf4\x6f\xc7\x6a\xbf\x2d\x13\x35\xed\xee\x72\xf3\x33\xaa\x70\x96\xbe\x0a\xc9\x5d\xdb\x79\x77\x95\x3b\x0e\x3e\x0b\xf5\x2c\xdc\x75\x5c\xc7\xd4\xb1\x7e\xe9\x54\x74\x9b\xd3\xc1\x8d\xd9\x37\xfb\x60\x0b\xfc\x12\x00\x83\x54\x9e\x7e\xdc\x27\x21\xbd\x41\x55\x5a\xae\x75\x68\x22\x45\x46\x5e\xbd\x1c\x26\x75\xc8\xf5\x55\x6d\x8b\x51\x66\x32\x82\xe1\x89\x7d\x3c\x75\x6d\x0b\x2a\x09\x8b\x2b\xa1\x7b\xbd\x7b\x20\xfb\xe0\x24\xa5\xc6\x0d\xdc\x70\xef\x04\x85\xa6\xa9\x3b\x3d\xa6\xce\x66\xe7\x6f\xd3\x29\x3a\x9d\x5d\xec\xce\xdc\x8f\x7b\xe8\x2d\xdd\x54\x51\x55\xcc\xef\x49\xb8\xfb\xa2\x3c\xa1\xd9\x96\xfd\xe1\x4f\x38\x34\xb3\xee\x2e\x36\x45\x82\x75\x7f\xe2\x1f\xb8\xce\xc6\x1c\x1d\x5c\xe6\x4f\xa8\x08\x8d\xf0\xfa\xe9\x25\x8d\x4d\xce\x7e\xc2\x1f\x55\xe4\xdd\x75\x35\x5e\x61\xbb\x69\x26\x9b\xc9\xaf\x00\x00\x00\xff\xff\xbf\xbd\x29\x64\x7c\x0a\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
