// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 7, 30, 13, 9, 11, 280634878, time.UTC),
			uncompressedSize: 4707,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4d\x6f\xdb\x38\x10\xbd\xfb\x57\x10\xdc\x3d\x66\xa3\x24\x58\xec\xc1\xa7\x5d\x20\x1b\xd4\x40\xfa\x81\xb4\xb7\x22\x08\x68\x69\x64\x33\x15\x3f\x32\x1c\xb9\x75\x0b\xff\xf7\x82\x8c\x6d\x51\xb4\x5c\xcb\x31\x92\x1a\xc8\xcd\xd0\xcc\x3c\xbe\x79\x7c\x24\xc7\x3f\x06\x8c\x71\xf7\x55\x4c\x26\x80\x7c\xc8\xf8\xc5\xe9\x19\x3f\xf1\xdf\xa4\x2e\x0d\x1f\x32\x1f\x67\x8c\x93\xa4\x0a\x7c\xfc\x3d\x09\xac\xff\x2a\x81\xfd\xf7\x61\x14\x12\x19\xe3\x33\x40\x27\x8d\xf6\xe1\xf3\x65\x39\x63\x3c\x37\x9a\x44\x4e\x6b\x0c\xc6\xb8\x16\xaa\x01\x61\x16\xcd\x3d\xe4\xb4\xcc\x67\x8c\xd7\x58\xf9\xe8\x94\xc8\xba\x61\x96\x4d\x24\x4d\xeb\xf1\x69\x6e\x54\xa6\xe7\xe2\x1b\x65\xc6\x97\x35\xe9\xa0\x84\x0c\x05\x35\x68\xf3\x6f\x48\x71\x04\xd6\x17\xf0\x90\xb3\x18\x30\xb6\x08\xcd\xb8\x7c\x0a\x0a\x1c\x1f\xb2\xcf\x8f\xe4\xc2\x1a\x3e\xeb\x36\xc4\x73\xa3\x5d\xdd\x4a\x10\xd6\x56\x32\x17\x24\x8d\xce\xee\x9d\xd1\x4d\xae\x45\x53\xd4\x79\xcf\x5c\x41\x53\xd7\xa8\x98\x09\x2b\xb3\xd9\x79\x56\x42\x36\x35\x8e\x5c\xac\xcd\x04\x62\xa9\x18\xe3\xc6\x02\x06\xcc\x51\xe1\x9b\xbc\x96\x8e\xde\x84\xa2\x93\x26\x07\xc1\x59\xa3\x1d\xb8\x56\x29\x63\xfc\xe2\xec\x2c\xf9\xc4\x18\x2f\xc0\xe5\x28\x2d\x2d\xf7\x2a\x02\x0a\xe1\x20\x92\xd8\x28\x63\x8c\xff\x89\x50\xfa\x8a\x3f\xb2\x02\x4a\xa9\xa5\x47\x70\x99\x1d\xaf\x39\xdd\x2c\x79\xf0\x56\xe5\x62\xd0\xf5\x7b\x11\xf1\x27\x31\x69\x74\x5c\x7e\xbb\x82\x8f\x80\x33\x99\x47\x60\xb7\x83\x18\x64\x09\x10\xab\x59\x99\x5c\x54\x59\xb5\xb7\xa0\xd7\xbe\xee\x52\xe2\x91\x69\xba\xa2\xf5\x54\x59\xad\x40\xa1\x80\x00\x53\x71\x13\xf2\xab\xf3\xe8\x6d\x9a\x32\x97\xa1\x9f\x87\x1a\x70\x9e\x86\x10\x1e\x6a\x89\xe0\x55\x2c\x45\xe5\x20\x09\xd3\xdc\x06\x54\x47\x28\xf5\x84\x77\xb2\xbd\x7d\x36\x13\xa8\x2f\x85\xc4\xd8\x07\xd6\xb8\x5f\x1b\xe1\xad\xaf\x08\x92\x1f\x91\x0d\x1a\x52\x2f\x65\x82\xb1\x29\x36\x76\xfa\xd1\x04\x5d\x91\xc8\x03\x84\x75\x6a\x81\xc3\xfa\x7d\xa8\xc1\x51\x9f\x76\x9f\xd1\x45\xb3\xfd\x2c\x64\x66\x70\x74\x0e\x5a\x71\x7a\x25\x06\x6a\xda\x3d\x02\xff\xa0\xda\xcb\x3f\x37\xa0\x8e\xd0\x41\x11\xab\xd7\xe1\xa1\x56\xc3\x2f\xe8\xa2\xf5\x9c\x1a\xd1\x69\xa6\x46\x3b\xbe\x92\x15\x8c\xe2\x79\x3c\x7a\x65\xcd\xb8\x3d\x44\x5b\xf4\xde\x22\x99\x98\x66\xa5\x70\xcb\x46\xdb\x5e\xea\xd6\x88\xf6\x98\xd3\xaa\xdb\xa6\xdf\xe8\x9d\x29\xe0\x93\x2f\xe8\x84\x72\xf2\xfb\x2e\x0a\xf1\x16\xf2\xd2\xa0\x12\xfe\xe0\x70\xa9\xe9\x9f\xbf\xbb\x41\x2d\xa0\xba\x53\xa6\xd8\x8a\x2c\x35\x81\xff\x73\xb3\x3f\xb4\x32\x85\x2c\x25\x14\x77\x24\x77\x6a\xd7\x13\xbd\xf3\xf6\x88\x85\xeb\xd8\xe1\x64\x05\x0e\xba\x56\x2d\x8f\xf1\xab\xd1\xf5\xff\xf1\xbd\x71\x39\xba\x59\xad\xb9\x36\xa7\xf7\x96\xa8\xab\xc0\x2a\xe4\x27\x14\x36\x67\xf9\x03\xcc\x36\x4d\x2f\xbc\x08\x43\x20\x8a\xf6\x49\xe6\x92\x40\xa5\x77\x5c\xcf\x41\x72\x9b\xa2\x9d\x63\xf4\x01\x1d\x81\x26\x9c\x1f\xde\xd2\xb6\x93\xb3\x3e\xe1\x7b\x35\xb9\x39\x34\x1d\xd0\x61\xf8\x13\xd0\xf7\x82\xe8\x41\x68\xa7\xe6\x69\x6d\x7a\xf5\x1e\xd8\xcb\x9d\xc3\xfc\x29\x17\x5e\xa8\x2d\x60\xbb\x81\x7b\x8b\xb1\xf1\x78\xf6\xd6\xa2\xe3\x21\xfa\xcd\x3b\xdb\x35\x0b\xec\x6a\xc7\x3f\x6b\x83\xc5\xe0\x67\x00\x00\x00\xff\xff\xf2\x7a\x36\x10\x63\x12\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
