// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 7, 30, 12, 30, 15, 419338353, time.UTC),
			uncompressedSize: 3918,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x08\xda\x8e\x5d\xdd\x16\xc3\x0e\x39\x6d\x40\x57\x2c\x40\xf7\x81\x6e\xb7\xa1\x28\x14\x9b\x4e\xd8\xd9\x92\x4a\xd1\xd9\xb2\x21\xff\x7d\x90\x9a\xc4\xb2\xe3\x2c\x4e\x83\x16\x05\x76\x0b\x42\xf2\xf9\xf1\xe9\x89\xe2\x9f\x81\x10\xd2\xfd\x54\x93\x09\x90\x1c\x0a\x79\x76\x7c\x22\x8f\xfc\x7f\xa8\x73\x23\x87\xc2\xc7\x85\x90\x8c\x5c\x80\x8f\x7f\x66\x45\xd5\xab\x1c\xc4\xbb\x2f\xa3\x90\x28\x84\x9c\x01\x39\x34\xda\x87\x4f\x97\xe5\x42\xc8\xd4\x68\x56\x29\xaf\x31\x84\x90\x5a\x95\x35\x88\xb0\x64\x6e\x21\xe5\x65\xbe\x10\xb2\xa2\xc2\x47\xa7\xcc\xd6\x0d\x93\x64\x82\x3c\xad\xc6\xc7\xa9\x29\x13\x3d\x57\xbf\x38\x31\xbe\xac\x4e\x87\x52\x61\x28\xa8\x40\x9b\xb7\x21\xc5\x31\x58\x5f\x20\x43\xce\x62\x20\xc4\x22\x34\xe3\xd2\x29\x94\xe0\xe4\x50\x7c\xbf\x27\x17\xbe\xe1\xb3\xae\x43\x3c\x35\xda\x55\x8d\x04\x65\x6d\x81\xa9\x62\x34\x3a\xb9\x75\x46\xd7\xb9\x96\x4c\x56\xa5\x3d\x73\x15\x4f\x5d\xad\x62\xa2\x2c\x26\xb3\xd3\x24\x87\x64\x6a\x1c\xbb\x58\x9b\x09\xc4\x52\x09\x21\x8d\x05\x0a\x98\xa3\xcc\x37\x79\x89\x8e\x3f\x84\xa2\xa3\x3a\x87\xc0\x59\xa3\x1d\xb8\x46\xa9\x10\xf2\xec\xe4\xa4\xf5\x97\x10\x32\x03\x97\x12\x5a\x5e\x9e\x55\x04\x14\xc2\x41\x24\xb5\x51\x26\x84\x7c\x49\x90\xfb\x8a\x17\x49\x06\x39\x6a\xf4\x08\x2e\xb1\xe3\x35\xa7\xab\x25\x0f\xd9\xa8\x5c\x0c\xba\x7e\x2f\x22\xfe\xac\x26\xb5\x8e\xcb\xff\x2e\xe0\x2b\xd0\x0c\xd3\x08\xec\x7a\x10\x83\x2c\x01\x62\x35\x0b\x93\xaa\x22\x29\xf6\x16\xf4\xd2\xd7\x9d\x23\x3d\x33\x4d\x57\xb4\x1e\x2a\xab\x55\xa4\x4a\x60\xa0\xb6\xb8\x2d\xf2\xab\xfb\xe8\x6d\xda\x66\x8e\xa1\x9f\xbb\x0a\x68\xde\x0e\x11\xdc\x55\x48\xe0\x55\xcc\x55\xe1\xa0\x15\xe6\xb9\x0d\xa8\x8e\x09\xf5\x44\x76\xb2\xbd\x7e\x34\x13\x94\x3f\x32\xa4\xd8\x07\xd6\xb8\x7f\x1b\xe1\xa3\xaf\x08\x92\x3f\x23\x1b\xd4\xa4\x9e\xca\x04\x63\x93\x6d\x9c\xf4\xbd\x09\xba\x22\x91\x07\x98\xaa\xb6\x05\x0e\xeb\xf7\xae\x02\xc7\x7d\xda\x7d\x44\x17\xcd\xf6\xb3\x90\x99\xc1\xb3\x73\xd0\x8a\xd3\x7f\x62\xa0\xba\xdd\x27\xf4\xcf\x7a\xc3\x88\xc8\xd4\xef\xbd\x1d\x5f\x60\x01\xa3\x78\x93\x8a\xe6\xa3\x19\x37\xd7\x1f\x4b\xde\x55\x8c\x2d\xc3\xac\xf4\x6d\x58\x68\xdb\x8c\x6d\x3c\xae\xf7\x39\x8d\xba\x6d\xea\x8d\x3e\x99\x0c\xbe\xf9\x82\x4e\x28\x87\xbf\x77\x51\x88\x0f\x50\xe6\x86\x4a\xe5\xaf\x8c\x44\xcd\x6f\x5e\x77\x83\x5a\xa0\xf2\xa6\x34\xd9\x56\x64\xd4\x0c\x7e\x2d\xdd\x1f\xba\x34\x19\xe6\x08\xd9\x0d\xe3\x4e\xed\x7a\xa2\x77\xce\x8d\x58\xb8\x8e\x13\x6e\x7d\x41\x82\xae\xca\x86\xc7\xe4\xc5\xe8\xf2\x7d\x3c\x33\xce\x47\x57\xab\x6f\xae\xcd\xe9\xbd\xa5\xaa\x22\xb0\x0a\xf9\x2d\x0a\x9b\x5b\xd8\x01\x66\x9b\xb6\x47\x5d\x84\xa1\x88\x54\xf3\x1e\x4b\x64\x28\xdb\xf3\xad\xe7\x0a\xb0\x4d\xd1\xce\x05\xe8\x80\x8e\x40\x33\xcd\x0f\x6f\x69\xdb\xcd\x59\xdf\xf0\xbd\x9a\xdc\x7c\xee\x0e\xe8\x30\xac\x6f\x7d\x07\x44\x0f\x42\x3b\x35\x6f\xd7\xb6\x47\xef\x81\xbd\xdc\x38\x4a\x1f\x32\xf0\x42\x6d\x06\xdb\x0d\xdc\x5b\x8c\x8d\xa7\x73\x97\x16\xfe\x1d\x18\x2c\x06\x7f\x03\x00\x00\xff\xff\x48\xe3\x9b\xa4\x4e\x0f\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
