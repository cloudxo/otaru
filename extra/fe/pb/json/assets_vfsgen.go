// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 29, 10, 54, 20, 952493440, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 12, 31, 13, 8, 0, 963257924, time.UTC),
			uncompressedSize: 8578,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\x6c\x8f\xdb\x28\xbb\x28\x7a\xc8\xa9\x8b\xa6\x41\x0d\xa4\x1f\x48\xdb\x53\x11\x18\xb4\x34\xb2\xb9\x15\x39\xcc\x90\x72\xea\x16\xfe\xef\x05\xb9\xb6\x45\xc9\x52\x62\xd9\xd9\x44\x86\x6f\x82\x38\xf3\x34\xf3\xf4\xc8\xe1\xcc\x7f\x23\xc6\xb8\x7d\x14\xb3\x19\x10\xbf\x62\xfc\xc3\xc5\x25\x7f\xe7\xdf\x49\x9d\x23\xbf\x62\x7e\x9d\x31\xee\xa4\x2b\xc0\xaf\xff\xea\x04\x95\xdf\xe4\xc0\x3e\xfe\x36\x0e\x86\x8c\xf1\x05\x90\x95\xa8\xfd\xf2\xfb\xb5\x3b\x63\x3c\x45\xed\x44\xea\xb6\x18\x8c\x71\x2d\x54\x05\xc2\x0c\xe1\x27\x48\xdd\xda\x9e\x31\x5e\x52\xe1\x57\xe7\xce\x19\x7b\x95\x24\x33\xe9\xe6\xe5\xf4\x22\x45\x95\xe8\xa5\xf8\xc7\x25\xe8\xdd\x2a\x73\x50\x42\x06\x87\x12\x34\x7e\x1f\x4c\xac\x03\xe3\x1d\x78\xb0\x59\x8d\x18\x5b\x85\x64\x6c\x3a\x07\x05\x96\x5f\xb1\xbf\x3e\x07\x17\xbe\xe1\xad\xee\xc3\x7a\x8a\xda\x96\x35\x03\x61\x4c\x21\x53\xe1\x24\xea\xe4\x93\x45\x5d\xd9\x1a\xc2\xac\x4c\xf7\xb4\x15\x6e\x6e\x2b\x16\x13\x61\x64\xb2\x78\x9f\xe4\x90\xcc\xd1\x3a\x1b\x73\x33\x83\x98\x2a\xc6\x38\x1a\xa0\x80\x39\xce\x7c\x92\xb7\xd2\xba\x9f\x82\xd3\xbb\xca\x86\xc0\x1a\xd4\x16\x6c\xcd\x95\x31\xfe\xe1\xf2\xb2\xf1\x8a\x31\x9e\x81\x4d\x49\x1a\xb7\xfe\x57\x1f\x99\x2d\xd3\x14\xac\xcd\xcb\x82\x6d\x90\x2e\x22\xf8\xe0\x14\xa8\x13\x3b\x60\x8c\xf1\xaf\x09\x72\x8f\xf3\x55\x92\x41\x2e\xb5\xf4\xb8\x36\x31\xd3\x6d\xa4\x77\x6b\x4c\x5e\xf3\x5c\x8d\xda\x9e\x57\x51\x56\x4e\xcc\x2a\x76\xd7\xef\x6e\xe0\x77\xa0\x85\x4c\x23\xb0\xfb\x51\x0c\xb2\x06\x88\x39\x2e\x30\x15\x45\x92\x9a\x98\x66\x83\xf6\x69\x9e\x7f\x40\xb3\xbc\xf5\x8e\x83\xe7\x79\x1b\xe9\xa1\x3c\x1b\x41\x42\x81\x03\x6a\xb2\xdd\xc8\x67\xb3\x6d\xa7\x98\x2d\x9b\x61\x4b\xdd\xb5\x42\xf0\x50\x4a\x02\x4f\xaa\xa3\x12\x5e\x32\xdd\x87\x12\xac\xdb\x27\xdb\xfb\x2f\xa6\xaa\x0c\x1f\x75\x81\x22\xeb\xa5\xad\xeb\x8d\xd3\xd0\xa5\xb5\x09\xf4\x3c\x94\x55\x65\x3b\x00\x61\x15\xbd\xab\x42\xd8\x14\xd7\x92\x06\xaf\xaa\x38\xd8\xd7\x52\x96\xaf\xc0\xed\xca\x7a\x28\x81\x9e\x92\x56\x2e\x0a\xdb\xd4\x96\x5b\x9a\x80\x6a\x1d\x49\x3d\xe3\xaf\x2c\x0d\xf5\x77\x26\xa9\xd7\x81\xf3\xb3\xf7\x38\x8d\x6a\x56\x85\x7a\x1e\x87\x4e\x9c\xef\x00\x8e\x1d\xb5\xe8\x27\x2c\x5c\xc0\x89\xe8\x6a\x13\xe9\x99\xc8\xaa\x4a\x77\x00\xaa\x22\xd5\x4b\x55\x77\xa0\x4e\x46\x57\x51\xac\xe7\xa1\xac\x5a\xc2\x03\xd0\x56\x69\x7a\xdf\xbf\xff\x34\x27\x71\xfb\xfe\x1c\xe6\x79\xa8\x6a\x93\xeb\x9b\x0a\x8a\x40\xa1\x83\x49\xcf\x1a\x78\x17\xbc\xfc\x81\x3b\x78\x45\x55\xa1\x9e\x87\xaa\xe2\x7c\x5f\x51\x59\xdb\x79\x63\x14\x4d\x35\xfd\x6b\x19\x61\x44\x72\xdb\xb4\x16\x38\xad\x0f\x45\x0d\x79\xd9\x39\xd9\x10\x54\x68\x6c\x26\x96\xd2\xa6\xcc\xba\x5a\x94\xfa\xcf\x74\xf3\x49\x06\x0d\x7d\x3f\xe5\xdc\xba\x83\xda\x46\x50\xdd\x19\x35\x5c\x9b\x4d\xf7\x11\x54\xe0\xeb\x72\x11\x39\x8b\xa2\xc0\xc7\x09\x2e\x80\x1e\x49\x3a\xe8\x82\x98\x22\x16\x20\x74\x4d\xf5\x3c\x47\x52\xc2\xc5\xcb\xcf\xd2\xbd\x33\x96\xd9\x9b\xed\x1b\x59\xc0\x38\x9e\xe8\x1f\x40\xf3\x7a\x6b\xf7\x26\x69\x6d\x53\xf3\xeb\xda\xb8\xe3\x5f\x30\x83\x3f\xbc\x43\x2b\x94\x95\xff\x3e\x17\x42\x07\xc7\x52\xbb\xef\xbe\xed\x50\x00\x90\x9a\x28\xcc\x3a\x91\xa5\x76\x30\x03\x3a\x00\x5a\x61\x26\x73\x09\xd9\xc4\xc9\x67\xb9\xdb\x13\xbd\x43\x1a\x15\x71\x2d\x7f\xb8\xf1\x05\x0e\xba\x54\xb5\xd3\x8d\xdf\x8c\x6f\x7f\x8c\xab\xd8\xf5\xf8\x6e\xf3\xcd\xed\xb1\xe8\x4f\x35\x51\x16\x21\xaa\x60\xdf\x08\x61\x77\xee\x7f\x84\xd8\xe6\xcd\xea\x1b\x61\x08\x22\x51\x2f\x21\x5c\x3a\x50\xcd\x8a\xbb\xe7\xbc\xa6\x8b\xd1\xd6\x69\xd5\x11\x19\x81\x76\xb4\x3c\x3e\xa5\xae\x9d\xb3\xdd\xe1\xbd\x92\xdc\x9d\x42\x1c\x59\x92\x8e\xad\x28\x2d\x63\xa0\xbd\x0f\xb9\x9d\xde\xf7\xd4\xcb\xeb\xee\xec\x62\x6f\x2e\x76\x6f\x40\x6f\x55\x60\xf1\xc5\xe8\x68\xb9\xc5\xf6\xe2\xe3\x65\xd5\x71\x08\x17\x14\xa2\x98\xa4\x73\x59\x64\x04\xfa\x4b\xdf\x17\xda\x66\x14\x7b\x33\x56\xef\xcc\xde\x68\x2b\x1d\x20\x9e\xb7\xbb\x9e\x35\xfa\xf6\xe7\x98\xf6\xdd\xc2\x68\x35\xfa\x3f\x00\x00\xff\xff\x54\xd7\xdb\xa9\x82\x21\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
