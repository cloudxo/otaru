// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 6, 24, 4, 22, 44, 139488511, time.UTC),
			uncompressedSize: 929,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x8f\xd4\x30\x10\x85\xfb\xfc\x8a\xd1\x40\x79\x9c\xf7\xae\xdc\x0a\x1a\xc4\x49\x48\x20\x28\xd1\x15\x5e\xef\x24\x99\xd3\xc6\xb6\x3c\x93\x85\x15\xca\x7f\x47\x36\xe1\xe2\x64\xb7\xa0\x8b\x3c\xef\xbd\x3c\x7f\xe3\xdf\x0d\x00\xca\x4f\xdb\x75\x94\x70\x0f\xf8\x78\xbf\xc3\xbb\x7c\xc6\xbe\x0d\xb8\x87\x3c\x07\x40\x65\x3d\x51\x9e\x7f\x51\x9b\xc6\x77\x2d\xc1\x87\xaf\x4f\x45\x08\x80\x67\x4a\xc2\xc1\xe7\xf1\xc3\x6c\x07\x40\x17\xbc\x5a\xa7\xaf\x19\x00\xe8\xed\xb0\x84\x40\x4c\xe1\x85\x9c\xce\x7a\x00\x1c\xd3\x29\x4f\x7b\xd5\x28\x7b\x63\x3a\xd6\x7e\x3c\xdc\xbb\x30\x18\x7f\xb1\xbf\xd4\x84\x6c\x5b\xe4\x34\x58\x2e\x86\x91\x7c\x78\x5f\x24\xa2\x14\xb3\x01\x8b\x66\x6a\x00\xa6\x72\x19\x71\x3d\x0d\x24\xb8\x87\x1f\x7f\xcb\x95\x7f\x64\xd5\x73\x99\xbb\xe0\x65\x5c\x09\x6c\x8c\x27\x76\x56\x39\x78\xf3\x22\xc1\x2f\xda\x98\xc2\x71\x74\xff\xa9\xb5\xda\xcb\x42\xd1\xd8\xc8\xe6\xfc\x60\x5a\x32\x7d\x10\x95\x9a\x4d\x47\x35\x2a\x00\x0c\x91\x52\xc9\x7c\x3a\xe6\x4b\x7e\x66\xd1\x4f\xc5\x74\xb7\x68\x12\x49\x0c\x5e\x48\x56\x56\x00\x7c\xdc\xed\x36\x47\x00\x78\x24\x71\x89\xa3\xce\xbb\xaa\x82\xca\xb8\x40\xb2\x57\x36\x00\x7c\x9b\xa8\xcd\x8e\x37\xe6\x48\x2d\x7b\xce\x09\x62\xe2\xe1\xb5\xd3\xb7\xb9\x07\xae\x9c\x53\x73\xeb\x7b\xaa\xfa\xab\xed\x16\x8e\xf3\xd9\x47\xfa\x4e\xe9\xcc\xae\x0a\x7b\x6e\xea\x90\x65\xad\x55\x9b\x05\xf2\xad\x5a\x15\x67\xbd\xc4\xf2\x06\xc3\x61\xfd\xf8\x62\xca\xc0\x95\x37\x2c\x31\x2f\x6a\x4b\xf7\x5f\x86\x4d\xc9\x5e\x56\x18\x91\x95\x86\xed\x36\x2a\x87\x68\x62\xdf\xe1\x6d\x30\xd7\xb7\x6c\xa6\xe6\x4f\x00\x00\x00\xff\xff\x7f\x21\xc1\xc2\xa1\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
