// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 7, 10, 14, 12, 42, 374615654, time.UTC),
			uncompressedSize: 2287,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x55\xc1\x6e\xd3\x40\x10\xbd\xe7\x2b\x46\x0b\xc7\x52\xb7\x15\xe2\x90\x13\x48\xa5\x22\x52\x05\xa8\x70\x43\x55\xb5\xb1\xc7\xc9\x54\xf6\xee\x76\x76\x1c\x08\x28\xff\x8e\x76\x9b\xc4\x6b\xd7\x56\x53\x72\xe1\x16\x79\xde\x7b\xfb\xe6\xed\xcc\xe6\xcf\x04\x40\xf9\x9f\x7a\xb1\x40\x56\x53\x50\x17\xa7\x67\xea\x24\x7c\x23\x53\x5a\x35\x85\x50\x07\x50\x42\x52\x61\xa8\x7f\x11\xcd\xcd\x9b\x12\xe1\xc3\xd7\x59\x04\x02\xa8\x15\xb2\x27\x6b\x42\xf9\x7c\x4b\x07\x50\xb9\x35\xa2\x73\xd9\x6b\x00\x28\xa3\xeb\x56\x04\x1c\xdb\x7b\xcc\x65\x8b\x07\x50\x0d\x57\xa1\xba\x14\x71\x7e\x9a\x65\x0b\x92\x65\x33\x3f\xcd\x6d\x9d\x99\xb5\xfe\x25\x99\x0d\xb4\x16\x8e\xb5\xa6\x48\x68\xd0\xd8\xf7\x11\xe2\x05\x5d\x20\xa8\x88\xd9\x4c\x00\x36\xb1\x19\x9f\x2f\xb1\x46\xaf\xa6\xf0\xe3\xd1\x5c\x3c\x23\xa0\x6e\x63\x3d\xb7\xc6\x37\x1d\x80\x76\xae\xa2\x5c\x0b\x59\x93\xdd\x7b\x6b\x5a\xac\x63\x5b\x34\xf9\x81\x58\x2d\x4b\xdf\xa6\x98\x69\x47\xd9\xea\x3c\x2b\x31\x5b\x5a\x2f\x3e\xcd\x66\x81\x69\x54\x00\xca\x3a\xe4\xa8\x39\x2b\x42\x93\xd7\xe4\xe5\x53\x24\x9d\xb4\x18\x46\xef\xac\xf1\xe8\x3b\x54\x00\x75\x71\x76\xd6\xfb\x04\xa0\x0a\xf4\x39\x93\x93\xed\x5d\x25\x42\xb1\x1c\x43\xd2\x4f\x68\x00\xea\x35\x63\x19\x18\xaf\xb2\x02\x4b\x32\x14\x14\x7c\xe6\xe6\x7b\x4f\x37\x5b\x1f\xaa\xc3\xdc\x4c\x86\x7e\x6f\x12\xff\xa2\x17\x6d\x8e\xdb\x6f\x57\xf8\x0d\x79\x45\x79\x22\x76\x3b\x49\x45\xb6\x02\x69\x9a\x95\xbf\xab\x6c\xae\xab\x97\x06\x7a\x1d\x48\x97\xc4\xff\x59\xa6\x3b\x5b\xff\x1a\xab\xd3\xac\x6b\x14\xe4\x7e\xb8\x3d\xf3\xbb\x7d\x0c\x63\xda\x77\x4e\xb1\x9f\x87\x06\x79\xdd\x2f\x31\x3e\x34\xc4\x18\x52\x2c\x75\xe5\xb1\x57\x96\xb5\x8b\xaa\x5e\x98\xcc\x42\x0d\xba\xbd\x3d\x7a\x08\xf6\xbb\x9d\xc4\xd7\x6e\x9a\x9b\x5f\x51\x85\xb3\xf4\x0d\x4b\x9c\xd9\x79\xf7\xe1\x71\x1c\x66\x43\xa8\x77\xe7\xbb\x7c\x3a\x53\x30\xd6\x5d\x67\xac\x1f\x31\x1d\xde\xd8\x7d\xcf\x3e\xdb\x02\xbf\x07\xc2\xa0\x94\xa7\xdf\xcf\x59\x48\xe3\x57\xa5\xe5\x5a\x87\xc1\x57\x64\xe4\xdd\xdb\x61\x51\x87\x5c\xdf\xd5\xb6\x18\x55\x26\x23\x18\xfe\x10\x5e\x2e\x5d\xdb\x82\x4a\xc2\xe2\x4e\xe8\xd9\xec\x0e\x54\x1f\x5c\xfe\x34\xb8\x81\x1b\xee\x9d\xa0\xd0\x34\x75\x67\xc6\xd4\xd5\xec\xfa\x63\xba\xf6\x97\xb3\x9b\xdd\x99\xfb\xe1\x0c\xb3\xa5\x9b\x2a\xba\x8a\xf8\x9e\x85\xa7\xef\xdf\x11\xc3\x16\xfe\x11\xc6\x02\xd3\xcc\xba\xbb\x86\x8a\x04\xeb\xfe\x13\x75\xe0\xf2\x8d\x25\x3a\xf8\xf4\x1c\xd1\x11\x1a\xe1\xf5\xf1\x2d\x8d\x6d\xce\x7e\xc3\x0f\x69\x32\x3c\x17\x93\xcd\xe4\x6f\x00\x00\x00\xff\xff\xb9\x70\xfb\x9a\xef\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
