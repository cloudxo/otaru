// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 6, 24, 1, 51, 6, 211741490, time.UTC),
		},
		"/otaru-fe.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru-fe.swagger.json",
			modTime:          time.Date(2018, 8, 12, 14, 10, 54, 770397690, time.UTC),
			uncompressedSize: 7443,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\x6c\x8f\xdb\x55\x76\x51\xf4\x90\x53\x0b\xa4\x41\x0d\xa4\x1f\x48\xdb\x53\x11\x18\xb4\x34\xb6\xb9\x95\x38\xcc\x70\xe4\x34\x2d\xfc\xdf\x0b\x72\x2d\x8b\x92\xa5\xc4\xb2\xb3\x89\x00\xdf\x0c\x73\xde\xe8\xcd\xd3\xe3\x88\xc3\xff\x26\x42\x48\xf7\xa0\x96\x4b\x20\x79\x29\xe4\xc7\xf7\x17\xf2\x9d\xff\x4f\x9b\x05\xca\x4b\xe1\xd7\x85\x90\xac\x39\x07\xbf\xfe\x2b\x2b\x2a\xbf\x59\x80\xf8\xe1\xb7\x69\x08\x14\x42\xae\x81\x9c\x46\xe3\x97\x3f\x6c\xe1\x42\xc8\x14\x0d\xab\x94\x77\x39\x84\x90\x46\x15\x75\x12\x61\x09\x3f\x41\xca\xdb\x78\x21\x64\x49\xb9\x5f\x5d\x31\x5b\x77\x99\x24\x4b\xcd\xab\x72\xfe\x3e\xc5\x22\x31\x8f\xea\x1f\x4e\xd0\xc3\xea\x70\x28\x94\x0e\x80\x12\x0c\x7e\x1f\x42\x1c\x83\xf5\x00\x19\x62\x36\x13\x21\x36\xa1\x18\x97\xae\xa0\x00\x27\x2f\xc5\x5f\x9f\xc9\x85\x67\xf8\xa8\xbb\xb0\x9e\xa2\x71\x65\x23\x40\x59\x9b\xeb\x54\xb1\x46\x93\x7c\x72\x68\xea\x58\x4b\x98\x95\xe9\x81\xb1\x8a\x57\xae\x56\x31\x51\x56\x27\xeb\x0f\xc9\x02\x92\x15\x3a\x76\xb1\x36\x4b\x88\xa5\x12\x42\xa2\x05\x0a\x39\xa7\x99\x2f\xf2\x46\x3b\xfe\x29\x80\xde\xd5\x31\x04\xce\xa2\x71\xe0\x1a\x50\x21\xe4\xc7\x8b\x8b\xd6\x5f\x42\xc8\x0c\x5c\x4a\xda\xf2\xf6\x5d\x45\x89\xc2\x72\x10\x49\xed\xc1\x84\x90\x5f\x13\x2c\x3c\xe2\xab\x24\x83\x85\x36\xda\x67\x70\x89\x9d\xef\x38\xdd\x6e\x79\xc8\x06\x72\x33\xe9\xfa\xbd\x89\xf8\xb3\x5a\xd6\x3a\x6e\xff\xbb\x86\xdf\x81\xd6\x3a\x8d\x92\xdd\x4d\xe2\x24\xdb\x04\xb1\x9a\x39\xa6\x2a\x4f\x32\x7c\x30\x39\xaa\x2c\x96\xd5\xa2\x7b\x5a\xd7\xab\x0a\x34\x1e\x59\x2b\x4a\xc7\xaa\x6a\x15\xa9\x02\x18\xa8\xad\x6d\x8b\x78\xb5\x1d\xe7\x98\x3d\xb6\x59\x6b\xd3\xb7\x42\x70\x5f\x6a\x02\x2f\x1e\x53\x09\x2f\x58\xed\x7d\x09\x8e\x0f\x29\xf6\xee\x8b\x59\x28\x1f\xbc\x27\x6f\x3c\xee\x4a\xd3\x88\xfc\x13\xd3\x7a\x2d\x0f\xf9\x4e\xd7\xed\xa1\xfb\x12\xe8\x29\x13\x2d\x54\xee\xda\x2e\xe2\x47\x1b\xb2\x3a\x26\x6d\x96\xf2\x95\x4d\x50\xfc\x9d\x69\x1a\xd4\x44\x7e\xf6\x88\x20\xf9\x88\x6c\x50\x93\x3a\x8f\x46\x12\xd7\x3b\x82\x56\x52\xac\x87\x59\x08\xd7\x30\x3a\x07\x55\x9c\xce\xc4\x40\x75\xb9\x23\xf0\x0f\x41\x81\x0c\xb3\x81\x36\xba\x0d\x28\x5f\xc9\x88\x7c\x54\x93\x3a\x0f\x23\xc5\xf5\x8e\xc1\x49\xc5\x60\x0b\x8d\xaf\x17\x45\xac\xce\xc7\x44\x63\xea\x47\xa5\x1d\x3c\x5b\xfd\x69\x47\x36\x59\x7d\x26\x74\x1e\xfe\xa9\x6a\x7d\x45\xeb\xec\xee\x5b\x22\x26\xf5\xed\xc7\xfe\xa8\x17\x79\xa9\x3a\xf1\xe3\xbc\x79\x27\x64\xc9\x7b\x8a\x75\xcb\x31\x12\xfd\xc0\x31\x73\x9c\xb6\x8d\xd4\x37\x3a\x34\x5f\x24\xaf\x66\x19\xb4\xdc\xfb\x14\xb8\x73\x8b\x74\x4c\xea\xfd\x15\xb5\x90\xd7\x3a\x87\x69\x7c\xc5\x76\x84\x06\x5b\x9f\x0d\x2e\x7f\x1b\xd3\xc0\xf5\xb9\x68\xfa\x0b\x66\xf0\x87\x07\x74\xa6\x72\xfa\xdf\xe7\x28\xc4\x46\x96\x0b\xa4\x42\x79\xd9\xa5\x36\xfc\xdd\xb7\x3d\xaf\x07\xa8\x98\x15\x98\xf5\x66\xd6\x86\x61\x09\x74\x44\xea\x02\x33\xbd\xd0\x90\xcd\x58\x3f\xab\xdd\x81\xd9\x7b\xac\x51\x0b\xd7\xf1\x86\x5b\x4f\x90\x60\xca\xa2\xb1\xdd\xe4\xf5\xf4\xe6\xc7\xb8\x71\x5e\x4d\x6f\xab\x67\xee\xf6\xa9\xdf\x66\xaa\xcc\x03\xab\x10\xdf\xa2\xb0\x7f\x3d\x77\x82\xd9\x56\xed\x66\x1f\xe5\x50\x44\xaa\xd9\xcf\xa4\x66\x28\xda\x4d\xfe\xc0\xc1\xbe\x4f\xd1\xce\x6b\x8d\x13\x2a\x02\xc3\xf4\x78\x7a\x49\x7d\x3b\x67\xb7\xc3\x07\x15\xb9\x3f\xc4\x9e\x50\x61\xb8\x94\x39\xb1\xc5\x75\xdc\x22\x1c\xdc\xe4\xf6\x06\xaa\x13\x6b\x99\x39\x7a\xdb\x7e\xbf\x3f\x10\x1f\xac\xc5\xfe\x4c\x70\xfa\xd7\xef\x38\x35\xf0\xc5\xe4\xe8\x98\xeb\x06\xe9\xf1\xb2\xee\x38\x46\x0b\x0a\x2c\x66\xe9\x4a\xe7\x19\x81\xe9\x4b\x31\x47\xcc\x41\x99\xbe\x4f\x42\xb5\x7c\x90\x60\x47\x3b\xa8\x79\xa0\x7b\xa3\xad\x74\x84\x79\x22\xb4\xca\x73\x7c\x98\xe1\x1a\xe8\x81\x34\xf7\x7e\x80\x5f\x4a\xee\xd6\x71\xff\x39\xa5\xfd\xf1\x75\xb2\x99\xfc\x1f\x00\x00\xff\xff\xe5\xb0\xc8\xee\x13\x1d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru-fe.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
