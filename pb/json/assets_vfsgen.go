// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 11, 4, 6, 52, 59, 334049989, time.UTC),
		},
		"/otaru.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru.swagger.json",
			modTime:          time.Date(2018, 12, 19, 12, 6, 23, 71648571, time.UTC),
			uncompressedSize: 20080,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x20\x74\xf7\x70\x07\x04\x55\x5a\x1c\xee\x21\x40\x81\x6d\xd3\xa4\x30\x10\xec\x76\x93\x45\xfb\xb0\x28\x04\x5a\x1c\xc9\x6c\x29\x52\x25\xa9\xa4\xde\xc6\xdf\x7d\x41\x4a\xb6\x65\xfd\xb1\xfe\x27\xea\xb6\x0f\x05\x52\x8b\x33\xfa\xf1\xc7\x99\xe1\xcc\x90\xf6\xb7\x13\x84\x1c\x75\x8f\xc3\x10\xa4\x73\x8e\x9c\x17\xcf\xce\x9c\x53\xf3\x19\xe5\x81\x70\xce\x91\x79\x8e\x90\xa3\xa9\x66\x60\x9e\xff\xa6\xb1\x4c\xd0\xab\x77\x0b\x3b\x0a\x21\xe7\x0e\xa4\xa2\x82\x9b\x67\xcf\x33\x59\x84\x1c\x5f\x70\x8d\x7d\xbd\x53\x80\x90\xc3\x71\x94\xd3\x10\x4b\xf1\x09\x7c\x9d\x8d\x47\xc8\x49\x24\x33\x4f\x57\x5a\xc7\xea\xdc\x75\x43\xaa\x57\xc9\xf2\x99\x2f\x22\x97\xaf\xf1\x57\xed\x0a\x23\xb6\x1f\x0e\x11\xa6\x56\x20\x01\x2e\x7e\xb1\x43\x94\x86\xd8\x08\x38\x76\xcc\xe6\x04\xa1\x8d\x9d\x89\xf2\x57\x10\x81\x72\xce\xd1\x9f\x29\x38\xfb\x0e\x33\xea\xa3\x7d\xee\x0b\xae\x92\x83\x01\x38\x8e\x19\xf5\xb1\xa6\x82\xbb\x9f\x94\xe0\xfb\xb1\xb1\x14\x24\xf1\x5b\x8e\xc5\x7a\xa5\xf6\x14\xba\x38\xa6\xee\xdd\x73\x77\xc9\xc4\x52\x69\x21\xc1\xf5\x05\x0f\x68\x98\xe7\x28\x84\x3c\x65\x08\x39\x22\x06\x69\x75\x2f\x88\x99\xec\x5b\xd0\x17\xa9\xd0\xe9\x7e\x8c\x04\x15\x0b\xae\x40\x1d\x88\x22\xe4\xbc\x38\x3b\x2b\x7c\x84\x90\x43\x40\xf9\x92\xc6\x3a\x5b\xb3\x57\x48\x25\xbe\x0f\x4a\x05\x09\x43\x5b\x4d\xcf\x72\xea\xad\x90\xa5\x10\x97\x94\x21\xe4\xfc\x5b\x42\x60\xf4\xfc\xcb\x25\x10\x50\x4e\x8d\x5e\xe5\xc6\xcb\xb7\xa0\x5f\x6f\x27\x9a\x42\xbe\xc9\x94\x3b\x07\x2a\x36\x27\x55\x7f\x6f\x72\xd3\xd3\x38\xdc\xd3\x9d\x7d\xb6\x53\x7d\x0b\xf2\x8e\xfa\x39\x9d\x1f\x4f\xf2\xba\x32\x3d\x15\xdc\x03\xd7\x92\x1e\x50\xd6\x86\xfc\xcb\x4c\xea\x3b\x60\x3f\x83\x3a\x2f\xd6\x25\x18\xef\xf1\x7c\xec\xaf\x20\x4f\x7d\x2c\xd4\x71\xee\x6f\xac\xe0\x85\x95\x9b\x3b\xf9\x39\xac\x7d\xd9\x8f\xb1\xc4\x11\x68\x90\xc5\x35\x28\xcc\x68\x1b\x53\x97\x82\xac\x8b\xc0\x29\xaf\x7b\x22\xe1\x4b\x42\x25\x18\x62\xb5\x4c\x60\xdc\x09\x7f\x49\x40\xe9\x36\xf3\xfd\x38\x91\xb5\x05\x94\x81\x5a\x2b\x0d\x91\x8b\xb5\x96\xee\x37\x4a\x36\x5d\xdc\xfc\x95\xd6\x72\xf6\x36\x66\x40\x3e\x96\x71\x51\x52\xc4\x5b\x98\xe4\x22\x40\x0f\x94\x3c\xa0\x97\x2f\xd1\xd9\x29\xd2\x2b\xe0\xe8\x4b\x02\x72\x8d\xcc\x0e\x58\x9a\x6c\x6a\x97\xe6\x51\x37\xbb\xd4\xeb\xd8\xc2\x51\x5a\x52\x1e\x16\x65\x03\x21\x23\xac\x6d\x42\x40\xb9\xfe\xff\xff\xf2\xa4\x6c\x4e\x9b\x27\x59\x85\x27\x45\x6a\xa7\x72\x04\x6a\x80\x99\x6a\xc0\xda\xcb\xfe\xaf\x28\x83\x5b\x6b\xc7\xfd\x1d\xc0\xfc\xd9\xd9\x01\x6e\x00\x13\xf3\xf2\xd9\x3b\xc1\x16\xe8\xd3\x39\xc2\x3c\x6d\x59\x04\x81\x02\x3d\x99\x35\x8f\x8c\x96\x01\x0f\xa7\xf0\x3d\xca\x35\x98\xa2\xa6\x16\x6e\x19\xed\xa8\xbe\xb9\x2b\x55\xe2\xe4\xb8\xbf\x7d\x90\x54\xc3\x77\xe1\x70\x3b\xa4\x3f\x3d\xee\x10\xe7\xd3\xe6\x5f\xb9\x65\x19\x2d\xfb\x1a\x67\xf7\xe1\xe4\x57\x41\xa0\xcb\xe6\x73\x95\xc9\x5c\x25\x8c\xbd\x3b\x5c\xe5\x79\xfa\x44\x11\xf0\x63\xb9\xc6\x3f\x33\x61\x61\x9d\x2a\xf2\x6b\xaa\xf4\x1b\x3a\xff\x6c\x3d\xc3\x39\xab\x84\x9d\x01\xff\x0f\x25\xff\xed\x96\xb5\x0f\x31\x2d\x2c\x25\x2e\x07\x49\x0d\x51\x71\xa9\x50\x63\xbc\x6e\x88\xd8\x05\x4e\x7f\xd8\xec\x9f\x17\x62\x6f\x63\x97\xe5\x42\x02\xd6\xf3\x4f\x43\x52\x98\x3f\x46\x6f\x65\x3b\xd7\x59\x6d\xec\xc6\xb0\x5c\x19\x75\xec\xe0\x45\xe2\x6e\xfe\xb6\x95\xc2\xfc\x31\x6c\x6b\x3b\xd7\xa7\xb7\x2d\x6a\x2c\x8a\x2c\x5d\xa5\xb1\xee\xda\x93\x5f\x98\xec\xeb\xcd\xeb\x5b\x2b\x3a\x77\xf3\x2a\xe0\x1d\xb3\x3b\xbf\xd5\xdb\x8d\x79\x26\xc2\x10\xa4\xeb\x63\x0d\xa1\xe8\x71\x22\x72\xb1\x17\xfc\x0e\xb8\xdf\xa3\x1d\x93\xf9\x6b\xcb\xe1\x20\xe2\xd7\xee\xb7\xed\x5f\x9b\x4e\x61\xf5\x76\x37\xa9\xf5\xec\x17\x20\x87\xf5\xb1\x02\xac\x5f\xe6\x06\x8d\xd8\x46\xe8\x98\x66\x3e\x4e\xb8\x3f\xde\x00\x3b\xde\x02\xeb\x1b\xf9\x87\xb8\x00\xc3\x1a\x94\xf6\x98\x08\x3d\xe0\x5a\xae\x3d\x4a\x3a\x06\xa1\x6b\xab\xe1\x5a\x84\x97\x46\x7e\x41\x66\xef\x09\x15\x98\xe7\x12\x90\x98\x08\x3b\xed\x01\xbf\x9b\x02\xe9\xda\x08\xcd\x9d\xf4\x1d\xd2\xc7\x0a\x3e\x11\xe5\x5e\x5d\x07\xf3\x91\x3b\xdb\x2d\x82\xd3\xf1\x50\xf9\x64\x95\x7f\xfd\x1a\xb5\x39\x5b\xa0\x11\x9d\xe0\x20\x64\xca\xa3\x85\x5e\xbe\x9b\xd5\x65\x07\x77\xb6\xda\x85\xce\x34\x5d\x5f\x18\xc1\xb9\xfb\xef\x1e\xea\x98\xb1\x72\xaf\xb5\x1f\xe7\xfb\xfb\x6f\x5d\x68\x7f\x9f\x49\xcd\x9d\xf3\x0c\xe7\x9c\x08\xbf\x5f\x09\x1c\xd1\x2e\x7c\x7f\x48\x25\xe6\xce\x75\x0a\xf3\x69\xa8\xde\x5d\x96\xcc\x41\xda\x5f\x5d\x2c\xf4\xaf\xcd\x7f\x4d\x68\xce\x2d\xc1\x36\x32\x8a\xe5\xe1\xad\xce\x58\x9a\xb5\xd0\xb4\xc0\xb4\x43\xa8\x3c\x4c\xf3\x50\x45\xe8\xcf\x33\x7a\xa4\xe1\x9b\x67\xc1\x26\x90\x75\x6a\xcb\xfb\x50\xcd\x2e\x54\xbb\x44\xb6\xc6\x7e\x4f\xe1\xbe\x3a\xb6\x6f\x2a\xed\xb7\x70\x5b\x67\x00\x6b\x95\xb3\xeb\x80\xb5\x0e\xdf\x61\x93\xf1\x69\x97\xf5\xe0\x69\xc5\xb9\x45\xfa\x8a\x83\x63\x0b\x6d\xe0\xa3\x07\xb3\xe9\x3f\x20\xac\x50\x90\x30\x96\x1e\x62\x54\xda\x48\x96\x1c\x1c\x83\x58\x29\x97\xd4\xcf\xac\x2a\x21\xa8\x4f\x07\xf2\x4a\xc3\x29\x94\xc6\x20\x23\x2f\x3a\xec\xfe\x8f\xa4\x3a\x12\x84\x06\x14\x88\xa7\x69\x23\x8b\xdd\xb5\x67\x0a\xda\xdb\xf7\x1f\x46\xa0\xb5\x7d\x0f\xf7\xc0\x29\x62\x16\x55\x1e\x87\xfb\x3a\xbd\x4b\x21\x18\x60\x5e\xa7\x78\xfb\xb8\x91\x83\xda\x73\xea\x39\xb0\x51\x83\xf9\xc8\x25\xf2\x01\xa8\x97\xd8\xff\x0c\x9c\x78\x34\x8a\x99\xd7\x37\x18\x6c\x95\x04\x0c\x87\xa5\x2c\xa2\x8d\x02\x7b\x07\x7a\x18\x86\x54\x45\x37\x04\xf5\x4c\x57\xf4\x46\x07\x90\xbc\xab\x26\x27\xdb\x8b\xd3\x42\x69\xd7\xfc\xec\xb4\x21\x57\xdc\x8f\x1f\x7b\x5b\x1e\x6f\xa2\x65\xb0\xb6\x65\x34\x74\xc6\x97\x05\xd4\xdd\xfd\x88\x89\xa5\x67\x5b\xa8\x3d\x6c\x57\x69\xac\xfb\x39\x9e\x79\x2b\x03\x3e\xfa\xde\x73\x87\x19\x25\x93\x68\x56\x6b\xee\x7b\xbe\x48\xb8\x1e\x5d\x35\xc3\x4a\x7b\x89\x82\x9e\x81\xb8\x49\xf3\xbd\xa4\x8d\xab\xd4\x53\xb5\x21\x65\x74\xcd\x3c\x89\x96\x20\x3d\x11\xa4\xc8\xa5\xb7\xc2\x9c\xb0\x72\x99\x37\xe2\x8b\x46\x7d\x43\xbd\xf3\x56\x9e\x1a\x0e\x70\xde\xe9\xd6\xc0\x6a\xd6\x5f\xa7\xd1\x3b\x45\xfe\x55\xee\xe0\x8c\xa4\x38\x65\x82\xfa\x9f\xa1\xa7\xe3\x1f\x53\xbe\xb7\x40\x2e\x08\x78\x4c\xf8\x9f\x6b\x8d\xb0\x63\xba\x5f\x6f\x85\xb5\x87\x16\x93\x24\x91\xe3\xc0\xde\xd7\x09\x15\x20\x0b\xfc\x3b\xc0\x93\xe8\xa0\x8b\xe2\x5c\x2d\xae\x2f\xf3\xad\xa3\x37\x8b\x9b\xed\x3b\x77\xad\x5c\x87\x40\x80\x13\x66\x51\xd9\xf1\x55\x10\x6c\x29\x3e\x87\x64\x7b\x84\x52\x78\x68\x9d\x96\xdf\x1c\xe9\x5f\xe3\xef\x30\x3f\x4b\xf5\x69\x4a\xf5\x1a\x17\x2b\xde\x6f\x1d\xb2\x2f\x95\x7a\x8b\x68\xcc\x6c\xba\xa6\x93\x99\x13\x6d\x4e\xa5\x0b\x85\xc7\x84\x45\xd2\x31\x17\x64\x70\x07\x6c\xda\xc8\x59\x3e\x30\x9d\x6f\x91\x54\xc2\xda\xa3\x46\xaa\xd1\x31\x87\xbd\x2d\xbf\xf0\xa2\xd6\x3b\x8e\x37\x0b\xe6\x61\x6b\xf9\x5d\x64\x8a\x16\x22\x13\xe9\x8f\x31\x0c\xed\x88\x94\xbe\x5c\x38\xa4\x52\x16\xa4\x89\xf7\xba\xf6\xde\x5a\xb7\xe8\x6f\x56\x7c\x01\x7b\x48\x13\x5f\xae\x3d\x99\xd4\x12\xd8\xb9\x21\x99\x5b\x1c\x02\x8a\x4a\x20\x5e\x8b\x4d\xbf\xdb\xa4\x87\xaf\x51\x76\xa6\x37\xc5\xac\x41\x4a\x21\xbd\x08\x94\xc2\xe1\x08\xd3\xce\x5f\xda\xfd\x79\x56\xd3\x9e\xb1\x46\x1b\x29\xc8\x55\x5d\x57\x6c\x2f\x5c\xbe\xac\x30\x60\xad\x42\xe1\xb5\xab\x52\x2b\x49\x14\xbd\x1a\xd4\x58\xfa\xbd\x3a\x7b\x3c\x89\xbc\x50\x48\x91\x68\xca\x27\xc8\x6a\x57\x42\xe9\xbe\x65\x4b\x3c\x45\x0d\x75\xa4\xd6\xe8\xaf\x34\x82\xc8\xc3\x8c\x89\x9e\xed\x99\x26\xd5\x6a\xdd\xb3\x61\xd5\xd0\x91\xf0\xc2\x5a\xc0\xfd\x57\xdc\xe8\x0d\xc8\xc4\xcd\x8d\xe2\x45\x97\x21\xce\x4a\xb5\xe7\x8b\x28\xa2\x4d\x5d\x9f\xca\xd9\x2e\x13\xca\x88\xb7\x2a\xde\xfb\xee\x24\xdd\x22\xb1\x6a\x24\xa4\x70\x1b\x65\x00\x1f\x52\xb0\x5e\xde\x9a\x28\xfb\x93\x64\xc3\x66\x51\xfc\x6a\xf4\xcc\x1a\x30\xd9\x4f\x35\x8c\xae\x77\xea\x8c\xb3\xfc\x4b\x00\x4d\x3b\xe3\x89\xf9\xb7\x39\xf9\x3b\x00\x00\xff\xff\x38\x52\xbb\x7d\x70\x4e\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
