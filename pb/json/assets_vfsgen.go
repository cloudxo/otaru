// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 29, 10, 54, 20, 976494246, time.UTC),
		},
		"/otaru.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru.swagger.json",
			modTime:          time.Date(2018, 12, 31, 13, 8, 2, 707316849, time.UTC),
			uncompressedSize: 22162,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x6f\xe4\xb6\x11\x7f\xf7\xa7\x20\xd4\x3e\xb4\xc0\xe1\x74\x09\x8a\x3e\x18\x08\x50\xc7\x67\x07\x0b\x18\x4d\x6a\x07\xc9\x43\x71\x10\xb8\xe2\x48\xcb\x1c\x45\xea\x48\xca\xbe\xed\x79\xbf\x7b\x41\x4a\xbb\xab\xbf\xab\xff\xb6\x1c\xfb\xe1\x00\xdf\x4a\x33\xfa\xcd\x8f\x33\xe4\xcc\x90\xd2\xb7\x33\x84\x1c\xf5\x80\xc3\x10\xa4\x73\x8e\x9c\xef\xdf\x7f\x70\xde\x99\xdf\x28\x0f\x84\x73\x8e\xcc\x75\x84\x1c\x4d\x35\x03\x73\xfd\x67\x8d\x65\x82\x2e\x7e\x59\xd9\xbb\x10\x72\xee\x41\x2a\x2a\xb8\xb9\xf6\x5d\x26\x8b\x90\xe3\x0b\xae\xb1\xaf\x0f\x0a\x10\x72\x38\x8e\x72\x1a\x62\x29\xfe\x00\x5f\x67\xf7\x23\xe4\x24\x92\x99\xab\x1b\xad\x63\x75\xee\xba\x21\xd5\x9b\x64\xfd\xde\x17\x91\xcb\xb7\xf8\xab\x76\x85\x11\x3b\xde\x0e\x11\xa6\x56\x20\x01\x2e\xfe\x65\x6f\x51\x1a\x62\x23\xe0\xd8\x7b\x76\x67\x08\xed\xac\x25\xca\xdf\x40\x04\xca\x39\x47\xff\x4d\xc1\xd9\x67\x98\xbb\x3e\xd9\xeb\xbe\xe0\x2a\x29\xdc\x80\xe3\x98\x51\x1f\x6b\x2a\xb8\xfb\x87\x12\xfc\x78\x6f\x2c\x05\x49\xfc\x8e\xf7\x62\xbd\x51\x47\x0a\x5d\x1c\x53\xf7\xfe\x3b\x77\xcd\xc4\x5a\x69\x21\xc1\xf5\x05\x0f\x68\x98\xe7\x28\x84\x3c\x65\x08\x39\x22\x06\x69\x75\xaf\x88\x31\xf6\x27\xd0\x97\xa9\xd0\xbb\xe3\x3d\x12\x54\x2c\xb8\x02\x55\x10\x45\xc8\xf9\xfe\xc3\x87\xd2\x4f\x08\x39\x04\x94\x2f\x69\xac\xb3\x31\xbb\x40\x2a\xf1\x7d\x50\x2a\x48\x18\xda\x6b\x7a\x9f\x53\x6f\x85\x2c\x85\xb8\xa2\x0c\x21\xe7\xaf\x12\x02\xa3\xe7\x2f\x2e\x81\x80\x72\x6a\xf4\x2a\x37\x5e\xff\x04\xfa\xc7\xbd\xa1\x29\xe4\xdb\x4c\xb9\x53\x50\xb1\x3b\xab\xfb\x7b\x97\x33\x4f\xe3\xf0\x48\x77\xf6\xdb\x41\xf5\x1d\xc8\x7b\xea\xe7\x74\x7e\x3a\xcb\xeb\xca\xf4\xd4\x70\x0f\x5c\x4b\x5a\xa0\xac\x0b\xf9\x57\x99\xd4\x0b\x60\x3f\x83\xba\x2c\xd6\x25\x98\xe8\xf1\x7c\xec\x6f\x20\x4f\x7d\x2c\xd4\x69\xee\x6f\xad\xe0\xa5\x95\x5b\x3a\xf9\x39\xac\x43\xd9\x8f\xb1\xc4\x11\x68\x90\xe5\x31\x28\x59\xb4\x9f\x53\xd7\x82\x6c\xcb\xc0\x29\x6f\xba\x22\xe1\x4b\x42\x25\x18\x62\xb5\x4c\x60\x5a\x83\xbf\x24\xa0\x74\x17\x7b\x3f\xcd\xe4\x6d\x01\x65\xa0\xb6\x4a\x43\xe4\x62\xad\xa5\xfb\x8d\x92\x5d\x9f\x30\xbf\xd0\x5a\x2e\xde\xc7\x0c\xc8\xa7\x72\x2e\x4a\xca\x78\x4b\x46\xae\x02\xf4\x48\xc9\x23\xfa\xe1\x07\xf4\xe1\x1d\xd2\x1b\xe0\xe8\x4b\x02\x72\x8b\xcc\x0a\x58\x31\x36\xf5\x4b\x73\xa9\x9f\x5f\xea\x6d\x6c\xe1\x28\x2d\x29\x0f\xcb\xb2\x81\x90\x11\xd6\x36\x21\xa0\x5c\xff\xf3\x1f\x79\x52\x76\xef\xda\x8d\xac\xc3\x93\x22\xb5\xa6\x9c\x80\x1a\x60\xa6\x5a\xb0\x0e\xf2\xff\x6b\xca\xe0\xce\xfa\xf1\xf0\x00\x30\x7f\xf6\x0e\x80\x5b\xc0\xc4\x3c\x7c\xf1\x41\xb0\x07\xfa\x7c\x81\xb0\x4c\x5f\x16\x41\xa0\x40\xcf\xe6\xcd\x13\xa3\x65\xc0\xc3\x39\x62\x8f\x72\x0d\xa6\xa8\x69\x84\x5b\x45\x3b\x69\x6c\x1e\x4a\x95\x38\x39\x1d\x6f\xbf\x4b\xaa\xe1\x45\x04\xdc\x01\xe9\x5b\xc4\x15\x71\x3e\x6f\xfe\x95\x1b\x96\xc9\xb2\xaf\x69\x56\x1f\x4e\xfe\x2d\x08\xf4\x59\x7c\xae\x33\x99\xeb\x84\xb1\x5f\x8a\xa3\xbc\xcc\x98\x28\x03\x7e\xaa\xd0\xf8\x73\x26\x2c\xac\x57\x45\x7e\x43\x95\xfe\x48\x97\x9f\xad\x67\x38\x17\x95\xb0\x33\xe0\x7f\xa3\xe4\xef\xfd\xb2\xf6\x31\xae\x85\xa5\xc4\xd5\x49\x52\x43\x54\x1e\x2a\xd4\x3a\x5f\xb7\xcc\xd8\x25\x4e\x5f\x6d\xf6\xcf\x4b\x73\x6f\x6b\x97\xe5\x52\x02\xd6\xcb\x4f\x43\x52\x98\xaf\xa3\xb7\xb2\xb7\x75\x51\x0b\xbb\x71\x2c\x57\x42\xc6\x50\x9f\x2e\x9e\x15\x59\xba\x7f\xa5\x30\x5f\x87\x7f\xed\x6d\x5d\xa0\x7f\x45\x3d\x7d\x2b\x12\xf7\x2f\xc1\xb7\x0c\xcc\xd7\xe2\x5b\xa9\xad\xcf\xef\x5b\xd4\x78\x14\x59\xbb\x4a\x63\xdd\x77\xcf\x67\x65\xb2\xfb\x8f\x3f\xde\x59\xd1\xa5\xbb\x57\x09\xef\x94\xbb\x3f\x7b\xbd\xfd\x98\x67\x22\x0c\x41\xba\x3e\xd6\x10\x8a\x01\x3b\x6e\x97\x47\xc1\x17\xc0\xfd\x11\xed\x94\xcc\xdf\x58\x0e\x47\x11\xbf\x75\xbf\xed\xff\xda\xf5\x9a\x56\xef\x0e\x46\x6d\x17\x3f\x00\x39\xac\x4f\x35\xc1\xfa\x55\x6e\xd0\x84\x6d\xaa\x3c\xde\xc5\xb4\xa1\x4e\x37\x58\x4f\xb7\x58\x87\xce\xfc\x63\x42\x80\x61\x0d\x4a\x7b\x4c\x84\x1e\x70\x2d\xb7\x1e\x25\x3d\x27\xa1\x1b\xab\xe1\x46\x84\x57\x46\x7e\x45\x16\x1f\x09\x35\x98\x97\x32\x21\x31\x11\xf6\x5a\x03\xfe\x63\x0a\xf0\x1b\x23\xb4\x74\xd2\x0f\x48\x9f\x6a\xf2\x89\x28\xf7\x9a\x3a\xe4\x4f\xbc\x73\xd2\x61\x72\x3a\x3d\x55\x3e\x5b\x67\xa9\x79\x8c\xba\xec\x5d\xd1\x88\xce\xb0\xd1\x36\xe7\xd6\xd5\xa0\xd8\xdd\x9f\xa7\x48\xf4\xc6\xce\xa5\x98\x44\xd6\xca\xee\x87\x2a\x12\xbd\xf9\x15\x94\xbe\xb0\x82\x4b\x8f\xe4\x3d\xda\x29\xe7\xcc\xb4\x6e\x59\xf1\x40\x8c\xe5\x9e\x0b\xbe\x8d\x44\xd2\x6b\x16\x3d\xf0\x7f\x10\x7e\x1b\x83\x11\x63\x20\x01\x13\xc1\xd9\x76\xc8\x10\xdc\x02\x26\x3f\x1b\xd9\xb7\x11\xe8\x3f\x02\x85\x53\xc9\xdd\x92\xb7\xe3\x23\x17\xcf\xf8\x11\xea\x92\x38\x3f\x9e\xf0\xee\x43\xfb\x6f\x99\xd4\xd2\x39\xcf\x70\x2e\x89\xf0\x87\x8d\xc0\x11\xed\xc3\xf7\xef\xa9\xc4\xd2\xb9\x4e\x61\x3e\x0f\xd5\x87\xd7\x01\x72\x90\x8e\x87\xf3\x4b\x3b\xb4\xe6\xbf\x26\x39\xcc\x0d\xc1\x3e\x37\x13\xeb\xe2\x7b\x0b\xb1\x34\x63\xa1\x69\x89\x69\x87\x50\x59\x2c\x34\x51\x4d\xf2\x99\x67\xf4\xc4\x96\x66\x9e\x05\x5b\xc2\x36\xa9\xad\x66\xc2\x0d\x79\x70\xe3\x10\xd9\x2e\xdf\x6f\x14\x1e\xea\xb3\xcb\x5d\xad\xff\x96\xce\xa3\x8e\x60\xad\xd6\xba\x1e\x58\x1b\xf1\x95\xd7\xb2\x66\x8c\x25\xc9\xe2\x06\xdc\xf3\x3a\x44\xe1\x6a\xcd\x9e\x7e\xfa\x88\xc2\x96\xbe\x36\xf0\xd1\xa3\x29\x58\x1e\x11\x56\x28\x48\x18\x4b\x37\xf8\x6b\xbd\xab\xb4\xa5\x57\x07\xb1\x56\x2e\x69\xb6\xac\xae\x98\x69\x2e\x65\xf2\x4a\xc3\x39\x94\xc6\x20\x23\x2f\x2a\xee\x8c\x4f\xa4\x3a\x12\x84\x06\x14\x88\xa7\x69\x2b\x8b\xfd\xb5\x67\x0a\xba\x47\xc6\xaf\x46\xa0\x35\x32\x4a\x9b\xe9\x23\x1c\x7c\x8e\xd9\x8e\x2a\x8f\xc3\x43\x93\xde\xb5\x10\x0c\x30\x6f\x52\xbc\xbf\xdc\xca\x41\xe3\x19\xae\x25\xb0\xd1\x80\xf9\xc4\x0b\x56\x23\x50\xaf\xb1\xff\x19\x38\xf1\x68\x14\x33\x6f\xe8\x64\xb0\x57\x12\x30\x1c\x56\xf2\x8f\x2e\x0a\xec\xfb\x41\xe3\x30\xa4\x2a\xfa\x21\x68\x66\xba\x66\x5f\x67\x04\xc9\x87\x4e\xd8\x6c\xab\x78\xda\xe4\x39\x6c\xdc\xf4\x5a\xca\x6b\xde\x1d\x9b\x7a\x41\x9f\xce\xd0\x2a\x58\xdb\xee\x1e\x6b\xf1\x55\x09\x75\xff\x38\x62\x62\xed\xd9\xed\x9f\x01\xbe\xab\x34\xd6\xc3\x02\xcf\x3c\x95\x01\x9f\x7c\xed\xb9\xc7\x8c\x92\x59\x34\xab\x2d\xf7\x3d\x5f\x24\x5c\x4f\xae\x9a\x61\xa5\xbd\x44\xc1\xc0\x89\xb8\x4d\xf3\x83\xa4\xad\xa3\x34\x50\xb5\x21\x65\x72\xcd\x3c\x89\xd6\x20\x3d\x11\xa4\xc8\xa5\xb7\xc1\x9c\xb0\x6a\x81\x38\xe1\x83\x26\x7d\x42\x73\xf0\xd6\x9e\x78\x18\x11\xbc\xf3\x8d\x81\xd5\xac\xbf\xce\xa3\x77\x8e\xfc\xab\xda\xfb\x99\x48\x71\xca\x04\xf5\x3f\xc3\xc0\xc0\x3f\xa5\xfc\xe8\x81\x5c\x10\xf0\x98\xf0\x3f\x37\x3a\x61\xcf\x74\xbf\xd9\x0b\x1b\x37\x5c\x67\x49\x22\xa7\x81\x7d\xac\x13\x6a\x40\x96\xf8\x77\x80\x27\x51\xa1\xff\xe2\x5c\xaf\x6e\xae\xf2\x4d\xa7\x8f\xab\xdb\xfd\x33\x0f\xdb\x50\x0e\x81\x00\x27\xcc\xa2\xb2\xf7\xd7\x41\xb0\x45\xfc\x12\x92\xed\x09\x4a\xe1\xb1\x75\x5a\x7e\x71\xa4\xff\x9b\x7e\x85\x79\x2b\xd5\xe7\x29\xd5\x1b\x42\xac\xfc\xee\xc7\x98\x75\xa9\xd2\x95\x44\x53\x66\xd3\x0d\x3d\xd0\x9c\x68\x7b\x2a\x5d\x2a\x3c\x66\x2c\x92\x4e\x85\x20\x83\x7b\x60\xf3\xce\x9c\xd5\xc3\x1e\xcb\x2d\x92\x2a\x58\x07\xd4\x48\x0d\x3a\x96\xb0\xb6\xe5\x07\x5e\x34\x46\xc7\xe9\x66\xc1\x32\x7c\x2d\xbf\x8a\xcc\xd1\x42\x64\x22\xfd\x50\xd1\xd8\x8e\x48\xe5\xc5\xfb\x31\x95\xb2\x20\x6d\xbc\x37\xb5\xf7\xb6\xba\x43\x7f\xb3\xe6\xe3\x24\x63\x9a\xf8\x72\xeb\xc9\xa4\x91\xc0\xde\x0d\xc9\xdc\xe0\x10\x50\x54\x02\xf1\x3a\x2c\xfa\xfd\x8c\x1e\x3f\x46\xd9\x6e\xe0\x1c\x56\x83\x94\x42\x7a\x11\x28\x85\xc3\x09\xcc\xce\xbf\x70\xf0\xb6\x57\xd3\x9d\xb1\xbe\xbb\x62\xc5\xd7\x86\x46\x30\x6d\xec\xf3\x94\x6c\x2b\xb5\xeb\xf3\x43\x23\x4b\x40\xb5\x55\x90\x1d\x58\x28\xbc\xf0\xd5\x99\x85\xba\x03\xe7\xdd\x85\xab\x87\x3d\x46\xf0\x18\x0a\xaf\x5b\xad\x5e\xcb\xa4\x18\xd4\xa6\xc7\xd2\x1f\xd4\xdf\xe4\x49\xe4\x85\x42\x8a\x44\x53\x3e\x43\x6e\xbf\x11\x4a\x0f\x2d\xde\xe2\x39\x2a\xc9\x13\x15\xd7\x70\xa5\x11\x44\x1e\x66\x4c\x0c\x6c\x52\xb5\xa9\x56\xdb\x81\x6d\xbb\x96\xbe\x8c\x17\x36\x02\x1e\x3e\xe2\x46\x6f\x40\x66\x6e\xf1\x94\x0f\x0a\x8d\x09\x56\xaa\x3d\x5f\x44\x11\xed\x3e\x73\xe5\xbb\xfc\x09\x65\xc4\xdb\x94\xdf\xdc\xe9\x25\xdd\x21\xbd\x6c\x25\xa4\x74\x9a\x67\x04\x1f\x52\xb0\x41\xd1\x9a\x28\xfb\xd1\xd2\x71\x56\x94\x3f\x9e\xb2\xb0\x36\x54\xf6\x31\xa7\xc9\xf5\xce\x9d\x77\x57\xbf\x15\xd4\xb6\x32\x9e\x99\x7f\xbb\xb3\xff\x07\x00\x00\xff\xff\x67\x32\x65\xa6\x92\x56\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
