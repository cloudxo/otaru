// Code generated by vfsgen; DO NOT EDIT.

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2018, 12, 29, 10, 54, 20, 976494246, time.UTC),
		},
		"/otaru.swagger.json": &vfsgen۰CompressedFileInfo{
			name:             "otaru.swagger.json",
			modTime:          time.Date(2018, 12, 30, 15, 7, 8, 314124998, time.UTC),
			uncompressedSize: 21292,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x10\x7a\xdf\xc3\x2e\x10\x54\x69\xb1\xd8\x43\x80\x02\x9b\xa6\x49\x61\x20\xd8\x76\x93\xa2\x3d\x2c\x0a\x81\x16\x47\x32\x5b\x8a\x54\x49\x2a\xa9\xb7\xf1\x7f\x5f\x90\x92\x6d\x59\x1f\x96\xf5\x95\xa8\xdb\x1c\x0a\xa4\x96\x66\xf4\xcc\xc3\x19\x72\x66\x48\xe9\xfb\x11\x42\x8e\xba\xc3\x61\x08\xd2\x39\x45\xce\x8b\x67\x27\xce\xb1\xf9\x8d\xf2\x40\x38\xa7\xc8\x5c\x47\xc8\xd1\x54\x33\x30\xd7\xdf\x6a\x2c\x13\x74\xf6\x6e\x66\xef\x42\xc8\xb9\x05\xa9\xa8\xe0\xe6\xda\xf3\x4c\x16\x21\xc7\x17\x5c\x63\x5f\x6f\x14\x20\xe4\x70\x1c\xe5\x34\xc4\x52\x7c\x06\x5f\x67\xf7\x23\xe4\x24\x92\x99\xab\x0b\xad\x63\x75\xea\xba\x21\xd5\x8b\x64\xfe\xcc\x17\x91\xcb\x97\xf8\x9b\x76\x85\x11\xdb\xde\x0e\x11\xa6\x56\x20\x01\x2e\xfe\xb0\xb7\x28\x0d\xb1\x11\x70\xec\x3d\xab\x23\x84\x56\xd6\x12\xe5\x2f\x20\x02\xe5\x9c\xa2\xbf\x53\x70\xf6\x19\xe6\xae\x4f\xf6\xba\x2f\xb8\x4a\x76\x6e\xc0\x71\xcc\xa8\x8f\x35\x15\xdc\xfd\xac\x04\xdf\xde\x1b\x4b\x41\x12\xff\xc0\x7b\xb1\x5e\xa8\x2d\x85\x2e\x8e\xa9\x7b\xfb\xdc\x9d\x33\x31\x57\x5a\x48\x70\x7d\xc1\x03\x1a\xe6\x39\x0a\x21\x4f\x19\x42\x8e\x88\x41\x5a\xdd\x33\x62\x8c\x7d\x03\xfa\x3c\x15\x3a\xde\xde\x23\x41\xc5\x82\x2b\x50\x3b\xa2\x08\x39\x2f\x4e\x4e\x0a\x3f\x21\xe4\x10\x50\xbe\xa4\xb1\xce\xc6\xec\x0c\xa9\xc4\xf7\x41\xa9\x20\x61\x68\xad\xe9\x59\x4e\xbd\x15\xb2\x14\xe2\x92\x32\x84\x9c\xff\x4b\x08\x8c\x9e\xff\xb9\x04\x02\xca\xa9\xd1\xab\xdc\x78\xfe\x06\xf4\xab\xb5\xa1\x29\xe4\xeb\x4c\xb9\xb3\xa3\x62\x75\x54\xf5\xf7\x2a\x67\x9e\xc6\xe1\x96\xee\xec\xb7\x8d\xea\x1b\x90\xb7\xd4\xcf\xe9\xfc\x74\x94\xd7\x95\xe9\xa9\xe0\x1e\xb8\x96\x74\x87\xb2\x43\xc8\xbf\xc8\xa4\x7e\x00\xf6\x33\xa8\xd3\x62\x5d\x82\x89\x1e\xcf\xc7\xfe\x02\xf2\xd4\xc7\x42\xed\xe7\xfe\xda\x0a\x9e\x5b\xb9\xa9\x93\x9f\xc3\xda\x95\xfd\x18\x4b\x1c\x81\x06\x59\x1c\x83\x82\x45\xeb\x39\x75\x2e\xc8\xb2\x08\x9c\xf2\xba\x2b\x12\xbe\x26\x54\x82\x21\x56\xcb\x04\x86\x35\xf8\x6b\x02\x4a\x1f\x62\xef\xa7\x91\xbc\x2d\xa0\x0c\xd4\x52\x69\x88\x5c\xac\xb5\x74\xbf\x53\xb2\x6a\x13\xe6\x67\x5a\xcb\xc9\xfb\x98\x01\xf9\x50\xce\x45\x49\x11\x6f\xc1\xc8\x59\x80\xee\x29\xb9\x47\x2f\x5f\xa2\x93\x63\xa4\x17\xc0\xd1\xd7\x04\xe4\x12\x99\x15\xb0\x64\x6c\xea\x97\xe6\x52\x3b\xbf\xd4\xcb\xd8\xc2\x51\x5a\x52\x1e\x16\x65\x03\x21\x23\xac\x6d\x42\x40\xb9\xfe\xfd\xb7\x3c\x29\xab\xe3\x66\x23\xab\xf0\xa4\x48\xad\x29\x7b\xa0\x06\x98\xa9\x06\xac\x9d\xfc\xff\x92\x32\xb8\xb1\x7e\xdc\x3d\x00\xcc\x9f\xad\x03\xe0\x1a\x30\x31\x0f\x9f\x7c\x10\xac\x81\x3e\x5e\x20\x4c\xd3\x97\x45\x10\x28\xd0\xa3\x79\xf3\xc0\x68\x19\xf0\x70\x8c\xd8\xa3\x5c\x83\x29\x6a\x6a\xe1\x96\xd1\x0e\x1a\x9b\x9b\x52\x25\x4e\xf6\xc7\xdb\x47\x49\x35\xfc\x10\x01\xb7\x41\xfa\x14\x71\xbb\x38\x1f\x37\xff\xca\x0d\xcb\x60\xd9\xd7\x30\xab\x0f\x27\x7f\x0a\x02\x6d\x16\x9f\xcb\x4c\xe6\x32\x61\xec\xdd\xee\x28\x4f\x33\x26\x8a\x80\x1f\x2a\x34\xfe\x9b\x09\x0b\x6b\x55\x91\x5f\x51\xa5\x5f\xd3\xe9\x67\xeb\x19\xce\x49\x25\xec\x0c\xf8\x2f\x94\xfc\xda\x2e\x6b\xef\xe3\x5a\x58\x4a\x5c\x9e\x24\x35\x44\xc5\xa1\x42\x8d\xf3\x75\xc3\x8c\x5d\xe0\xf4\xa7\xcd\xfe\x79\x61\xee\x6d\xec\xb2\x9c\x4b\xc0\x7a\xfa\x69\x48\x0a\xf3\xe7\xe8\xad\xac\x6d\x9d\xd4\xc2\x6e\x1c\xcb\x95\x51\xcb\x0e\x5e\x24\x6e\xa7\xef\x5b\x29\xcc\x9f\xc3\xb7\xd6\xb6\x3e\xbe\x6f\x51\xe3\x51\x64\xee\x2a\x8d\x75\xdb\x9e\xfc\xcc\x64\x5f\xaf\x5f\xdd\x58\xd1\xa9\xbb\x57\x01\xef\x90\xdd\xf9\xb5\xde\x76\xcc\x33\x11\x86\x20\x5d\x1f\x6b\x08\x45\x87\x1d\x91\xf3\xad\xe0\x0f\xc0\xfd\x16\xed\x90\xcc\x5f\x59\x0e\x7b\x11\xbf\x74\xbf\xaf\xff\x5a\xb5\x9a\x56\x6f\x36\x46\x2d\x27\x3f\x00\x39\xac\x0f\x35\xc1\xfa\x65\x6e\xd0\x80\x6d\x84\x96\x69\xe6\xc3\x4c\xf7\xfb\x1b\x60\xfb\x5b\x60\x5d\x67\xfe\x3e\x21\xc0\xb0\x06\xa5\x3d\x26\x42\x0f\xb8\x96\x4b\x8f\x92\x96\x93\xd0\x95\xd5\x70\x25\xc2\x0b\x23\x3f\x23\x93\x8f\x84\x0a\xcc\x53\x99\x90\x98\x08\x5b\xad\x01\x7f\x99\x02\xe9\xca\x08\x4d\x9d\xf4\x0d\xd2\x87\x9a\x7c\x22\xca\xbd\xba\x0e\xe6\x03\x77\xb6\x0f\x98\x9c\xf6\x4f\x95\x8f\x56\xf9\xd7\x8f\xd1\x21\x7b\x0b\x34\xa2\x23\x6c\x84\x8c\xb9\xb5\xd0\x29\x76\xd7\xfb\xdd\x89\x5e\xd8\xb9\x14\x93\xc8\x5a\x79\xf8\xa6\x77\xa2\x17\xef\x41\xe9\x33\x2b\x38\xf5\x48\x5e\xa3\x1d\x72\xce\x4c\xeb\x96\x19\x0f\x44\x5f\xee\xb9\xe0\xcb\x48\x24\xad\x66\xd1\x0d\xff\x1b\xe1\xa7\x31\xe8\x31\x06\x12\x30\x11\x9c\x2d\xbb\x0c\xc1\x35\x60\xf2\xd6\xc8\x3e\x8d\x40\xfb\x11\xd8\x39\x35\x7a\x58\xf2\xb6\x7d\xe4\xe4\x19\xdf\x42\x9d\x12\xe7\xdb\x13\xb8\x6d\x68\xff\x90\x49\x4d\x9d\xf3\x0c\xe7\x94\x08\xbf\x5b\x08\x1c\xd1\x36\x7c\x7f\x4c\x25\xa6\xce\x75\x0a\xf3\x71\xa8\xde\x1c\xd7\xce\x41\xda\x1e\x9e\x2e\xec\xa0\x99\xff\x9a\xe4\x30\x37\x04\xeb\xdc\x4c\xcc\x77\xcf\x95\xc7\xd2\x8c\x85\xa6\x05\xa6\x1d\x42\xe5\x6e\xa1\x89\x2a\x92\xcf\x3c\xa3\x7b\xb6\x9c\xf2\x2c\xd8\x12\xb6\x4e\x6d\x39\x13\xae\xc9\x83\x6b\x87\xc8\x76\xf9\x3e\x50\xb8\xab\xce\x2e\x57\x95\xfe\x5b\x38\x2f\xd8\x83\xb5\x4a\xeb\x5a\x60\xad\xc5\x57\x5c\xcb\xea\x31\x16\x24\x77\x37\x48\x1e\xd7\x21\x76\xae\x56\xec\xb9\xa6\x8f\xd8\xd9\x72\xd5\x06\x3e\xba\x37\x05\xcb\x3d\xc2\x0a\x05\x09\x63\xe9\x06\x6c\xa5\x77\x65\x85\xcd\x3e\x88\x95\x72\x49\xbd\x65\x55\xc5\x4c\x7d\x29\x93\x57\x1a\x8e\xa1\x34\x06\x19\x79\xd1\xee\xce\xe5\x40\xaa\x23\x41\x68\x40\x81\x78\x9a\x36\xb2\xd8\x5e\x7b\xa6\xe0\xf0\xc8\x78\x6f\x04\x1a\x23\xa3\xb0\xd9\xd9\xc3\xc1\xc7\x98\xed\xa8\xf2\x38\xdc\xd5\xe9\x9d\x0b\xc1\x00\xf3\x3a\xc5\xeb\xcb\x8d\x1c\xd4\x9e\xb1\x99\x02\x1b\x35\x98\xf7\xbc\x00\xd3\x03\xf5\x1c\xfb\x5f\x80\x13\x8f\x46\x31\xf3\xba\x4e\x06\x6b\x25\x01\xc3\x61\x29\xff\x38\x44\x81\x7d\x7f\xa3\x1f\x86\x54\x45\x3b\x04\xf5\x4c\x57\xec\xeb\xf4\x20\x79\xd3\x09\x1b\x6d\x15\x4f\x9b\x3c\x9b\x8d\x9b\x56\x4b\x79\xc5\xbb\x3d\x43\x2f\xe8\xc3\x19\x5a\x06\x6b\xdb\xdd\x7d\x2d\xbe\x28\xa0\x6e\x1f\x47\x4c\xcc\x3d\xbb\xfd\xd3\xc1\x77\x95\xc6\xba\x5b\xe0\x99\xa7\x32\xe0\x83\xaf\x3d\xb7\x98\x51\x32\x8a\x66\xb5\xe4\xbe\xe7\x8b\x84\xeb\xc1\x55\x33\xac\xb4\x97\x28\xe8\x38\x11\x37\x69\xbe\x93\xb4\x71\x94\x3a\xaa\x36\xa4\x0c\xae\x99\x27\xd1\x1c\xa4\x27\x82\x14\xb9\xf4\x16\x98\x13\x56\x2e\x10\x07\x7c\xd0\xa0\x4f\xa8\x0f\xde\xca\x13\x0f\x3d\x82\x77\xbc\x31\xb0\x9a\xf5\xb7\x71\xf4\x8e\x91\x7f\x95\x7b\x3f\x03\x29\x4e\x99\xa0\xfe\x17\xe8\x18\xf8\xfb\x94\x6f\x3d\x90\x0b\x02\x1e\x13\xfe\x97\x5a\x27\x6c\x99\xee\xd7\x7b\x61\xed\x86\xeb\x28\x49\xe4\x30\xb0\xb7\x75\x42\x05\xc8\x02\xff\x0e\xf0\x24\xda\xe9\xbf\x38\x97\xb3\xab\x8b\x7c\xd3\xe9\xf5\xec\x7a\xfd\xcc\xcd\x36\x94\x43\x20\xc0\x09\xb3\xa8\xec\xfd\x55\x10\x6c\x11\x3f\x85\x64\x7b\x80\x52\xb8\x6f\x9d\x96\x5f\x1c\xe9\x3f\xc3\xaf\x30\x4f\xa5\xfa\x38\xa5\x7a\x4d\x88\x15\xcf\xe6\xf7\x59\x97\x4a\x5d\x49\x34\x64\x36\x5d\xd3\x03\xcd\x89\x36\xa7\xd2\x85\xc2\x63\xc4\x22\x69\x5f\x08\x32\xb8\x05\x36\xee\xcc\x59\x3e\xec\x31\xdd\x22\xa9\x84\xb5\x43\x8d\x54\xa3\x63\x0a\x6b\x5b\x7e\xe0\x45\x6d\x74\xec\x6f\x16\x4c\xc3\xd7\xf2\xab\xc8\x18\x2d\x44\x26\xd2\x0f\xc9\xf4\xed\x88\x94\x5e\x8c\xee\x53\x29\x0b\xd2\xc4\x7b\x5d\x7b\x6f\xa9\x0f\xe8\x6f\x56\x7c\x3c\xa2\x4f\x13\x5f\x2e\x3d\x99\xd4\x12\xd8\xba\x21\x99\x1b\x1c\x02\x8a\x4a\x20\xde\x01\x8b\x7e\x3b\xa3\xfb\x8f\x51\xb6\x1b\x38\x86\xd5\x20\xa5\x90\x5e\x04\x4a\xe1\x70\x00\xb3\xf3\x2f\x1c\x3c\xed\xd5\x1c\xce\x58\xdb\x5d\xb1\xaa\xa3\xd6\x87\x0b\x97\x8f\x39\xf4\x18\xab\x50\x78\x87\x55\xa9\x95\x24\x8a\x4e\x0d\x6a\x2c\xfd\x4e\x9d\x3d\x9e\x44\x5e\x28\xa4\x48\x34\xe5\x23\x64\xb5\x0b\xa1\x74\xd7\xb2\x25\x1e\xa3\x86\xda\x53\x6b\x74\x57\x1a\x41\xe4\x61\xc6\x44\xc7\xf6\x4c\x93\x6a\xb5\xec\xd8\xb0\x6a\xe8\x48\x78\x61\x2d\xe0\xee\x23\x6e\xf4\x06\x64\xe4\xe6\x46\xf1\x88\x4c\x9f\x60\xa5\xda\xf3\x45\x14\xd1\xa6\xae\x4f\xa5\xb5\xf3\x84\x32\xe2\x2d\x8a\xef\xac\xb4\x92\x3e\x20\xb1\x6a\x24\xa4\x70\x8e\xa5\x07\x1f\x52\xb0\x4e\xd1\x9a\x28\xfb\x39\xc5\x7e\x56\x14\x3f\xeb\x30\xb1\x06\x4c\xf6\x99\x99\xc1\xf5\x8e\x9d\x71\x96\xbf\x62\xd2\xb4\x32\x1e\x99\x7f\xab\xa3\x7f\x03\x00\x00\xff\xff\xbf\x33\x2b\x8c\x2c\x53\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/otaru.swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr: gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
