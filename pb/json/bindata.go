// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x20\xb4\x3d\x6c\x40\x50\xa5\xc5\xb0\x87\x00\x05\xd6\xa6\x49\x61\x20\xd8\xba\x64\xe8\x1e\x86\x42\xa0\xa5\x23\x99\x2d\x45\xaa\xe4\x51\x52\xaf\xf1\x7f\x1f\x28\xcb\xb6\xae\xd6\x3d\x11\xd6\x3e\x14\x48\x2d\x9e\xa3\x8f\x1f\xcf\xdd\xf4\xd7\x13\x42\x2c\x7d\x4f\x83\x00\x94\x75\x4e\xac\x17\xcf\xce\xac\x53\xf3\x19\x13\xbe\xb4\xce\x89\x79\x4e\x88\x85\x0c\x39\x98\xe7\x7f\x20\x55\x31\x79\xf5\x6e\x91\xac\x22\xc4\xba\x03\xa5\x99\x14\xe6\xd9\xf3\x54\x96\x10\xcb\x95\x02\xa9\x8b\x7b\x05\x84\x58\x82\x86\x19\x0d\x91\x92\x1f\xc1\xc5\x74\x3d\x21\x56\xac\xb8\x79\xba\x42\x8c\xf4\xb9\x6d\x07\x0c\x57\xf1\xf2\x99\x2b\x43\x5b\xac\xe9\x17\xb4\xa5\x11\x3b\x2c\x87\x90\xb2\x44\x20\x06\x21\x7f\x4b\x96\x68\x84\xc8\x08\x58\xc9\x9a\xcd\x09\x21\x9b\x64\x27\xda\x5d\x41\x08\xda\x3a\x27\xff\x6c\xc1\x25\xef\x30\xab\x3e\x24\xcf\x5d\x29\x74\x9c\x5b\x40\xa3\x88\x33\x97\x22\x93\xc2\xfe\xa8\xa5\x38\xac\x8d\x94\xf4\x62\xb7\xe5\x5a\x8a\x2b\x7d\xa0\xd0\xa6\x11\xb3\xef\x9e\xdb\x4b\x2e\x97\x1a\xa5\x02\xdb\x95\xc2\x67\x41\x96\xa3\x00\xb2\x94\x11\x62\xc9\x08\x54\xa2\x7b\xe1\x99\xcd\xbe\x05\xbc\xd8\x0a\x9d\x1e\xd6\x28\xd0\x91\x14\x1a\x74\x4e\x94\x10\xeb\xc5\xd9\x59\xe1\x23\x42\x2c\x0f\xb4\xab\x58\x84\xe9\x99\x65\x14\x25\x8f\x13\xb2\x68\x49\x8c\x10\xeb\x47\x05\xbe\x91\xf8\xc1\xf6\xc0\x67\x82\x19\x0d\xda\x8e\x96\x6f\x01\x5f\xef\xb6\xb4\x05\x77\x93\x02\xb2\x72\x2a\x36\x27\x55\x7f\x6f\x32\x1b\x41\x1a\x1c\x88\x4d\x3f\xdb\xab\xbe\x05\x75\xc7\xdc\x8c\xce\x0f\x27\x59\x5d\xa9\x9e\x0a\x96\x41\xa0\x62\x39\x72\xda\xd0\x7c\x99\x4a\xcd\x8a\xe7\x14\xd4\xbc\xf8\x55\x60\x3c\xc2\x71\xa9\xbb\x82\x2c\xc9\x91\xd4\xc7\x59\xbe\x49\x04\x2f\x12\xb9\xf9\xd0\x9c\x41\xd5\x97\xe7\x88\x2a\x1a\x02\x82\x2a\xb2\x5d\xc0\xbe\x8b\x88\x4b\xe9\xad\x8b\xc0\x99\xa8\x7b\xa2\xe0\x73\xcc\x14\x18\x0a\x51\xc5\x30\xee\x86\x3f\xc7\xa0\xb1\xcd\x7e\x3f\x4c\x64\x57\x3e\xe3\xa0\xd7\x1a\x21\xb4\x29\xa2\xb2\xbf\x32\x6f\xd3\xc5\x75\x5f\x21\xaa\x19\x59\x93\x81\xf3\x58\x66\xc4\xbc\x6a\x23\x32\x79\xa8\x9b\x11\xe1\x3a\x4a\x34\x6a\x54\x4c\x04\x45\x59\x5f\xaa\x90\x62\x92\x7b\x99\xc0\x5f\x7f\xc9\xee\x6b\x73\xda\x8c\xb3\x0a\xcf\x16\xe9\xe7\x18\xd4\x31\x7b\xf7\x29\xd7\x0d\x58\x7b\x19\xeb\x15\xe3\x70\x9b\x18\x5d\x7f\x6b\x35\x7f\x76\xb6\xd6\x1b\xa0\x9e\x79\xf9\x8c\x2c\x76\x07\xe9\xbb\xd5\xe6\x71\x4a\xdf\xd7\x80\x93\xd9\xed\xc8\x68\x39\x88\x60\x0a\x2f\x63\x02\xc1\x74\x0a\xb5\x70\xcb\x68\x47\xf5\xc2\x7d\xfd\x1f\xc5\xc7\x3d\xeb\x6f\xc5\x10\x66\xe6\x5a\x7b\x4c\xdf\x7d\x2b\x8f\xf3\x69\x0b\xa0\xcc\xb1\x8c\x56\xfe\x8c\x93\x51\x84\xf7\xbb\xf4\xa0\x4b\x42\xb9\x4a\x65\xae\x62\xce\xdf\xe5\x4f\xf9\xa9\xad\xbf\x08\xed\xb1\x9c\xe0\xff\x59\x6e\xf0\x4e\x0d\xed\x35\xd3\xf8\x86\xcd\xa9\x30\x4e\x11\x3d\x5d\x24\x2c\xec\x68\xe1\x93\x07\x0e\xe2\x27\xe6\xfd\xfc\x40\x5e\xbe\x24\x67\xa7\x04\x57\x20\x48\x62\x23\xc4\xd8\xd0\xb3\xf1\x8d\x88\x2a\x45\xcb\x81\x0f\x21\x2c\x1e\x0a\x69\x8c\xc1\x0d\x51\xb8\xc0\xe9\x37\x5b\xa5\x8b\x42\x3c\x6d\x1c\x52\x5c\x28\xa0\x38\xa7\x22\x62\x0b\xe8\xdb\x18\x4d\xec\xf6\xfa\xf4\x69\x99\x19\xc3\xf1\x96\xb6\x46\x8a\x5d\x47\x89\x0b\x93\xf5\xde\xbc\xbe\x4d\x44\xe7\x63\x48\x05\x64\x63\x0e\x15\x77\x7a\xbb\x71\xcc\x65\x10\x80\xb2\x5d\x8a\x10\xc8\x1e\x23\xdb\x8b\x83\xe0\xac\x58\x3e\xe0\x1a\x93\xe3\xeb\x84\xad\x41\x14\xaf\xed\xaf\xbb\xbf\x36\x9d\x82\xe2\xed\x7e\x53\xeb\x19\x51\x9d\x41\xf5\x58\xe1\xd1\x2d\xb3\x40\x46\x6c\xb3\x3a\xa6\xec\xc7\x09\xd6\xc7\x47\x01\xc7\x87\x01\x7d\xe3\xf6\x10\x63\xe7\x14\x41\xa3\xc3\x65\xe0\x80\x40\xb5\x76\x98\xd7\x31\xb0\x5c\x27\x1a\xae\x65\x70\x69\xe4\x17\xde\x8c\x6c\xbe\x02\xdd\x5c\x82\x0c\x97\x41\xa7\x08\xfe\xa7\x29\x2b\xaf\x8d\xd0\x7c\xe8\xdd\x63\x7a\xac\x80\x12\x32\xe1\xd4\x4d\x6d\x1e\x79\x6e\xd7\x22\xe0\x1c\x0f\x7f\x4f\xd6\x19\xd5\x9f\x51\x9b\xc9\x29\x0b\xd9\x04\x63\xde\x29\x07\xa7\xbd\xbc\x34\x6d\x88\x72\xd7\x3c\xda\x85\xc3\x6d\x01\xbd\x30\x82\xf3\xf1\xd4\x03\xa8\x31\xe3\xdf\x41\x6b\x3f\x76\x0f\x97\x63\xba\x10\xfc\x3e\x95\x9a\x0f\xbb\x29\xa2\xa7\xa1\x76\x7f\x91\x27\x83\xe9\x70\xad\xa6\x30\x48\x32\xff\x35\x31\x20\xc3\xf8\xce\x05\xe5\x32\x7f\xe3\x28\x52\x86\x7a\x64\x05\x52\x2d\x8f\xa9\x7c\x8d\x40\x1a\xa6\x2f\x47\x26\x2f\x59\x16\x92\xea\xa3\x4e\x6d\x39\xe0\xd5\x84\xbb\xda\x33\x4a\x9a\xae\xf7\x0c\xee\xab\x83\xc8\xa6\xd2\x5e\x0b\xdf\x50\x0f\x60\xad\x72\x77\x1d\xb0\xd6\xe1\xcb\xcf\x00\x9e\xf6\x58\x73\x4f\x2b\x06\x88\xdb\x57\xe4\xe6\x87\x68\xe0\x93\x07\x93\x5d\x1e\x08\xd5\xc4\x8f\x39\xdf\x4e\x13\x2b\x6d\x24\xcd\x42\xc7\x20\x56\xca\xc5\xf5\x3b\xab\xca\x3c\xf5\x79\x27\xab\x34\x98\x42\x69\x04\x2a\x74\xc2\xfc\x18\x6e\x24\xd5\xa1\xf4\x98\xcf\xc0\x73\x90\x35\xb2\xd8\x5d\x7b\xaa\xa0\xbd\x7d\xff\x65\x04\x5a\xdb\xf7\x70\x0f\x9c\x22\x66\x31\xed\x08\xb8\xaf\xd3\xbb\x94\x92\x03\x15\x75\x8a\x77\x8f\x1b\x39\xa8\xfd\x6a\x68\x0e\x6c\xd4\x60\x3e\x72\xed\x71\x00\xea\x25\x75\x3f\x81\xf0\x1c\x16\x46\xdc\xe9\x1b\x0c\x76\x4a\x7c\x4e\x83\x52\xc1\xd0\x46\x41\x72\x97\x6f\x18\x86\xad\x8a\x6e\x08\xea\x99\xae\x18\xa1\x0d\x20\x79\xdf\xb6\x4c\x96\x8b\xb7\x15\xf9\x7e\x46\xd6\x29\x21\x57\xdc\xf3\x1c\x3b\x2d\x8f\xb7\xd1\x32\xd8\x64\x0a\x31\x74\xc7\x97\x05\xd4\xdd\xfd\x88\xcb\xa5\x93\xcc\xdf\x7a\xd8\xae\x46\x8a\xfd\x1c\xcf\xbc\x95\x83\x18\x3d\xf7\xdc\x51\xce\xbc\x49\x34\xeb\xb5\x70\x1d\x57\xc6\x02\x47\x57\xcd\xa9\x46\x27\xd6\xd0\x33\x10\x37\x69\xbe\x57\xac\xf1\x94\x7a\xaa\x36\xa4\x8c\xae\x59\xc4\xe1\x12\x94\x23\xfd\x2d\x72\xe5\xac\xa8\xf0\x78\xb9\xa3\x1b\xf1\x45\xa3\xbe\xa1\xde\x79\x2b\xbf\x46\x1a\xe0\xbc\xd3\x9d\x41\xa2\x19\xbf\x4c\xa3\x77\x8a\xfa\xab\x3c\x40\x18\x49\xf1\x96\x09\xe6\x7e\x82\x9e\x8e\x7f\x4c\xf9\xc1\x02\x85\xf4\xc0\xe1\xd2\xfd\x54\x6b\x84\x1d\xcb\xfd\x7a\x2b\xac\x9d\x83\x4f\x52\x44\x8e\x03\xfb\xd0\x27\x54\x80\x2c\xf0\x6f\x81\x88\xc3\xdc\x14\xc5\xba\x5a\x5c\x5f\x66\xa7\x44\x6f\x16\x37\xbb\x77\xee\x67\x86\x96\x07\x3e\x8d\x79\x82\x2a\x59\x5f\x05\x21\x69\xc5\xe7\x50\x6c\x8f\xd0\x0a\x57\xf5\x69\xad\xb2\x3e\xfb\x77\xfc\x74\xf2\xbd\x2f\x9f\xa6\x2f\xaf\xf1\xa7\xe2\xad\xb2\x21\x49\xa8\x34\x48\x24\x63\x96\xce\x35\x63\xcb\x8c\x68\x73\xdd\x5c\xe8\x32\x26\xec\x88\x8e\xf9\x0d\x87\x3b\xe0\xd3\x86\xc9\xf2\xd7\x70\xf3\xed\x88\x4a\x58\x7b\x34\x44\x35\x3a\xe6\x90\xc8\xb2\x07\x2f\x6b\xbd\xe3\xf8\x64\x60\x1e\xb6\x96\x4d\x19\x53\xcc\x0b\xb9\xdc\xfe\x2a\x78\xe8\xf8\xa3\xf4\x83\x9c\x21\x6d\xb1\xf4\x9a\x78\xaf\x9b\xe5\xad\xb1\xc5\x30\xb3\xe2\xb7\x84\x43\x26\xf6\x6a\xed\xa8\xb8\x96\xc0\xce\xd3\xc7\xcc\xe1\x78\xa0\x99\x02\xcf\x69\x91\xf4\xbb\x6d\x7a\xf8\x19\xe9\xd8\x75\x41\xd7\xd6\xcb\x43\x76\x0d\x4a\x49\xe5\x84\xa0\x35\x0d\x06\x6f\xbb\xea\xba\x55\xfd\xb6\x8b\xc2\xe5\xaf\x6b\x07\x50\x16\x48\xa7\x5d\xa3\x54\xc9\x8a\xec\x35\x23\xa5\xca\xed\x35\x5c\x12\x71\xe8\x04\x52\xc9\x18\x99\x98\xa0\xd6\x5a\x49\x8d\x7d\x2b\xe7\x68\x8a\x32\xfe\x48\x05\xdc\x5f\x69\x08\xa1\x43\x39\x97\x3d\x27\x04\x4d\xaa\xf5\xba\xe7\xcc\xa4\xa1\x29\x76\x82\x5a\xc0\xfd\x4f\xdc\xe8\xf5\xbd\x89\xfb\xeb\xe2\x05\x80\x21\xce\xca\xd0\x71\x65\x18\xb2\xa6\xc1\x43\xe5\x6e\x97\x31\xe3\x9e\xb3\x2a\xde\x50\xed\x24\xdd\x22\xdd\x37\x12\x52\xfa\xd1\xd8\xcc\xba\xe7\xf4\xe7\xaa\xa3\xeb\x9d\xba\x82\x28\xff\x46\xb2\x29\xa7\x9c\x98\x7f\x9b\x93\xff\x02\x00\x00\xff\xff\x89\x7c\x98\x6d\xc9\x46\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 18121, mode: os.FileMode(420), modTime: time.Unix(1517733287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

