// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\x08\xee\x1e\x83\x28\x09\x16\x7b\xf0\xa9\x6d\x0e\x41\x4e\x2d\x12\xa0\x97\x22\x10\x28\x6a\x2c\x31\x95\x38\x0c\x39\x4c\xeb\x16\xfe\xf7\x82\xb4\x1c\xc9\x8e\xe4\xd8\x52\x82\xe6\x16\x70\xe6\xbd\xbc\x79\xc3\x19\x5a\xbf\x67\x8c\x71\xf7\x43\x14\x05\x58\x3e\x67\xfc\xe2\xf4\x8c\x9f\x84\x33\xa5\x17\xc8\xe7\x2c\xc4\x19\xe3\xa4\xa8\x82\x10\xff\x4c\xc2\x7a\xf6\xf1\xcb\x75\xcc\x62\x8c\x3f\x82\x75\x0a\x75\x88\x9d\x37\x58\xc6\xb8\x44\x4d\x42\xd2\x13\x01\x63\x5c\x8b\xba\xc3\x60\x2c\xde\x83\xa4\x26\x9f\x31\xee\x6d\x15\xa2\x25\x91\x71\xf3\x24\x29\x14\x95\x3e\x3b\x95\x58\x27\x7a\x29\x7e\x52\x82\x01\xd6\xa6\x43\x2d\x54\x04\x78\xd0\xf8\x21\xa6\x38\x02\x13\x00\x3c\xe6\xac\x66\x8c\xad\x62\x25\x4e\x96\x50\x83\xe3\x73\xf6\x6d\x2d\x2e\xfe\x8f\x90\x75\x17\xe3\x12\xb5\xf3\x5b\x09\xc2\x98\x4a\x49\x41\x0a\x75\x72\xef\x50\xb7\xb9\xc6\x62\xee\xe5\x81\xb9\x82\x4a\xd7\x5a\x98\x08\xa3\x92\xc7\xf3\x24\xab\x30\x73\x84\x16\x12\x89\x7a\xa1\x8a\xae\x47\x05\x74\x2d\x63\x8c\xa3\x01\x1b\xb9\xaf\xf3\x50\xec\x15\xd0\xe5\x1a\x74\xd2\xe6\x58\x70\x06\xb5\x03\xb7\x05\x65\x8c\x5f\x9c\x9d\xed\x1c\x31\xc6\x73\x70\xd2\x2a\x43\x4d\xcf\x3a\x44\x31\x1c\xcd\x12\xcf\x60\x8c\xf1\x7f\x2d\x2c\x02\xe2\x9f\x24\x87\x85\xd2\x2a\x30\xb8\xc4\x64\x57\x40\x9f\x36\x25\xad\xc5\xdd\x34\x82\xf8\x16\xc5\x6a\xd6\xf7\xf7\xaa\x53\x08\x89\xa2\x35\xb6\x39\x7b\xa2\xbe\x05\xfb\xa8\x64\x87\xf3\x6e\xd6\xe5\x6a\x78\x7a\x5c\xb6\x10\x3a\x96\x4a\x21\x4b\xe8\x7a\x6d\xd0\xed\x37\xfb\x26\x02\x2f\x23\xee\xfd\xd8\xdd\x51\x35\xd6\x67\x23\xac\xa8\x81\xc0\xee\xba\xbd\xa3\x7d\x33\xb1\x19\xe6\xcb\x5d\xe1\x4a\x0f\x45\x2c\x3c\x78\x65\x21\x58\x48\xd6\xc3\xeb\x16\xfc\xe0\xc1\xd1\x21\xf5\xde\xbd\xd1\xbd\x72\x4b\x47\x50\x27\x5b\xdb\xf1\xb0\xc1\xbd\x8d\xc8\xeb\x00\x7c\x3f\xb7\xa9\x15\xf5\x9a\x43\xdb\xb2\x8e\x73\xb7\x7d\x53\x8e\x31\xf8\x6b\x83\x7a\x3f\xee\x36\x8a\xfe\x8e\xb5\x4f\xef\x5f\x47\x53\xfb\x1a\xed\xdd\xdb\x1d\xdf\x69\x69\xe2\x0e\xc0\x6c\xfb\xb9\x36\x36\x34\x80\xd4\x8e\xb5\x3c\x13\xf2\x3b\xe8\x3c\x55\xb5\xa9\xd2\x66\x81\x6c\x39\xbf\x21\x74\x64\x95\x2e\x78\x6f\xe1\x1b\x92\x45\xb5\x76\xe0\x68\x82\xb8\xec\xa7\x69\x58\x53\x1c\xa7\xa0\xf7\x6e\xf7\x6e\xb0\x09\x0e\xe7\x76\x99\x5a\xaf\x87\x44\x65\x88\x15\x08\xbd\x75\x79\xf9\x02\x6d\x2d\xa8\x1b\xee\xad\x39\x07\x17\x36\x77\xea\xd4\xaf\xc3\x3d\x3b\xa4\xe8\xe9\xf7\xca\x79\x29\xc1\x0d\xb6\x62\x4a\xd5\x60\x2d\xda\xb4\x06\xe7\x44\x31\xb9\xec\x9e\x85\x3a\xa1\xea\x02\xd3\xe7\xbb\x70\xbf\xae\x4e\x61\x38\x6a\x76\x84\x95\xe5\x18\x9c\xf6\x75\x5a\xa0\x45\x4f\x4a\x0f\xda\xa8\x34\x41\xf8\xd2\x18\xe8\x93\xd2\xf4\xff\x7f\xfd\xf4\x25\x3a\x1a\x3b\xcb\x46\xe5\x2f\xc0\x06\xf4\xf8\x3d\x82\xfc\x5b\x90\xd6\x50\xa7\xa2\xaa\x50\xbe\x0d\xb5\x5b\xbe\x74\x25\x46\x10\xc7\xc6\x0f\x0a\x1e\xdf\xf1\xc0\xbb\xc8\x07\x05\x1f\x49\x3c\x30\xaf\xbb\x4f\xf4\x94\x61\x55\x94\x4a\xac\x6b\x45\xa3\xde\x3c\xaf\xaa\x3c\x2d\x77\x3f\x4a\x8e\x42\x93\x3a\x62\x3e\x9e\xff\x5a\x98\xad\x66\x7f\x02\x00\x00\xff\xff\x63\x51\x31\x29\x0f\x10\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 4111, mode: os.FileMode(420), modTime: time.Unix(1511530800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

