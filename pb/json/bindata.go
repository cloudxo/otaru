// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xc1\x6e\x9c\x30\x10\xbd\xef\x57\x58\x6e\x8f\x51\x48\xa3\xaa\x87\x1c\x9b\x43\x94\x6b\x22\xf5\x52\x45\xc8\x98\x01\x9c\x82\xc7\xf2\x0c\xa9\xa2\x6a\xff\xbd\x32\xb0\x0b\xbb\x81\xcd\xc2\x36\xea\xde\x8c\x3d\xef\xe9\xcd\xf3\x78\x86\x3f\x2b\x21\x24\xfd\x56\x79\x0e\x5e\xde\x08\x79\x7d\x79\x25\x2f\xc2\x9e\xb1\x19\xca\x1b\x11\xce\x85\x90\x6c\xb8\x84\x70\x8e\xac\x7c\x7d\xe9\x3c\x32\x36\x71\x42\xc8\x17\xf0\x64\xd0\x86\xd3\x6e\x29\x2c\xb2\x20\x60\xb9\x12\x62\xdd\xb0\x91\x2e\xa0\x02\x92\x37\xe2\x67\x0b\x2a\x98\xdd\x86\x20\xac\x29\xc4\x3e\x35\xb1\x1a\x2d\xd5\x3b\xc1\xca\xb9\xd2\x68\xc5\x06\x6d\xf4\x4c\x68\xfb\x58\xe7\x31\xad\xf5\x91\xb1\x8a\x0b\xea\x53\x8a\x94\x33\xd1\xcb\x97\x28\x29\x31\x21\x46\x0f\x91\x46\x9b\x99\x7c\x1b\x21\x84\xcc\x81\x07\x9f\x42\x48\x74\xe0\x1b\xee\xfb\x34\xe4\x7b\x07\x7c\xdb\x82\x2e\xfa\x18\x0f\xe4\xd0\x12\xd0\x0e\x54\x08\x79\x7d\x75\xb5\xb7\x25\x84\x4c\x81\xb4\x37\x8e\x3b\x07\x07\x44\xcd\x71\x63\x9c\x7a\x03\x13\x42\x7e\xf6\x90\x05\xc4\xa7\x28\x85\xcc\x58\x13\x18\x28\x72\xc9\x1d\xf0\xf7\x4d\x4a\xad\xb8\x87\x4e\x90\xdc\xa1\x58\xaf\xc6\xd6\xeb\x41\x22\xac\xf2\xde\xd8\x6e\x6f\x4b\xfd\x08\xfe\xc5\xe8\x01\xe7\xd3\x6a\xc8\xd5\xf1\x8c\xb8\xec\x21\xdc\x58\xac\x95\x2e\x60\xe8\xb5\x43\x3a\x6c\xf6\x43\x03\xbc\x6d\x70\xe7\x63\xf7\x40\xd5\x39\xf8\x4c\xaf\xc4\x50\x45\x3b\xaf\xf7\xb8\x42\x7e\x6c\x90\xf7\x01\x78\x3e\xee\xf6\xa2\xfe\xa5\xb9\x3d\xeb\x32\x77\xfb\x8e\x37\xc7\xe0\x1f\x1d\xea\x7c\xdc\xed\x14\xfd\x1f\x6b\xb7\xb3\x61\xa0\xa9\xef\xce\x07\xfb\xd8\xc0\x77\x7e\x75\xed\x5c\x4a\x9e\x41\xf3\xd6\x92\x30\x18\x1c\x78\x36\x7b\xd6\xca\x44\xe9\x5f\x60\xd3\xd8\x54\xae\x8c\xad\xaa\x60\xdf\xf9\x0d\x21\xb1\x37\x36\x97\xa3\x89\x6f\x48\xb2\xb2\x75\x60\x36\x41\xd3\xfc\x4e\xd3\xd0\x52\xcc\x53\x30\x5a\xdb\xe3\x2d\xec\x04\x8b\xa9\xd6\x1a\x68\x52\x55\x82\x58\x82\xb2\x3b\xd5\x2b\x33\xf4\x95\xe2\xe1\xf1\x68\xd2\xe0\x3d\xfa\xb8\x02\x22\x95\x1f\xef\xda\x44\xda\x23\xbd\xe5\x84\xac\x73\x8c\xdf\xb6\x85\xa3\x6f\x13\x17\x95\x91\xf2\xba\x58\x82\xb3\x75\x15\xe7\xe8\xb1\x66\x63\x27\x6d\x34\x96\x21\xfc\x14\x4e\xdc\x93\xb1\xfc\xed\xeb\x38\x7d\x81\xc4\x4b\xcb\xda\x99\xf4\x1d\xd8\x84\x9e\xfa\x80\xa0\xfa\x23\x48\x2b\xa8\x62\x55\x96\xa8\x3f\x86\x9a\x5e\xdf\x2b\x89\x05\xc4\xcd\xc5\x4f\x0a\x5e\x7e\xe3\x81\x37\x4b\x27\x05\xcf\x24\x9e\x78\xaf\xfb\xd3\xea\x94\xc7\x6a\x38\xd6\x58\x55\x86\x17\xb5\xff\xda\x94\x69\x5c\xec\xff\xaf\xce\x42\xb3\x99\xf1\x3e\xde\x0e\xce\xd5\x7a\xf5\x37\x00\x00\xff\xff\xfe\x97\x73\x16\xba\x0d\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 3514, mode: os.FileMode(420), modTime: time.Unix(1511521742, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

