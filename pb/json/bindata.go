// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x2c\xdc\x1e\x17\xd1\x26\x28\x7a\xc8\xa9\xcd\x66\x5b\x2c\xb0\xe8\x23\x0b\xf4\x52\x2c\x08\x5a\xa2\x64\x26\x14\xa9\x90\x94\x13\x37\xf0\x7f\xef\x90\x96\xac\xb7\x56\xa2\xa4\x8d\x0e\x49\x1c\x92\xf3\x69\xe6\xe3\xbc\x34\xf6\xb7\xcd\xd5\xd5\x56\x7d\xc1\x51\x44\xe4\xf6\xed\xd5\xf6\xcd\xab\x9b\xed\xb5\x59\xa3\x3c\x14\xb0\x60\xf6\xe1\x7f\x9a\x6a\x46\xcc\xfe\x9f\x1a\xcb\xf4\xea\xd7\xbf\xee\xed\x29\xd8\x39\x10\xa9\xa8\xe0\x66\xef\x75\x26\x0b\xab\xbe\xe0\x1a\xfb\xfa\x02\x00\x4b\x1c\xc7\x25\x84\x44\x8a\x8f\x04\x0e\x5c\xe7\xdb\xa9\x64\x66\x77\xaf\x75\xa2\xde\x7a\x5e\x44\xf5\x3e\xdd\xbd\xf2\x45\xec\xf1\x23\xfe\xaa\x3d\x61\xc4\x8a\xe3\x24\xc6\xd4\x0a\xa4\x84\x8b\x5f\xec\x11\xa5\x49\x62\x04\xb6\xf6\xcc\x09\xfe\x3e\x59\x4b\x94\xbf\x27\x31\x51\x70\xf8\xdf\xb3\x72\xf6\x19\xe6\xd4\x93\xdd\x07\x5d\x55\x5a\x39\x80\x93\x84\x51\x1f\x6b\xb0\xcb\xfb\xa8\xc0\xb8\xcb\x59\x50\x3b\x48\xfd\x81\x67\xb1\xde\xab\x82\x42\x0f\x27\xd4\x3b\xbc\xf6\x76\x4c\xec\x94\x16\x92\x78\xf0\xe0\x90\x46\x65\x8e\x22\x52\xa6\x0c\x16\x44\x42\xa4\xc5\xbe\x0f\x8c\xb1\xbf\x13\x7d\x7b\x16\xba\x2e\xce\x48\xa2\x12\x30\x81\xa8\x8a\x28\x6c\xbc\xb9\xb9\xa9\x2d\xc1\x62\x40\x94\x2f\x69\xa2\xb3\x3b\x2b\x01\xd9\x6d\x4b\x16\x6e\x88\xc1\xce\x8f\x92\x84\x46\xe2\x07\x2f\x20\x21\xe5\xd4\x20\x28\x2f\xd9\x81\x4e\xef\x72\x93\xce\xca\x7d\xc8\x14\xda\x56\x20\x4e\x9b\xb6\xcf\xa7\x92\x21\x1a\x47\x05\xb1\xd9\xda\x05\xfa\x91\xc8\x03\xf5\x4b\x98\x4f\x9b\x32\x56\x86\xd3\xc2\x32\xe1\x5a\xd2\x0a\x39\x43\x68\xbe\xcb\xa4\x56\xc5\x73\xa6\xd4\xba\xf8\x95\xc4\x44\x04\xf2\x31\x58\x54\x26\x39\x11\xaa\x9f\xe5\x0f\x56\xf0\xd6\xca\xad\x87\xe6\x92\x56\xae\x3c\x27\x58\x42\xae\xd3\x90\x18\x6b\x6c\xd7\x74\xcf\x33\xe2\x4e\x04\xc7\xba\xe2\x94\x77\xed\x48\xf2\x39\xa5\x40\x3a\xec\x6b\x99\x92\x79\x0d\xfe\x9c\x12\xb8\xb5\x01\xf6\x3e\x2d\xe4\x57\x21\x65\x44\x1d\x21\x95\xc7\x1e\x1b\x15\xb3\x0f\x54\xe9\xf7\x54\xae\xc8\x93\x32\x8d\x5e\xca\x8b\x4c\xb9\x69\xf7\x22\xb8\x54\xd9\xe7\x46\x21\x66\xaa\xee\x47\xfa\x98\x58\x54\x05\x19\x87\x47\x5b\x27\x1f\xf8\x0d\xee\xf2\xd1\xde\xe5\x48\x27\xa0\x5c\x04\x24\xd8\x79\x4a\x63\x3d\x36\x71\xdf\xff\x01\xb2\xef\xdf\x3d\x5a\xd1\xf5\x38\x43\x4d\xb3\x39\x53\x78\x8e\x3b\x8e\x63\x26\x4c\xcb\xe7\x41\xe7\x42\x22\xe1\x50\x20\x6f\x0b\xc1\x55\xb1\x5c\xe8\x35\x27\xc7\x0f\x96\xad\x49\x14\x1f\xbd\x6f\xf9\xa7\xd3\xa8\x3a\xf9\x78\x31\xea\xb8\x22\xaa\x4b\x5a\xbd\x54\x86\xf3\x9b\x2c\xd8\xfd\x73\x96\x6b\xcb\x7f\xfd\xb5\xb2\x27\xc7\x5d\xaf\xa5\x6a\xe7\x3a\x52\x0e\xb6\x13\x59\x83\x85\x03\xa1\x90\x31\xd6\xd9\x91\x9f\x7f\x9a\xa3\x76\x4f\x71\x76\xf8\x67\x54\x26\xf9\xdb\xd4\xa6\x07\x23\xb4\x1e\xd7\xbe\xe8\xf4\x52\x8e\x1d\x53\x8e\x68\x30\x7f\xf1\x6e\x77\x9a\x3e\x97\x19\xe2\xf8\xfd\x61\x38\x45\x5f\x2c\x25\x6e\xc2\x42\xff\x50\x77\x84\x8a\x54\x33\x7c\x6b\x77\x34\xc0\x26\x46\x63\xaa\x57\x71\x01\xcb\x46\x69\xd6\x5a\x57\x86\x3b\xc3\xea\xfd\xb9\x91\xbb\x37\x82\xeb\x89\xd4\x42\xa9\x39\x8b\x7d\x81\xea\xc6\x6e\x31\x12\x1b\x43\xf0\x3f\x99\xd4\x7a\xd8\xcd\x34\xfa\x3e\xd4\x6e\xf2\xf1\x5d\x49\xa7\x8b\xf2\xdb\xde\xb1\x53\x89\xf7\x3c\x10\xc5\xae\x3a\x6d\x4c\xa4\xb9\x00\x4d\x6b\xd4\x6e\x77\xd8\xff\x44\x78\x80\x68\x9c\x30\x94\x25\x87\x0a\xf3\x5d\x49\xa7\x6c\x78\x0e\x12\x32\x1c\x35\xae\x6e\x08\x80\x9d\xa5\x4c\xd3\xe1\x0c\x31\x4e\x83\x56\xdf\xee\x6a\xaa\x27\x90\x7c\x29\x20\x1d\x8a\x35\xcb\x40\x47\x11\xe8\x7e\xf5\xb6\xb9\xf1\xd2\x35\xb7\xbb\x6a\xb7\xb9\xf5\x39\xdb\x04\x5b\xcd\xf4\x71\x41\x43\x9b\xca\xde\xd9\x07\x4e\xb4\xf8\xae\xa6\xf5\xf8\x38\x82\xd0\x44\xb6\x23\x77\xf0\x5d\xf3\xda\xef\x16\x78\xe6\xa9\x8c\xf0\x67\x64\x2b\x84\x77\xd6\xe2\x32\xf0\x01\x33\x1a\x2c\x82\xac\x8e\xdc\x47\xbe\x48\xb9\x9e\x1d\x9a\x61\xa5\x51\xaa\x6c\x93\xb2\x00\xf2\x17\x49\x9f\xbd\x25\x47\x68\x43\xca\xec\xc8\x3c\x8d\x77\x44\x22\x11\x9e\x35\x97\x68\x8f\x79\xc0\x9a\xb5\x75\xc6\x07\xcd\xfa\x84\xee\xe0\x6d\x1d\x2c\x4d\x08\xde\xe5\xee\xc0\x22\xeb\xaf\xcb\xe0\x52\x47\x47\x4f\xfb\x02\xbf\xd1\xca\xcd\x04\x7c\x66\x82\x42\xa3\xe0\x18\xf8\x7d\xe0\x85\x07\x9a\x41\x2a\x62\xc2\xff\xd4\xe9\x84\x6d\xaf\x28\xe3\xbd\xb0\x3e\xeb\x5e\x6f\xc5\xac\x69\xea\x50\x2e\x5b\x11\x26\x18\xbc\x84\xdf\xba\xb6\x8d\xd9\x99\xf1\x25\x9b\xfe\x37\x7f\x2d\x48\xbb\x99\x19\xe9\xb5\x25\xd0\x68\x09\x50\xb8\xd7\x18\xc5\x10\x6b\xf3\x43\x03\x2a\x0d\x29\x09\x20\x59\x3c\x7b\xa5\x13\x63\xb8\xda\x34\x2f\xd8\xe0\xf7\x79\x12\x23\x07\xc2\x96\x4d\x56\xcd\xf9\xde\x7a\xd3\x55\x43\x57\x87\x84\xd5\x81\xb1\x48\xca\x72\x77\x74\x26\x22\xa7\x8c\x35\x5b\x58\x54\x74\x39\xff\xa2\xc7\xed\xcd\x7b\xa4\xf3\x77\xdc\x5a\xcb\xf7\xf2\x13\x6e\x2c\x90\x47\x24\xd3\x4e\x83\x76\x42\x30\x82\x79\x17\x55\xf9\x76\xab\xc1\x01\x51\x66\x14\x8a\x06\xd4\x80\x71\x46\x4f\x0f\x4e\x95\xfa\x3e\x51\x9d\xbd\xcf\x14\xab\x89\x94\x42\xa2\x18\xd0\x71\x34\xd9\xec\xb6\x2f\xd3\xba\xcd\xae\x0b\x37\x87\xa0\x13\x28\x8b\x04\x1a\xd6\xf4\xb6\xb2\x22\x9c\xe6\x5d\x58\xfa\x4e\x83\x02\xe8\x73\x11\x70\x26\x52\x4d\xf9\x02\xa5\x77\x2f\x94\x76\x6d\xa4\x92\x25\xba\xba\x9e\x86\xc8\x1d\x34\x26\x31\xc2\x0c\x32\xde\x32\xd0\xea\xe8\xf8\xfe\xfb\xcc\x0b\x0e\x8a\x3a\x15\x76\xbf\x71\x83\x1b\x06\x0b\xbf\x2b\xd5\xc7\xea\x53\x82\x95\x6a\xe4\x8b\xd8\x7c\x77\xe5\x32\x2e\x4b\x29\x0b\xd0\xbe\xfe\xfb\x83\x51\xd2\x03\xca\x6f\x17\x21\x1b\xf3\xe7\xb4\xf9\x3f\x00\x00\xff\xff\xba\x1b\x4b\x9b\x82\x2c\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 11394, mode: os.FileMode(420), modTime: time.Unix(1512860688, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

