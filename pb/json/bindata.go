// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xc1\x6e\xe3\x36\x10\xbd\xfb\x2b\x08\xb6\xc7\xc5\x2a\xbb\x28\x7a\xc8\xa9\xed\x36\x5d\x04\x28\xd0\x62\x17\xe8\xa5\x08\x04\x8a\x1a\xc9\xdc\x8a\xa4\x32\x1c\x26\x75\x0b\xff\x7b\x41\x5a\x8e\x65\x45\xb2\x2d\xc9\xee\xfa\x10\x20\x10\x67\x1e\xdf\x3c\xce\x0c\x87\xfe\x77\xc1\x18\x77\xcf\xa2\x2c\x01\xf9\x2d\xe3\xef\xdf\xde\xf0\x37\xe1\x9b\x32\x85\xe5\xb7\x2c\xac\x33\xc6\x49\x51\x05\x61\xfd\x37\x12\xe8\xd9\x8f\xbf\xdf\x47\x2b\xc6\xf8\x13\xa0\x53\xd6\x84\xb5\x77\x8d\x2f\x63\x5c\x5a\x43\x42\xd2\x0b\x00\x63\xdc\x08\xdd\x42\xa8\xd1\x7e\x01\x49\x8d\x3d\x63\xdc\x63\x15\x56\x97\x44\xb5\xbb\x4d\x92\x52\xd1\xd2\x67\x6f\xa5\xd5\x89\x59\x89\xbf\x29\xb1\xc1\x6d\x67\x0e\x5a\xa8\xe8\xe0\xc1\xd8\x1f\xa2\x89\x23\xa8\x83\x03\x8f\x36\xeb\x05\x63\xeb\x18\x89\x93\x4b\xd0\xe0\xf8\x2d\xfb\x73\x43\x2e\xee\x11\xac\x1e\xe2\xba\xb4\xc6\xf9\x3d\x03\x51\xd7\x95\x92\x82\x94\x35\xc9\x17\x67\xcd\xce\xb6\x46\x9b\x7b\x79\xa2\xad\xa0\xa5\xdb\x49\x98\x88\x5a\x25\x4f\xef\x92\xac\xb2\x99\x23\x8b\x90\x48\x6b\x0a\x55\xb6\x35\x2a\xa1\x2d\x19\x63\xdc\xd6\x80\x11\xfb\x3e\x0f\xc1\x7e\x04\xfa\xb0\x71\x7a\xb3\xb3\x41\x70\xb5\x35\x0e\xdc\x9e\x2b\x63\xfc\xfd\xcd\x4d\xe7\x13\x63\x3c\x07\x27\x51\xd5\xd4\x9c\x59\x0b\x28\x2e\x47\xb1\xc4\x2b\x37\xc6\xf8\xb7\x08\x45\xf0\xf8\x26\xc9\xa1\x50\x46\x05\x04\x97\xd4\xd9\x47\xa0\x9f\xb6\x21\x6d\xc8\x7d\x6a\x08\xf1\x3d\x88\xf5\xa2\xef\xff\x75\x2b\x10\x12\xe5\x4e\xd8\xe6\xdb\x0b\xf4\x67\xc0\x27\x25\x5b\x98\x0f\x8b\x36\x56\x83\xd3\xa3\x32\x18\x42\xb5\x27\xce\x29\x32\xdf\x35\x5e\x57\xa5\x73\x43\xea\xba\xf4\x45\x08\x15\x91\x4a\x21\x97\xd0\x16\xb9\xb6\xee\xb0\xca\x9f\xa2\xe3\x87\xe8\x77\x3d\x32\xb7\x58\x4d\xd5\xb9\x16\x28\x34\x10\x60\x57\xed\x0e\xf7\x6d\x47\xcc\x6c\xbe\xea\x12\x57\x66\x68\x05\xe1\xd1\x2b\x84\x20\x21\xa1\x87\xf3\x06\xfc\xe8\xc1\xd1\x29\xf1\x3e\x5c\x28\xaf\x0a\x55\x81\x5b\x39\x02\x9d\x54\xa3\x6a\xf6\x57\xe5\xe8\x67\x85\x57\x94\x49\x0d\xa3\xff\x2b\x8b\xc2\x75\xd3\x9f\x45\x8f\x1e\xf0\x50\x1a\x15\xa2\x72\xdd\x3c\xa2\x55\x1d\x51\x1d\xa1\x32\x25\x9f\x94\x03\xbf\xa8\x0a\x3e\xc7\xb3\x1c\x99\x04\x4d\x02\xec\x8d\x20\xa7\xb5\xed\xcd\x76\xf7\xc1\xf1\x7a\x12\x61\x47\xea\x9c\x9d\x7b\x87\x3a\x4d\xdd\xdd\xe0\x36\x46\xe0\x3f\x1a\xaf\xeb\x51\xb7\x61\xf4\x75\xa4\x7d\x19\x32\x5b\x9c\x76\x23\xdf\xc1\xe1\xa8\xa5\xfb\xb6\xd8\x6c\xb6\x3f\x13\xd7\x18\x0e\x80\x54\x47\x5a\x9e\x09\xf9\x17\x98\x3c\x55\xba\xae\xd2\xa6\xfe\xf7\x94\x1f\xaa\xde\x76\xe0\x5b\x90\xa2\xda\x28\x30\x1a\x20\xde\xf8\xf3\x38\x6c\x20\xc6\x31\xe8\xcd\xed\xde\xf1\x68\x86\xc2\x61\x68\x5c\x0d\x51\x12\x88\x62\xbf\x9f\x72\x45\xa0\xbb\x21\x8c\x9a\xe5\xee\xe2\x86\xfd\xd9\x7a\x72\xc4\x77\x1d\xd6\xe3\x13\xab\xb2\x59\x1a\x2f\x92\x09\x87\xe9\x48\xd0\xb4\x4c\x0c\xbb\x56\x60\x8e\xf8\xee\x09\x5e\x58\xd4\x22\x74\x2b\xae\x0c\x7d\xff\x5d\x3f\xf0\x93\xa8\x54\x7e\x11\x64\xb7\x32\x32\x95\xd6\x1b\x3a\x3b\x74\x25\x1c\xa5\xde\xc5\x9b\xf9\x02\xc8\xcf\xa8\x8e\x9e\xd2\x44\xe8\x20\xca\xd9\x91\x8d\xd7\x19\x60\x6a\x8b\x0d\x73\x4c\x97\xc2\xe4\xd5\xeb\xcb\xe6\x8c\x1b\x9d\x75\x87\x81\xe2\xed\x0e\x87\xd7\xdb\xab\x3a\x4c\x27\x34\xaa\x5e\x84\x19\x01\x4f\xbd\x6d\x1a\x9b\xf1\x8d\x4d\xfd\x73\xfe\x8a\xf1\x6a\xb0\xc0\x95\x21\x28\x01\x27\x80\x96\x97\x00\xad\x01\x75\xaa\x6d\x3e\xa8\xc1\x74\x68\x6d\x73\x55\x28\xc8\x53\x52\x47\x8f\x74\x5e\xbd\xf5\xbc\x72\x67\x64\x60\x8e\xab\x14\xfd\xe0\xb5\x92\x59\x5b\x81\x30\x43\x94\xb7\xcb\xbd\x92\xe4\xe0\xc2\xb3\x2c\x3d\x21\xe9\xc6\x05\x3d\xbf\xd1\x38\x2f\x25\xb8\xc1\xbe\x38\x27\x6a\x40\xb4\x98\x6a\x70\x4e\x94\xb3\xc3\xee\x79\x6f\xcd\x88\xba\xb4\xe9\xeb\xa7\xd2\x61\x5e\xad\xc0\xec\xa4\xd1\x5a\xa0\x9c\x34\x82\x19\xaf\xd3\xd2\xa2\xf5\xa4\xcc\x05\xca\x75\x69\x1d\x4d\x6d\xbe\xf5\x70\x6b\x3a\x5c\xe0\x7e\x5a\x13\x9d\x0e\xaa\x41\xa7\xa2\xaa\xec\xc4\x59\xe6\x18\xb4\x5b\x4d\x9c\x2c\x0e\x01\xc7\x83\x1f\x24\x3c\xfd\xc4\x03\x6e\x91\x0f\x12\x1e\x09\x3c\x50\xaf\xdd\x17\xfc\x9c\x62\x55\x94\x4a\xab\xb5\x3a\x36\x97\xf7\x46\x9b\x79\x55\xe5\xe9\xb2\xfb\xc3\xf5\x28\xef\x13\x6e\xb2\x21\x41\x16\xe1\x6f\xbd\xf8\x2f\x00\x00\xff\xff\xaf\x70\xa2\x37\x93\x1b\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 7059, mode: os.FileMode(420), modTime: time.Unix(1511615260, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

