// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x59\x4b\x6f\xdc\x36\x10\xbe\xef\xaf\x30\xb6\x3d\x1a\x91\x13\x14\x3d\xe4\xd4\xc6\x71\x0b\x03\x41\x5b\xc4\x40\x2f\x85\x21\x50\xd2\x48\xcb\x84\x22\x15\x92\xda\x64\x1b\xec\x7f\xef\x90\x92\x56\x8f\x95\xb4\xab\x97\xab\x43\x02\x9b\x9c\xf9\x34\xf3\x71\x5e\xa4\xbf\x6f\x6e\x6e\xb6\xea\x2b\x89\x22\x90\xdb\xb7\x37\xdb\x37\xaf\xee\xb6\xb7\x66\x8d\xf2\x50\xe0\x82\xd9\xc7\xdf\x34\xd5\x0c\xcc\xfe\x9f\x9a\xc8\xf4\xe6\xd7\xbf\x1e\xad\x14\xee\xec\x41\x2a\x2a\xb8\xd9\x7b\x9d\xeb\xe2\xaa\x2f\xb8\x26\xbe\x3e\x01\xe0\x12\x27\x71\x05\x21\x91\xe2\x13\xa0\xc0\x6d\xb1\x9d\x4a\x66\x76\x77\x5a\x27\xea\xad\xe3\x44\x54\xef\x52\xef\x95\x2f\x62\x87\x1f\xc8\x37\xed\x08\xa3\x56\x8a\x43\x4c\xa8\x55\x48\x81\x8b\x5f\xac\x88\xd2\x90\x18\x85\xad\x95\x39\xe2\xff\x47\xeb\x89\xf2\x77\x10\x83\x42\xe1\x7f\x32\xe3\xec\x37\x8c\xd4\xb3\xdd\x47\x5b\x55\x5a\x13\x20\x49\xc2\xa8\x4f\x34\xfa\xe5\x7c\x52\xe8\xdc\x49\x16\xcd\x0e\x52\xff\x4a\x59\xa2\x77\xaa\xa4\xd0\x21\x09\x75\xf6\xaf\x1d\x8f\x09\x4f\x69\x21\xc1\xc1\x0f\x87\x34\xaa\x72\x14\x41\x95\x32\x5c\x10\x09\x48\x8b\xfd\x18\x18\x67\x7f\x07\x7d\x9f\x29\xdd\x96\x32\x12\x54\x82\x2e\x80\xaa\xa9\xe2\xc6\x9b\xbb\xbb\xc6\x12\x2e\x06\xa0\x7c\x49\x13\x9d\x9f\x59\x05\xc8\x6e\x5b\xb2\xc8\x99\x1a\xee\xfc\x28\x21\x34\x1a\x3f\x38\x01\x84\x94\x53\x83\xa0\x9c\xc4\x43\x9b\xde\x15\x2e\x65\xc6\x7d\xcc\x0d\xda\xd6\x20\x8e\x9b\xb6\x9f\x8f\x15\x47\x34\x89\x4a\x62\xf3\xb5\x13\xf4\x13\xc8\x3d\xf5\x2b\x98\xcf\x9b\x2a\x56\x8e\xd3\xc2\x32\x70\x2d\x69\x8d\x9c\x6b\x68\x7e\xc8\xb5\x56\xc5\x73\x6e\xd4\xba\xf8\x95\x60\x32\xc2\xf5\x09\x7a\x54\x25\x39\x11\xaa\x9f\xe5\x8f\x56\xf1\xde\xea\xad\x87\xe6\x8a\x55\x63\x79\x4e\x88\xc4\x5a\xa7\xb1\x30\x36\xd8\x6e\xd8\x5e\x54\x44\x4f\x04\x87\xa6\xe1\x94\x77\xed\x48\xf8\x92\x52\x24\x1d\xf7\xb5\x4c\x61\x5e\x87\xbf\xa4\x80\xa7\x76\x85\xbf\xcf\x0b\xc5\x55\x48\x19\xa8\x03\x96\xf2\xd8\x61\x83\x72\xf6\x03\x55\xfa\x3d\x95\x2b\x8a\xa4\xdc\xa2\x97\x8a\x22\xd3\x6e\xda\xa3\x08\x0f\x55\xf6\x85\x51\x48\x98\x6a\xc6\x91\x3e\x24\x16\x55\x61\xc5\xe1\xd1\x76\x54\x0c\xfc\x86\x67\xf9\x64\xcf\x72\x60\x10\x50\x2e\x02\x08\x3c\x47\x69\xa2\x87\x16\xee\xc7\x3f\x50\xf7\xfd\xbb\x27\xab\xba\x9e\x60\x68\x58\x36\x67\x09\x2f\x70\x87\x71\xcc\x84\x19\xf9\x1c\x9c\x5c\x20\x12\x23\x1a\xe4\x7d\xa9\xb8\x2a\x96\x4b\xbb\xe6\xe4\xf8\x83\x65\x6b\x12\xc5\x07\xe7\x7b\xf1\xd3\x71\x50\x9f\x7c\x3a\x39\x75\x58\x11\xd5\x15\xab\x5e\xaa\xc2\xf9\xe7\x2c\xd8\xfd\xac\xca\xb5\xd5\xbf\xfe\x5e\xd9\x53\xe3\x6e\xd7\xd2\xb5\x0b\x1b\x29\x47\xdf\x41\x36\x60\x51\x20\x14\x32\x26\x3a\x17\xf9\xf9\xa7\x39\x7a\xf7\xa8\x60\xcf\x9b\x76\xed\xda\x78\x5d\x25\xc9\x5a\xc4\xa3\x51\x5c\x51\x78\x9f\x8c\x9a\xb3\x8c\x94\xa8\xe3\xd8\x2d\x2f\xdb\x43\x08\xfe\x3b\xd7\x5a\x0f\xbb\xb9\x45\xff\x0f\xb5\x9b\xe2\x61\xa0\x62\x53\x79\x4d\xef\xbd\xd0\x56\x78\x2f\x12\x53\x78\xf5\x77\x8c\x44\x9a\x03\xd0\xb4\x41\xed\xd6\x23\xfe\x67\xe0\x81\x4b\xe3\x84\xb9\x79\x0d\xa9\x31\xdf\x55\x8d\xaa\x8e\x17\x20\x21\xcb\x18\x18\x0c\x60\x6f\x69\xd3\x6c\xc8\x20\x86\x59\xd0\x1a\xdb\x5d\xed\x7a\x02\xc9\xa7\x0e\xd1\x61\x18\x91\x92\xd4\x4b\xf3\x96\x62\xd4\x34\x1d\xe9\x1b\xea\x6d\x6d\x3c\xf5\xe3\xf6\x50\xed\x76\xb7\x79\x83\x9f\xe0\xab\x79\xd7\x58\xd0\xd1\x73\x63\x1f\xec\x07\x27\x7a\xfc\xd0\xb0\x7a\x78\x1e\x61\x6a\xba\xb6\xd7\x8f\x88\x5d\x73\xa1\x18\x97\x78\xe6\xab\x0c\xf8\x05\xdd\x1a\xe1\x9d\x9d\xb9\x0a\xbc\x27\x8c\x06\x8b\x20\xab\x03\xf7\x5d\x5f\xa4\x5c\xcf\x0e\xcd\x88\xd2\x6e\xaa\xec\x34\xb3\x00\xf2\x57\x49\x2f\x9e\xd2\x48\x68\x43\xca\xec\xc8\x3c\x8d\x3d\x90\xae\x08\x33\xcb\xa5\xbb\x23\x3c\x60\xe7\xbd\x75\xc6\x0f\xcd\xfa\x85\xee\xe4\x6d\xbd\xb2\x4e\x48\xde\xe5\xce\xc0\x22\xeb\x6f\xcb\xe0\xd2\x91\x81\x9e\xf6\x25\xfe\xd9\x28\x37\x13\x70\xc6\x04\xc5\x41\x61\x64\xe2\xf7\x81\x97\x11\x68\x9e\x68\x5c\x26\xfc\xcf\x9d\x41\xd8\x76\x65\x19\x1e\x85\xcd\x57\xb4\xf5\x76\xcc\x86\xa5\x23\xda\x65\x2b\xc2\x04\x87\x97\x88\xdb\xb1\x63\x63\x2e\x33\xbc\x65\xd3\x7f\xe7\xef\x05\x69\x37\x33\x03\xa3\xb6\x02\x1a\x2d\x01\x8a\xe7\x1a\xbb\x31\xe6\xda\xfc\xd0\x88\x4a\x43\x0a\x01\x16\x8b\x8b\x47\x3a\x31\x87\xeb\x43\xf3\x82\x03\x7e\x5f\x24\x31\xd8\x03\x5b\xb6\x58\xb5\xfc\x2d\x65\x82\xb3\x81\x3c\xb8\x32\xed\x6c\x11\x9e\x10\x0c\x08\xef\x32\xb9\xd8\x6e\xe5\x02\x6f\xf4\xe6\x35\xca\xbd\x22\xbb\x86\x39\x3d\xbd\x4a\xab\xd4\xf7\x41\x75\x76\x95\x29\x5e\x83\x94\x42\xba\x31\xa2\x93\x68\xb2\xdb\x6d\x0f\xa0\xdd\x6e\x37\x95\xcf\x9f\x97\x26\x50\x16\x09\xf7\xba\x71\xa2\x95\x15\x31\xea\x25\x81\x48\x7f\xd4\x15\x0c\x27\x08\x17\x39\x13\xa9\xa6\x7c\x81\xa2\xb6\x13\x4a\x8f\x6d\x51\xc9\x12\xfd\xb2\xa7\xd5\x8c\x07\x8d\x21\x76\x09\xc3\xe9\x6b\x19\x68\x75\x18\x79\xb3\xb8\x30\x3a\xba\x51\xa7\xc1\xe3\x4f\xdc\xe0\x86\xc1\xc2\x53\x68\xf3\xc1\x72\x4a\xb2\x52\x8d\xd7\xf2\x38\xa6\x97\xc6\xf3\x56\x6f\xbd\x94\xb2\xc0\xdd\x35\xff\x66\x34\x48\xfb\x8a\x7e\xdf\x45\xc8\xc6\xfc\x3b\x6e\xfe\x0b\x00\x00\xff\xff\xe9\x4f\x21\x87\x36\x26\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 9782, mode: os.FileMode(420), modTime: time.Unix(1512225006, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

