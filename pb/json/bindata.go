// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x2c\xd4\x1e\x17\xd1\x26\x28\x7a\xc8\xa9\x6d\xba\x2d\x16\x28\xd0\x22\x01\x7a\x29\x16\x04\x25\x8d\xe4\x49\x29\x52\xe1\xc7\x6e\xdd\xc2\xff\xbd\x43\x5a\x5e\x7d\xac\x64\x5b\x92\xdd\xfa\x90\x20\xe1\x70\x1e\xdf\xbc\x19\x0e\x47\xfe\x67\x75\x73\x13\x99\x67\x5e\x14\xa0\xa3\xf7\x37\xd1\xbb\x37\x77\xd1\xad\x5f\x43\x99\x2b\x5a\xf0\x76\xfa\x9f\x45\x2b\xc0\xdb\x7f\xb5\x5c\xbb\x9b\xef\x7f\x7b\x08\xbb\xc8\xf2\x04\xda\xa0\x92\xde\xf6\xb6\xf6\xa5\xd5\x54\x49\xcb\x53\xfb\x02\x40\x4b\x92\x97\x2d\x84\x4a\xab\xcf\x40\x1b\x6e\xf7\x66\xa7\x85\xb7\xae\xad\xad\xcc\xfb\x38\x2e\xd0\xae\x5d\xf2\x26\x55\x65\x2c\x37\xfc\x2f\x1b\x2b\xef\xd6\x6c\x87\x92\x63\x70\x70\x20\xd5\x77\x61\x8b\xb1\x50\x79\x87\x28\xec\xd9\xd2\xdf\xdb\x10\x89\x49\xd7\x50\x82\xa1\xcd\x7f\xec\xc8\x85\x33\xfc\xae\xc7\x60\x27\xae\xc6\x75\x36\xf0\xaa\x12\x98\x72\x4b\x71\xc5\x9f\x0d\x05\xf7\xb2\x97\x68\x67\x2e\x3d\x71\x2f\xb7\x6b\xd3\x48\x18\xf3\x0a\xe3\xa7\xb7\x71\x22\x54\x62\xac\xd2\x10\xd3\xc1\x39\x16\x6d\x8d\x0a\x68\x4b\x46\x0b\xaa\x02\x1d\xb0\x1f\x32\x1f\xec\xcf\x60\x3f\xec\x9c\x6e\x9b\x3d\x1a\x4c\x45\x21\x80\xe9\xb8\x92\xe1\xdd\xdd\x5d\x6f\x89\x16\x33\x30\xa9\xc6\xca\xd6\x39\x6b\x01\x05\x73\x10\x8b\xbf\x72\x23\xcb\xd7\x1a\x72\xef\xf1\x55\x9c\x41\x8e\x12\x3d\x82\x89\xab\x84\x38\xfd\xb0\x0f\x69\x47\xee\x63\x4d\x28\xea\x40\x6c\x57\x43\xff\xde\xb6\x02\xb1\xbc\x68\x84\xad\xd7\x5e\xa0\x3f\x81\x7e\xc2\xb4\x85\xf9\xb8\x6a\x63\xd5\x38\x03\x2a\x83\xb4\x1a\x3b\xe2\x9c\x22\xf3\x7d\xed\x75\x55\x3a\xd7\xa4\xae\x4b\x5f\x0d\xfe\x46\xb0\x94\x53\x44\x6d\x91\x2b\x65\x0e\xab\xfc\x31\x38\x7e\x08\x7e\xd7\x23\x73\x8b\xd5\x5c\x9d\x2b\xae\xa9\xd7\x59\x6a\x8c\x3d\xb5\x7b\xdc\xf7\x1d\x31\x51\xd9\xa6\x4f\x1c\xe5\x98\x45\xc3\x17\x87\x24\x3a\xd9\xad\x76\x70\xde\x80\xbf\x38\xa0\xac\x9d\x10\xef\xe3\x85\xea\x2a\x47\x01\x66\x43\xad\xbc\x8c\xc5\xa4\x3b\xfb\x0b\x1a\xfb\x23\xea\x2b\xaa\xa4\x9a\xd1\x7f\x55\x45\xfe\xb9\x19\xae\x22\x4a\xaa\x3e\x54\x46\x39\x17\xa6\x5f\x47\x76\x53\x05\x54\x43\x1d\x47\x16\xd1\xac\x1a\xf8\x89\x72\xf9\x29\xe4\x72\x62\x11\xd4\x05\xd0\x19\x41\x4e\x6b\xdb\xbb\xe3\x1e\xbc\xe3\xf5\x14\x42\x43\xea\x9c\x9d\xbb\x41\x9d\xa7\x6e\x33\xb8\x4d\x11\xf8\xf7\xda\xeb\x7a\xd4\xad\x19\xfd\x3f\xd2\xbe\x0c\x99\x2d\x4e\xcd\xc8\x77\x70\x38\x6a\xe9\xbe\xbf\x6c\x2a\xe9\xce\xc4\x34\x6d\x52\x02\x2c\xf6\xa4\x8d\x12\x9e\xfe\x09\x32\x63\x58\x56\x82\xd5\xf7\xbf\xa3\xfc\xd8\xed\x6d\x07\xbe\x07\xc9\xc5\x4e\x81\xc9\x00\xe1\xc5\x5f\xc6\x61\x07\x31\x8d\xc1\x60\x6d\x0f\x8e\x47\x0b\x14\xf6\x43\xe3\x66\x8c\x12\xd7\x9a\x77\xfb\x69\x84\x54\x2f\xfd\x10\x26\xcd\x72\xf7\xe1\xc0\xe1\x6a\x3d\x39\xe2\xfb\x1e\xeb\xe9\x85\x45\xb5\xca\xc2\x43\x32\x23\x99\xc6\x72\x3b\xaf\x12\xfd\xa9\x02\xe4\x11\xdf\x8e\xe0\xb9\xd2\x25\xf7\xdd\x8a\xde\x38\xfb\xed\x37\xc3\xc0\x4f\x5c\x60\x76\x11\x64\xb3\x91\x29\x4b\x95\x93\xf6\xec\xd0\x82\x1b\xcb\x9c\x09\x2f\xf3\x05\x90\x9f\x35\x1e\xcd\xd2\x4c\x68\x2f\xca\xd9\x91\xa5\x2b\x13\xd0\x4c\xe5\x3b\xe6\x9a\xad\xb9\xcc\xc4\xeb\xc7\xe6\x8c\x07\x9d\xf5\x84\x91\xcb\xdb\x1f\x0e\xaf\xb7\x57\xf5\x98\xce\x68\x54\x83\x08\x0b\x02\xc6\x99\x57\xc3\x1d\xca\xfe\xcc\x17\xac\xde\x33\xbd\x59\xe2\xdf\xe7\xbf\x85\x6e\x5c\x19\xf2\x02\xff\x13\xdf\x74\xd0\xe2\x12\xa0\x94\xd7\x92\x95\x2a\x1b\xd5\x60\x3e\x34\xa1\x62\x8e\x90\x31\x8b\x47\x53\xba\xec\x0e\x0f\x7c\x39\x2f\xa8\xea\x4c\x6f\x98\x76\xa3\x4f\x55\xa2\x94\x00\x2e\xc7\x28\xef\xcd\x83\x92\xd0\xcc\xed\x3f\xf5\xd8\x09\x45\x37\x2d\xe8\xe5\xcd\xcb\xb8\x34\x05\x33\xda\x6b\x97\x44\x0d\x5a\x2b\xcd\x4a\x42\xe7\xc5\xe2\xb0\x07\xbe\xe1\x16\x44\x5d\x28\xf6\xfa\xf3\xeb\x30\xaf\x56\x60\x6a\xd6\xb8\xce\x75\x3a\x6b\xac\xa3\x77\x91\x15\x4a\x2b\x67\x51\x5e\xe0\xba\xae\x95\xb1\x73\x9b\x6f\x75\x89\x97\xe0\x40\x13\x9d\x0f\x5a\x42\xc9\xb8\x10\x6a\xe6\x7c\x74\x0c\x9a\x3e\xe9\x2f\xf0\x24\xfa\xc4\x8f\x12\x9e\x9f\x71\x8f\x9b\x67\xa3\x84\x27\x02\x8f\xdc\xd7\xfe\xaf\x02\x4b\x2e\x2b\x5a\x1a\xf5\xcb\x12\x8f\xcd\xfa\x83\xd1\x26\x0e\x45\xc6\xd6\xfd\x1f\xc3\x27\x79\x9f\xf0\x92\x8d\x09\xb2\xf2\x7f\xb6\xab\x7f\x03\x00\x00\xff\xff\x9e\x11\x57\xe9\xe7\x1b\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 7143, mode: os.FileMode(420), modTime: time.Unix(1512112719, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

