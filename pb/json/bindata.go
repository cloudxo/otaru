// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x59\x4d\x6f\xdc\x36\x10\xbd\xef\xaf\x30\xb6\x3d\x1a\x91\x13\x14\x3d\xe4\xd4\xd6\x75\x0b\x03\x01\x5a\x24\x40\x2f\x85\x41\x50\xd2\x48\xcb\x94\x22\x15\x7e\xac\xbb\x2d\xf6\xbf\x77\xc8\xd5\x5a\x1f\x96\xb4\x2b\x4a\xdb\xec\x21\x81\x4d\x72\x1e\xdf\xbc\x19\x0e\x87\xf2\xbf\xab\x9b\x9b\xb5\x7e\xa6\x79\x0e\x6a\xfd\xfe\x66\xfd\xee\xcd\xdd\xfa\xd6\x8d\x31\x91\x49\x1c\x70\xf3\xf8\x9b\x61\x86\x83\x9b\xff\xcd\x50\x65\x6f\x7e\xfc\xfd\xd1\xaf\xc2\x99\x2d\x28\xcd\xa4\x70\x73\x6f\x2b\x5b\x1c\x4d\xa4\x30\x34\x31\x2f\x00\x38\x24\x68\xd1\x40\x28\x95\xfc\x0c\xb8\xe0\xf6\x38\x6d\x15\x77\xb3\x1b\x63\x4a\xfd\x3e\x8a\x72\x66\x36\x36\x7e\x93\xc8\x22\x12\x3b\xfa\xb7\x89\xa4\x33\xab\x97\x43\x41\x99\x37\xb0\x20\xe4\x0f\x7e\x89\x36\x50\x3a\x83\xb5\x5f\xb3\xc7\xff\xf7\xde\x13\x9d\x6c\xa0\x00\x8d\x8b\xff\x3c\x90\xf3\x7b\xb8\x55\x4f\x7e\x1e\xb9\x6a\xdb\x5a\x40\xcb\x92\xb3\x84\x1a\xf4\x2b\xfa\xac\xd1\xb9\x97\xb5\x48\x3b\xb5\xc9\x99\x6b\xa9\xd9\xe8\x5a\xc2\x88\x96\x2c\xda\xbe\x8d\x62\x2e\x63\x6d\xa4\x82\x08\x37\xce\x58\xde\xd4\x28\x87\xa6\x64\x38\x20\x4b\x50\x1e\xfb\x31\x75\xce\xfe\x0a\xe6\xfe\x60\x74\x5b\xaf\x51\xa0\x4b\x74\x01\x74\xcb\x14\x27\xde\xdd\xdd\x75\x86\x70\x30\x05\x9d\x28\x56\x9a\x2a\x66\x0d\x20\x3f\xed\xc5\xa2\xaf\xcc\x70\xe6\x5b\x05\x99\xb3\xf8\x26\x4a\x21\x63\x82\x39\x04\x1d\x95\x31\x72\xfa\xe9\xe8\xd2\x81\xdc\xc7\x8a\xd0\xba\x05\xb1\x5f\xf5\xfd\xbc\x6f\x38\x62\x68\x5e\x0b\x5b\x8d\xbd\x40\x7f\x02\xb5\x65\x49\x03\xf3\x69\xd5\xc4\xaa\x70\x7a\x54\x06\x61\x14\x6b\x89\x73\x8e\xcc\x0f\x95\xd5\x55\xe9\x5c\x91\xba\x2e\x7d\x15\xb8\x13\x41\x12\x8a\x1e\x35\x45\x2e\xa5\x1e\x57\xf9\xa3\x37\xbc\xf7\x76\xd7\x23\x73\x83\x55\xa8\xce\x25\x55\x58\xeb\x0c\x16\xc6\x8e\xda\x1d\xee\xc7\x8a\x18\xcb\x74\xd7\x25\xce\xc4\xd0\x8c\x82\x2f\x96\xa1\xe8\x38\x6f\x94\x85\x65\x1d\xfe\x62\x01\xa3\x76\x86\xbf\x4f\x17\xca\xab\x8c\x71\xd0\x3b\x2c\xe5\x45\xc4\x27\x9d\xd9\x0f\x4c\x9b\x9f\x99\xba\xa2\x4c\xaa\x18\xfd\x5f\x59\xe4\xae\x9b\xfe\x2c\xc2\xa0\xaa\xb1\x34\xca\x28\xd7\xdd\x3c\x32\xbb\xd2\xa3\x6a\xac\x38\x22\x5f\x07\xe5\xc0\x2f\x18\xcb\x4f\x3e\x96\x13\x93\x80\x4b\xd7\x8e\x44\x78\xab\x42\x2e\x03\x8a\xf7\x7d\x6d\x78\x3d\xe9\xd0\xe2\xb5\x64\x09\xff\xe0\xd5\x9a\x28\x71\x75\xc6\x5a\x5d\xde\x79\xe2\x1e\x22\xfa\xe8\x0c\xaf\x47\xdc\x9a\xd4\x92\xca\xd6\xa8\x61\xea\xd6\xbd\xf1\x14\x81\xff\xa8\xac\xae\x47\xdd\x8a\xd1\xd7\x91\x76\x75\xec\xe3\x1b\x9c\xea\xae\x7a\xb4\xff\x6c\xe8\x7e\xac\x67\x32\x6e\x3f\x3b\xb0\xa1\xc7\x00\x18\xd6\x91\x76\x1d\xd3\xe4\x2f\x10\x29\x61\x45\xc9\x49\x55\x62\x5b\xca\x0f\x15\xc8\xa6\xe3\x47\x90\x8c\x1f\x14\x98\x0c\xe0\x9b\xaa\x79\x1c\x0e\x10\xd3\x18\xf4\xe6\xf6\x50\x05\x9b\x21\x72\x55\xe0\x77\x43\xc4\xa8\x52\xb4\x7d\x71\xad\x19\x66\x4d\xd7\x91\xb1\x3b\xd8\xd7\xc6\xfb\xe3\x3e\xfd\xa9\x3a\xec\x6e\xb7\xe1\x9e\xe1\xab\x7b\x86\x5c\xd0\xd1\xd7\x64\x1f\xfc\x86\x33\x3d\x7e\xe8\xb0\x9e\x7e\x8e\xf0\x68\x12\xdf\x9a\x04\xe4\xae\x36\x18\xb8\xa0\x83\xe7\x76\xe5\x20\x4e\xd8\xb6\x04\xcf\xa4\x2a\xa8\x2b\xce\xd8\x35\x99\xef\xbf\xeb\x07\xde\x52\xce\xd2\x8b\x20\xeb\x9d\x48\x48\x22\xad\x30\x8b\x43\x73\xaa\x0d\xb1\xda\xf7\x7a\x17\x40\x7e\x56\xec\x64\x94\x02\xa1\x9d\x28\x8b\x23\x0b\x5b\xc4\xa0\x88\xcc\x0e\xcc\x15\xd9\x50\x91\xf2\xd7\x77\xeb\x82\x1b\x2d\xba\xc3\xc0\xe1\xed\x3e\x37\xae\xb7\x56\x75\x98\x06\x14\xaa\x5e\x84\x19\x0e\xb3\xc0\xa3\x61\xc7\xa2\x1f\x78\x61\x57\x6b\xa6\x17\x4b\xf6\xcf\xf2\xa7\xd0\x0e\x2b\x83\x56\xe0\x3e\x1a\x4f\x07\xcd\x2f\x01\x8a\x71\x2d\x48\x21\xd3\x41\x0d\xc2\xa1\x11\x95\x65\x0c\x52\x62\xd8\xc9\x90\xce\x3c\xc3\xed\x76\xe5\x82\xad\xd5\x58\x26\x71\xd8\x02\x5f\x48\xc6\x01\x47\x7b\x3e\x3a\xcd\x70\x36\x55\x3b\xa2\xec\xe0\x9d\x1c\x4b\xc9\x81\x8a\x21\xca\xc7\xe9\x5e\x2d\xf0\x2d\xe5\xbe\x92\x90\x33\x4e\xd7\x34\xa7\xe7\x57\x69\x6d\x93\x04\xf4\xe0\xa5\x32\xc7\x6b\x50\x4a\x2a\x52\x20\x3a\xcd\x67\xbb\xdd\xf3\x36\x9f\xe1\x75\x2e\xc9\xeb\x67\xf5\x38\xaf\x86\x63\x32\xe8\x19\x46\x55\x12\xd4\xbf\x62\x03\x40\xf0\x10\x4a\x6b\x98\xb8\x40\x5d\xda\x48\x6d\x42\x6f\x99\xf2\x12\x57\xde\xc8\x6d\x11\x0e\x5a\x40\x41\x28\xe7\x32\xb0\x11\x3c\x05\xad\x77\x81\x6d\xd9\xe8\xdd\xef\x02\x3f\x48\x38\x3c\xe2\x0e\x37\x4b\x07\x09\x2f\x53\x9b\xbb\x5f\x7b\xe6\x1c\x56\x66\xf0\x4d\x53\x14\xec\xd4\xa3\xa6\xd7\xdb\xd8\x32\x9e\x92\x4d\xf7\xef\x48\x93\xac\xcf\xb8\xb2\x87\x04\x59\xb9\x7f\xfb\xd5\x7f\x01\x00\x00\xff\xff\x2b\x81\x76\xbe\x22\x1f\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 7970, mode: os.FileMode(420), modTime: time.Unix(1512198615, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

