// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\xdd\x6f\xdb\x36\x10\x7f\xf7\x5f\x11\x78\x7b\x0c\xaa\xb4\x18\xf6\xd0\xa7\xad\x69\x36\x04\x08\xf6\xd1\x00\x7b\x19\x02\x81\x92\x4e\x32\x5b\x8a\x54\x49\x2a\xad\x57\xf8\x7f\xdf\x91\x96\xad\x6f\xdb\xa2\xa4\x54\x0f\x6d\x1c\x91\xf7\xd3\xdd\x8f\xf7\xc5\x73\xbe\xad\xae\xae\xd6\xea\x0b\x49\x12\x90\xeb\xb7\x57\xeb\x37\xaf\x6e\xd6\xd7\xe6\x19\xe5\xb1\xc0\x07\x66\x1d\x7f\xd3\x54\x33\x30\xeb\x7f\x6a\x22\xf3\xab\x5f\xff\xba\xb7\xbb\x70\xe5\x19\xa4\xa2\x82\x9b\xb5\xd7\x85\x2c\x3e\x0d\x05\xd7\x24\xd4\x47\x00\x7c\xc4\x49\x5a\x41\xc8\xa4\xf8\x08\xb8\xe1\xfa\xb0\x9c\x4b\x66\x56\x37\x5a\x67\xea\xad\xe7\x25\x54\x6f\xf2\xe0\x55\x28\x52\x8f\x6f\xc9\x57\xed\x09\x23\x56\x6e\x87\x94\x50\x2b\x90\x03\x17\xbf\xd8\x2d\x4a\x43\x66\x04\xd6\x76\xcf\x0e\xff\xdf\x59\x4b\x54\xb8\x81\x14\x14\x6e\xfe\x77\xaf\x9c\x7d\x87\xd9\xf5\x64\xd7\x51\x57\x95\xd7\x36\x90\x2c\x63\x34\x24\x1a\xed\xf2\x3e\x2a\x34\xee\xb8\x17\xd5\x8e\xf2\xf0\xc2\xbd\x44\x6f\x54\x49\xa1\x47\x32\xea\x3d\xbf\xf6\x02\x26\x02\xa5\x85\x04\x0f\x5f\x1c\xd3\xa4\xca\x51\x02\x55\xca\xf0\x81\xc8\x40\x5a\xec\xfb\xc8\x18\xfb\x3b\xe8\xdb\xbd\xd0\x75\xb9\x47\x82\xca\xd0\x04\x50\x35\x51\x5c\x78\x73\x73\xd3\x78\x84\x0f\x23\x50\xa1\xa4\x99\x2e\xce\xac\x02\x64\x97\x2d\x59\xa4\x25\x86\x2b\x3f\x4a\x88\x8d\xc4\x0f\x5e\x04\x31\xe5\xd4\x20\x28\x2f\x0b\x50\xa7\x77\x07\x93\xf6\xca\x7d\x28\x14\x5a\xd7\x20\x76\xab\xae\xcf\xbb\x8a\x21\x9a\x24\x25\xb1\xc5\xb3\x23\xf4\x23\xc8\x67\x1a\x56\x30\x9f\x56\x55\xac\x02\xa7\x83\x65\xe0\x5a\xd2\x1a\x39\x97\xd0\x7c\x57\x48\x2d\x8a\xe7\x42\xa9\x65\xf1\x2b\xc1\x44\x84\x1f\x12\xb4\xa8\x4a\x72\x26\xd4\x69\x96\x3f\x58\xc1\x5b\x2b\xb7\x1c\x9a\x2b\x5a\xb9\xf2\x9c\x11\x89\xb9\x4e\x63\x62\x6c\xb0\xdd\xd0\xfd\x90\x11\x03\x11\x6d\x9b\x8a\x53\xde\xb7\x22\xe1\x73\x4e\x91\x74\x5c\xd7\x32\x87\x69\x0d\xfe\x9c\x03\x9e\xda\x05\xf6\x3e\xcd\xe4\x57\x31\x65\xa0\xb6\x98\xca\x53\x8f\x0d\x8a\xd9\x07\xaa\xf4\x7b\x2a\x17\xe4\x49\x85\x46\x2f\xe5\x45\xa6\xdc\x74\x7b\x11\x1e\xaa\x3c\xe5\x46\x31\x61\xaa\xe9\x47\x7a\x9b\x59\x54\x85\x19\x87\x27\x6b\x27\x1f\xf8\x0d\xcf\xf2\xd1\x9e\xe5\x40\x27\xa0\x5c\x44\x10\x05\x9e\xd2\x44\x0f\x4d\xdc\xf7\x7f\xa0\xec\xfb\x77\x8f\x56\x74\x39\xce\xd0\xd0\x6c\xca\x14\x7e\xc0\x1d\xc6\x31\x13\xa6\xe5\xf3\xb0\x73\x81\x44\x38\x14\xc8\xdb\x52\x70\x51\x2c\x97\x7a\x4d\xc9\xf1\x83\x65\x6b\x14\xc5\x5b\xef\xdb\xe1\xd3\x6e\x50\x9d\x7c\x3c\x1a\xb5\x5d\x10\xd5\x15\xad\x5e\x2a\xc3\x85\x6d\x16\xec\xfa\x3e\xcb\x75\xe5\xbf\xd3\xb5\xf2\x44\x8e\xbb\x5e\x4a\xd5\x3e\xe8\x48\x39\xda\x0e\xb2\x01\x8b\x1b\x62\x21\x53\xa2\x8b\x2d\x3f\xff\x34\x45\xed\x1e\xe3\xec\xf8\x63\x50\x26\xf9\xdb\xd4\xa6\x07\x23\xb4\x1c\xd7\x3e\xea\xf4\x52\x8e\x9d\x52\xee\xd3\x68\xb6\xe2\xdd\x58\x2d\x3d\x26\x6f\xb9\xcc\x25\x8e\x7f\x3a\x0c\xc7\xe8\x4b\xa4\x24\x6d\x58\xec\x1f\x9a\x8e\xd0\x65\xe5\xf7\x72\xfc\xa2\x5b\xad\xcd\x4b\x2e\x2b\xa1\xfb\xde\xe8\xde\x08\x2e\xc7\xf9\x4b\xa5\xa6\xac\x9f\x25\xaa\x1b\xbb\xe5\x94\x69\x08\xc1\xff\x14\x52\xcb\x61\xb7\xd0\xe8\xfb\x50\xbb\x3a\x4c\xc4\x2a\x3a\x95\xf3\xa9\x93\x93\x9c\x0a\xef\x87\xb0\x13\x41\x7d\x80\x97\x49\x73\x00\x9a\x36\xa8\x5d\x07\x24\xfc\x04\x3c\xf2\x69\x9a\x31\xbf\xc8\x21\x35\xe6\xfb\xe2\xb8\x6a\xf8\x01\x24\x66\x24\x69\x1d\xdd\x25\x00\x76\x3c\x31\x4e\x87\x3d\xc4\x30\x0d\x3a\x7d\xbb\xaf\x4f\x1d\x41\xf2\x31\x27\xf7\x28\xd6\xce\xac\x3d\x79\xb5\xff\x36\x6b\x73\xe3\xb1\x11\xed\x76\xd5\x7e\x73\x9b\xa3\xab\x11\xb6\x9a\x81\xde\x8c\x86\xb6\x95\xbd\xb3\x2f\x1c\x69\xf1\x5d\x43\xeb\xe1\x71\x84\xa1\xe9\xdb\x26\xd7\xc1\x77\xcd\x4d\xda\x2d\xf0\xcc\x5b\x19\xf0\x33\xb2\x35\xc2\x7b\x5b\xd2\x2a\xf0\x33\x61\x34\x9a\x05\x59\x6d\x79\xe8\x87\x22\xe7\x7a\x72\x68\x46\x94\xf6\x73\x65\x1b\x99\x19\x90\xbf\x48\x7a\xf6\x94\x1c\xa1\x0d\x29\x93\x23\xf3\x3c\x0d\x40\xfa\x22\xde\x6b\x2e\xfd\x0d\xe1\x11\x6b\xd7\xd6\x09\x5f\x34\xe9\x1b\xfa\x83\xb7\x73\x56\x33\x22\x78\xe7\x3b\x03\x8b\xac\xbf\xce\x83\x4b\x1d\x1d\xbd\x79\xb1\xa8\x05\x7e\xab\x95\x9b\x08\x78\xcf\x04\xc5\x46\xc1\x31\xf0\x4f\x81\x97\x1e\x68\x66\x93\x3e\x13\xe1\xa7\x5e\x27\xec\xba\xab\x0f\xf7\xc2\xe6\xf8\x78\xb9\x15\xb3\xa1\xa9\x43\xb9\xec\x44\x18\x61\xf0\x1c\x7e\xeb\xda\x36\x16\x7b\x86\x97\x6c\xfa\xdf\xf4\xb5\x20\xef\x67\x66\xa0\xd7\x56\x40\x93\x39\x40\xf1\x5c\x53\x3f\xc5\x58\x9b\x1e\x1a\x51\x69\x4c\x21\xc2\x64\x71\xf6\x48\x47\xc6\x70\xbd\x69\x9e\xb1\xc1\x3f\xe5\x49\x0c\x9e\x81\xcd\x9b\xac\xda\x23\xb3\xe5\xa6\xab\x96\xae\x0e\x09\xab\x07\x63\x61\x29\x8b\x89\xc4\x29\x63\x4d\x16\x16\x35\x5d\xf6\x7f\x24\xe3\x76\xf3\x1e\xe8\xfc\x3d\xa7\xd6\xf1\x55\xf7\x88\x13\x8b\xe4\xd6\x97\x79\xaf\x41\x81\x10\x0c\x08\xef\xa3\xea\xb0\xdc\x69\x70\x04\xca\x8c\x4b\xfd\x0b\x6a\xc0\x30\xa3\xc7\x07\xa7\xca\xc3\x10\x54\x6f\xef\x33\xc6\x6a\x90\x52\x48\x3f\x45\x74\x92\x8c\x36\xbb\xeb\xfb\xa9\x7e\xb3\x9b\xc2\xed\x21\xe8\x08\xca\x12\xe1\x5f\xd6\xf4\x76\xb2\x22\x9c\xe6\x5d\x44\x86\x4e\x83\x02\xec\x73\x7d\xe4\x4c\xe4\x9a\xf2\x19\x4a\xef\x46\x28\xed\xda\x48\x65\x73\xa4\xc8\x13\x0d\x91\x3b\x68\x0a\xa9\x4f\x18\x66\xbc\x79\xa0\xd5\xd6\xf1\xfe\x7b\xe6\x82\xe3\x27\xbd\x0a\xbb\x9f\xb8\xc1\x8d\xa3\x99\xef\x4a\xcd\xb1\xfa\x98\x60\xa5\xda\x0f\x45\x9a\xd2\x73\x97\xc8\x4e\x6b\x83\x9c\xb2\xc8\xdf\x34\xbf\xd2\x1f\x24\x7d\x41\xf9\xed\x23\x64\x65\xfe\xed\x56\xff\x07\x00\x00\xff\xff\x5d\x2d\x94\xfe\xd5\x2b\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 11221, mode: os.FileMode(420), modTime: time.Unix(1512254410, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

