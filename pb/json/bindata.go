// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x10\xbc\x3d\x6c\x40\x50\xa5\xc5\xb0\x87\x02\x05\xb6\xa6\xed\x10\x20\xd8\xba\x06\xe8\x1e\x86\x82\xa0\xa5\x93\xcc\x96\x12\x55\x92\x4a\xea\x35\xfe\xee\x23\x69\xd9\xd6\x3f\xca\xfa\x6b\x0b\x5b\x1f\xb6\xc6\x22\xef\xfc\xbb\x1f\x8f\xc7\xbb\x13\xfd\xf5\xc2\x71\x16\xe2\x01\x87\x21\xf0\xc5\x73\x67\xf1\xec\xc9\xd5\xe2\x52\x3f\x23\x71\xc0\xd4\x03\x3d\xae\x3e\x49\x22\x29\xe8\xf1\x3f\x24\xe6\xa9\xf3\xeb\xdb\x1b\x33\x4b\x8d\xdc\x03\x17\x84\xc5\x7a\xec\x69\x26\xab\x9e\x7a\x2c\x96\xd8\x93\x7b\x05\xea\x51\x8c\xa3\x9c\x86\x84\xb3\x8f\xa0\x26\x5c\xee\x86\x53\x4e\xf5\xe8\x4a\xca\x44\x3c\x77\xdd\x90\xc8\x55\xba\x7c\xe2\xb1\xc8\x8d\xd7\xf8\x8b\x74\x99\x16\x3b\x4c\x87\x08\x13\x23\x90\x42\xcc\x7e\x31\x53\x84\x84\x44\x0b\x2c\xcc\x9c\x8d\xfa\xff\xc6\x58\x22\xbc\x15\x44\x20\xd4\xe4\xbf\xb7\xe0\xcc\x77\xe8\x59\x1f\xcc\xb8\xc2\x2a\xd2\xc2\x04\x9c\x24\x94\x78\x58\x2a\xbb\xdc\x8f\x42\x19\xb7\x9f\xab\x60\xfb\xa9\xd7\x72\x2e\x96\x2b\x71\xa0\xd0\xc5\x09\x71\xef\x9f\xba\x4b\xca\x96\x42\x32\x0e\xae\xfa\xe2\x80\x84\x79\x8e\x42\xc8\x53\xa6\x1e\xb0\x04\xb8\xd1\x7d\xe3\x6b\x63\x7f\x03\x79\xbd\x15\xba\x3c\xcc\xe1\x20\x12\x65\x02\x88\x82\xa8\x1a\x78\x76\x75\x55\x7a\xa4\x1e\xfa\x20\x3c\x4e\x12\x99\xad\x59\x4e\x91\x19\x36\x64\xe1\x8a\x98\x1a\xf9\x9e\x43\xa0\x25\xbe\x73\x7d\x08\x48\x4c\xb4\x06\xe1\x26\x4b\x85\xe9\xe5\xce\xa4\x2d\xb8\x77\x19\xa0\x45\x41\xc5\xe6\xa2\xee\xef\x4d\xce\x10\x89\xc3\x03\xb1\xd9\xb3\xbd\xea\x3b\xe0\xf7\xc4\xcb\xe9\xfc\x70\x91\xd7\x95\xe9\xa9\x61\x19\x62\xc9\x49\x81\x9c\x36\x34\xbf\xce\xa4\x66\xc5\x73\x06\x6a\x5e\xfc\x72\xd0\x3b\x02\x79\x58\x59\x94\x27\x39\x61\xa2\x99\xe5\x77\x46\xf0\xda\xc8\xcd\x87\xe6\x1c\xaa\xbe\x3c\x27\x98\xab\x58\x27\x55\x60\x2c\xb1\x5d\xc2\xbe\x8b\x88\x4b\xe6\xaf\xcb\xc0\x49\x6c\x1b\xe1\xf0\x39\x25\x8a\x74\x35\x2e\x79\x0a\xe3\x1a\xfc\x39\x05\xb5\x6a\x2d\xec\xfd\x30\x91\x5f\x05\x84\x82\x58\xab\x50\x1e\x99\x3f\x3b\x39\xd4\x35\x07\x2c\xe1\x8d\x16\x9b\x8f\x3f\x1d\x40\xfd\x3f\xdc\x29\x6f\xef\x68\xde\xa4\xd5\xdd\x19\xaf\x18\xe6\x4e\xee\x57\xe2\x6f\xba\x9c\x04\xef\x00\xfb\x33\x73\xa8\x1d\xa4\x53\xb9\x13\xf1\xeb\x9d\x49\xa7\x37\xdd\x9c\x49\xae\x13\xa3\x51\xa8\x53\x2c\x0e\xcb\xb2\x01\xe3\x11\x96\x26\xa5\x23\xb1\xfc\xf9\xa7\xbc\x5d\x9b\xcb\xe3\x38\x59\x10\x08\x90\xf5\x58\x95\x23\xf2\x26\xcf\x0f\x30\x15\xa7\x45\x4b\x21\x0e\xab\xfc\x0d\x47\xab\xc0\x80\x4e\xe5\xad\x70\xab\x68\x47\xdd\x85\xfb\x04\x3d\x49\x9b\x77\xd6\x5f\x9c\xcc\x2e\x56\xef\x31\x7d\xdb\x5b\x45\x9c\xe7\x3d\x52\x72\xcb\x32\xb3\x13\x25\xf6\x7f\x67\x3e\x74\x39\x50\xde\x64\x32\x6f\x52\x4a\xdf\x16\x57\xf9\xdc\xde\x5f\x86\x76\xaa\x4d\x50\xe7\xec\xa3\x85\xed\xb3\x39\x07\xed\x54\x71\xde\x12\x21\x5f\x11\x3e\x23\x6f\xc8\x10\x9d\x2f\x12\x96\x2c\xba\x09\x9c\x47\x75\x68\xfe\x40\xfc\x1f\x1f\x9d\x17\x2f\x9c\xab\x4b\x47\xae\x20\x76\x8c\x8f\x38\xda\x87\x9e\x8c\xef\x44\x98\x73\x5c\x0d\x7c\x6a\x79\xcb\x8b\x52\x90\xaa\x8d\xc1\x47\xa2\x70\x89\xd3\x16\x31\xf9\x3f\xb4\x6d\x48\xac\xc2\x8e\xbf\x74\x85\xc4\xb2\x6b\xa3\xe6\x46\x87\xac\x57\x2f\xef\x8c\xe8\x7c\xb6\x4f\x09\xd9\x98\x2d\x9b\x9d\xde\x6e\x1c\x53\xa6\x5b\xbc\xae\xa7\x8a\xb3\x90\xf5\x68\x88\x5d\x1f\x04\x67\xc5\xf2\x01\xd7\x98\x1c\xdf\x1a\xb6\x06\x51\xbc\x76\xbf\xee\xfe\xda\x74\x6a\x63\xdc\xed\x8d\x5a\xcf\x88\xea\x1c\xaa\x53\x9d\x09\x5e\x95\x05\x33\x3e\x52\x8e\x3c\xcb\x1c\xb8\xb9\x8e\x6b\xae\xe4\xfa\xe6\xc2\x43\x9c\x9d\xaa\x35\x12\x12\xa9\x4f\x48\x37\xda\xd7\x88\xf8\x1d\x03\xcb\xad\xd1\xa0\x30\xe8\xee\xf6\xfa\xc6\x9f\x91\xcf\xd7\xa0\x9b\x4b\x90\x51\xff\x74\x8a\xe0\x7f\xea\x9c\xe0\x56\x0b\xcd\x87\xde\x3d\xa6\x53\x05\x94\x88\xc4\xc8\x56\x72\x9f\xb8\xe9\xd2\x22\xe0\x34\x87\xbf\xb3\xa5\xb5\x83\x92\x56\x4a\x22\x32\x41\x8f\x6e\xca\xae\x57\xaf\x5d\x9a\x15\x81\x85\x97\xe8\xed\xc2\xe1\x36\x81\xbe\xd1\x82\xf3\xd9\xa9\x07\x50\x63\xc6\xbf\x83\xd6\x7e\xec\x1e\xae\x1e\x74\x21\xf8\x7d\x26\x35\x1f\x76\x33\x44\xe7\xa1\xf6\x62\x77\x4d\x22\x87\x69\x0f\x7e\x51\xea\x02\xe8\x8f\x3a\x06\xe4\x18\xdf\x6d\x41\xb6\x2c\xde\xe7\x48\xb8\xa6\x5e\x92\x12\xa9\x0b\x9f\xf0\x62\x8e\x50\xd0\x52\x53\x3a\x37\x94\xcd\x79\x16\x4c\xf6\x61\x53\x5b\x0d\x78\x96\x70\x67\x5d\x23\x53\x74\xbd\x27\xf0\x50\x1f\x44\x36\xb5\xfe\x5a\xf7\x36\xec\xbc\xd4\x15\x46\x6b\x3a\x2c\xdb\xaf\x28\x34\x58\xa4\x36\xc1\x79\xd4\x11\xfc\xd1\xc1\xc2\x09\x52\x4a\xb7\xed\x96\xda\x75\xc8\x22\x7d\x13\xc4\x5a\xb9\xd4\x6e\x59\x5d\x74\xb7\xc7\xf6\xbc\xd2\x70\x0a\xa5\x6a\x6d\x22\x14\x15\xfb\xbe\x23\xa9\x56\x5a\x49\x40\xc0\x47\x92\x1c\x65\xb1\xa5\xf6\x16\x8e\x99\x85\x9d\x01\x9e\x39\xc5\x86\x26\x02\xc5\xf0\x80\x4a\xb7\x00\x0a\xca\x97\x8c\x51\xc0\xb1\x4d\xfb\x6e\xf8\x28\x19\xd6\xce\xf7\x1c\x28\xb1\x60\x6e\xb8\x76\x35\x00\xf5\x12\x7b\x9f\x20\xf6\x11\x89\x12\x8a\xfa\x6e\xe5\x9d\x92\x80\xe2\xb0\x72\xa4\xb6\x51\x60\xee\x12\x0d\xc3\xb0\x55\xd1\x0d\x81\x9d\xe9\x9a\x26\xd3\x00\x92\xf7\x89\xfd\x64\xa7\xd5\x36\x67\xdd\x77\x91\x3a\x1d\x59\x35\xf7\xcc\x06\xd8\x3a\xf1\xb1\x5c\x05\x6b\xea\xf4\xa1\x16\xbf\x2e\xa1\xee\xbe\x8f\xd4\xd6\x44\xa6\x43\xd5\xc3\x77\x75\x1b\xbc\xdf\xc6\xd3\xdf\x4a\x21\x1e\xe7\xe4\xc8\x29\xbe\xc7\x94\xf8\x93\x68\x16\xeb\xd8\x43\x1e\x4b\x63\x39\xba\x6a\x8a\x85\x44\xa9\x80\x9e\x81\xf8\x98\xe6\x07\xfd\x56\x7a\x1a\xd5\x9a\x94\xd1\x35\xc7\x69\xb4\x04\x8e\x58\xb0\x45\xce\xd1\x0a\xc7\x3e\xad\xd6\x3c\x23\x7e\xd1\xa8\xdf\x60\xdf\xbc\xb5\x2f\x5a\x06\x6c\xde\xe9\xd6\xc0\x68\x96\x5f\xa6\xd1\x3b\x45\x12\x56\x2d\xb1\x47\x52\xbc\x65\x82\xa8\x44\xa1\xe7\xc6\x6f\x52\x7e\xf0\x40\xfd\x62\x11\x51\xe6\x7d\xb2\x3a\x61\xc7\x64\xdd\xee\x85\xd6\x4e\xf1\x24\x49\xe4\x38\xb0\x0f\x55\xed\x1c\x32\xdd\x11\xaa\xc8\x6c\x4e\xf7\x23\x97\xfc\x33\x7e\x2c\xff\x56\xd2\x9e\xb4\xa4\x2d\xdf\x58\x19\x72\x02\x54\xfa\x5c\x05\x35\x43\xf3\x56\x4b\x57\xad\x53\xd2\x5a\x4a\xf1\x27\x2c\x47\x9a\xf6\x0d\x85\x7b\xa0\xd3\xc6\xa8\xea\x5b\xa2\xf9\x96\x23\x15\xac\x3d\xaa\x11\x8b\x8e\x39\x9c\x22\xf9\x85\x67\xd6\xdd\xd1\x5c\x96\xcf\xc3\xd7\xf2\x47\xc6\x68\x71\xa9\x40\xcf\xf6\x27\x81\xad\xed\xb4\x38\x43\xe5\xb2\xff\x90\x9a\x54\x5f\x53\xe8\x65\xe8\x72\x2d\xa1\x0d\xd6\xca\x0f\x89\x86\x34\xbb\xf9\x1a\xf1\xd4\x4a\x60\xe7\xd6\x5f\x6e\x71\x7c\x10\xfa\x9d\x22\x6a\x71\xe8\x77\x33\x7a\xf8\x1a\x89\xd4\xf3\x40\x58\x93\xd5\x21\x56\x03\xe7\x8c\xa3\x48\x69\xc7\xe1\x60\xb3\xeb\x6e\x03\xd9\xcd\x2e\x0b\x57\xdf\x26\x0e\xa0\x2c\x64\xa8\x5d\x95\x52\xcb\x0a\xeb\xd5\xa0\xc4\xdc\xeb\xd5\xd9\x51\x85\x09\x52\x9c\xb1\x54\x9d\xf7\x13\xe4\x5a\x2b\x26\x64\xdf\xcc\x39\x99\x22\x8d\x6f\xc8\x80\xfb\x2b\x8d\x20\x42\x98\xaa\x08\x3b\x8d\x6a\xb1\xee\xd9\xb0\x38\x52\x91\xa2\xd0\x0a\xb8\xff\x8a\x6b\xbd\x81\x3f\x71\x71\x5b\x7e\x3f\x3d\x64\xb3\x12\x89\x3c\x16\xe9\x4b\x20\x7d\xfa\x9b\x29\xa1\x3e\x5a\x95\x2f\x50\x76\x92\x6e\x71\xdc\x1f\x25\xa4\xf2\x83\x94\x99\x55\xcf\xd9\x4f\xe1\x46\xd7\x3b\x75\x06\x51\xfd\xfd\xd5\xb1\x33\xe5\x42\xff\xb7\xb9\xf8\x37\x00\x00\xff\xff\xff\xf3\xea\xb4\xc6\x42\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 17094, mode: os.FileMode(420), modTime: time.Unix(1517190155, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

