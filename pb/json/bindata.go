// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x4b\x8f\xdb\x36\x10\xbe\xfb\x57\x18\x6e\x8f\x46\xb4\x09\x8a\x1e\x02\x04\x68\xb3\x49\x0b\x03\x8b\x3e\xb2\x40\x7b\x28\x02\x82\x96\x28\x99\x09\x25\x2a\x24\xb5\x1b\x75\xd7\xff\xbd\x43\x5a\xb6\xde\xb6\x9e\x2e\x81\xf6\xd0\xc6\x2b\x72\x3e\xcd\x7c\x1c\x0e\x67\x86\x7a\x5a\x2c\x97\x2b\xf9\x88\x83\x80\x88\xd5\xeb\xe5\xea\xd5\x8b\x9b\xd5\x5a\x3f\xa3\x91\xcf\xe1\x81\x1e\x87\xbf\x14\x55\x8c\xe8\xf1\x5f\x15\x16\xc9\xf2\xc7\xdf\x36\x66\x16\x8c\x3c\x10\x21\x29\x8f\xf4\xd8\xcb\x4c\x16\x9e\xba\x3c\x52\xd8\x55\x27\x00\x78\x14\xe1\xb0\x80\x10\x0b\xfe\x89\xc0\x84\xf5\x71\x38\x11\x4c\x8f\xee\x94\x8a\xe5\x6b\xc7\x09\xa8\xda\x25\xdb\x17\x2e\x0f\x9d\x28\xc5\x5f\x95\xc3\xb5\x58\x3e\x9d\x84\x98\x1a\x81\x84\x44\xfc\x07\x33\x45\x2a\x12\x6b\x81\x95\x99\xb3\x87\xff\xef\x8d\x25\xd2\xdd\x91\x90\x48\x98\xfc\xd7\x41\x39\xf3\x0e\x3d\xeb\xa3\x19\x07\x5d\x65\x52\x9a\x80\xe3\x98\x51\x17\x2b\xb0\xcb\xf9\x24\xc1\xb8\xd3\x5c\x50\xdb\x4b\xdc\x8e\x73\xb1\xda\xc9\x9c\x42\x07\xc7\xd4\x79\x78\xe9\x6c\x19\xdf\x4a\xc5\x05\x71\xe0\xc5\x3e\x0d\x8a\x1c\x05\xa4\x48\x19\x3c\xe0\x31\x11\x06\x7b\xe3\x69\x63\x7f\x26\xea\xf6\x20\xb4\xce\xe7\x08\x22\x63\x30\x81\xc8\x92\x28\x0c\xbc\xba\xb9\xa9\x3c\x82\x87\x1e\x91\xae\xa0\xb1\xca\xd6\xac\x00\x64\x86\x0d\x59\xb8\x26\x06\x23\xdf\x0a\xe2\x6b\x89\x6f\x1c\x8f\xf8\x34\xa2\x1a\x41\x3a\xf1\x16\x74\x7a\x7b\x34\xe9\xa0\xdc\x87\x4c\xa1\x55\x09\x62\xbf\x68\xfa\xbd\x2f\x18\xa2\x70\x90\x13\x9b\x3d\x3b\x41\xdf\x13\xf1\x40\xdd\x02\xe6\xc7\x45\x11\x2b\xc3\x69\x60\x99\x44\x4a\xd0\x12\x39\x5d\x68\x7e\x9f\x49\x59\xc5\x73\xa6\x94\x5d\xfc\x0a\xa2\x77\x04\x72\x31\x58\x54\x24\x39\xe6\xf2\x3c\xcb\x1f\x8c\xe0\xad\x91\xb3\x87\xe6\x82\x56\x43\x79\x8e\xb1\x80\x58\xa7\x20\x30\x56\xd8\xae\xe8\x7e\x8c\x88\x5b\xee\xa5\x55\xc5\x69\xd4\x36\x22\xc8\x97\x84\x02\xe9\x30\xae\x44\x42\xa6\x35\xf8\x4b\x42\x60\xd5\x3a\xd8\xfb\x71\x26\xbf\xf2\x29\x23\x32\x85\x50\x1e\x9a\x9f\xbd\x1c\xea\x56\x10\xac\xc8\x4f\x5a\xcc\x1e\x7f\xca\x95\xfa\x6f\xb8\x53\xd1\xde\xc9\xbc\x49\xc3\xdd\x1b\xaf\x18\xe7\x4e\xce\x13\xf5\xf6\x25\x9f\x4a\xce\xbb\xd4\x9f\x82\x5a\xe7\x51\x27\x9d\xae\xe5\x50\xd4\x6b\x76\x27\x9d\xe0\xf4\x73\x27\x95\xc6\x06\x51\xc2\x39\x16\x05\x55\x59\x9f\x8b\x10\x2b\x93\xd4\xd1\x48\x7d\xff\x5d\xd1\xae\xfd\xda\x76\xc7\x2f\x2c\x8b\x55\x7e\xcf\x7a\xa5\x3e\x77\x54\xaa\x77\x54\x58\xe4\xee\x99\x46\xd7\x72\xf6\x26\xa7\x3e\x38\x11\xac\xaa\x38\xe7\x45\x3e\x66\xf2\x82\xc3\x5f\xd7\x09\x68\xc4\x3d\xe2\x6d\x1d\xa9\xb0\xea\x9b\xff\x6e\x7e\x01\xd9\x77\x6f\xef\x8d\xa8\x3d\xce\x50\xd1\x6c\xca\x4c\xf8\x88\xdb\x8f\x63\xc6\x75\xe5\xec\x40\x01\x48\x02\x3e\xa0\xce\xb8\xcd\x05\xad\x62\x39\xd7\x6b\x4a\x8e\xef\x0c\x5b\xa3\x28\x4e\x9d\xa7\xe3\xaf\x7d\xaf\xec\xf0\xfe\x64\x54\x6a\x11\xd5\x05\xad\xae\x15\xe1\xdc\x3a\x0b\x66\x7c\xa2\x43\xdd\xca\x43\xfb\xa8\x23\xe4\x15\x44\x77\xba\xd6\xd5\x09\x79\xee\x51\x4b\x3d\x86\x1e\xde\x63\x9c\x9d\xc1\x1a\x49\x85\xe0\x2f\xa4\xfb\x17\x29\xa2\x5e\xcf\xc0\x72\x67\x10\x40\x07\xdd\x34\x48\x37\x9e\x45\x3e\xdf\xa0\x9d\x2d\x41\x06\xfe\xe9\x15\xc1\x7f\xd7\x39\xc1\x9d\x16\xb2\x87\xde\x93\x4e\xd7\x0a\x28\x21\x8d\x50\x5b\x8d\x30\x26\x69\x6a\xde\xac\xe7\xb6\x6a\x97\x80\x73\x3e\xfc\x8d\xd1\x17\x0b\x81\xeb\xb0\x90\xb7\x55\x1d\xa1\x24\x55\x0f\x9b\x95\x35\xea\x60\x13\xa3\x21\x55\x56\x2c\xc0\xbc\xd1\x31\x2b\x69\x4a\x77\x13\xdd\xc2\xe1\x21\x81\xde\x68\x41\x7b\x76\x6a\xae\xd4\x94\xf1\x2f\x47\x1d\xc6\x6e\x7e\xa3\xd3\x87\xe0\x3f\x32\x29\x7b\xd8\xcd\x34\xfa\x77\xa8\x5d\x1c\x6f\x9f\x0a\x3a\x9d\x94\x5f\x35\xb5\xc9\x0a\x74\x1f\xf7\x1f\xdf\x96\xef\xc8\x62\xa1\x79\x57\xb4\xc2\xe8\xca\xa3\xa2\x9c\x20\x94\x50\x1a\x9a\x2d\xf5\x56\x4b\x69\xb4\xb2\x14\x1b\x7f\xf9\x7c\x78\xc5\xf3\xf2\xcd\x9b\xe5\xcd\x7a\xa9\x76\x24\x82\x04\x0c\x4c\x58\x3e\xeb\x18\xf4\xbc\xc4\x72\xe9\x27\x8c\xe9\xec\xf1\xc5\xaa\x91\xcf\x2c\x56\x9d\x53\xb1\x51\x2e\x69\xb7\xac\x29\x3e\xb5\x47\xa7\x22\x68\x30\x07\x28\xac\x4d\x88\x42\xa8\x22\xa7\x87\x06\x54\xea\x53\xe2\x21\x45\x2f\xb2\xd8\x11\xbd\x31\x14\x34\xf6\xab\x47\x78\xe6\x48\xaf\x6c\xe4\x82\x4a\x14\x91\x47\x54\xb9\x1e\x28\x81\x6f\x39\x67\x04\x47\x6d\xe8\xc7\xe1\x8b\x64\x9c\xb9\xdb\x1c\x41\xca\x16\xbb\x9f\x49\xe4\x21\x1a\xc6\x0c\x0d\xdd\x16\x47\x10\x9f\xe1\xa0\x16\x60\xbb\x00\x98\x0b\xbb\x71\x3a\x1c\x20\xfa\x69\xd0\xce\x74\x43\xcb\x61\x04\xc9\xa7\x34\xaf\x45\xb1\x7a\xb2\xd6\x92\xaa\xb5\x37\x26\x4d\x06\x73\xea\x29\x34\x1f\x28\xed\xe6\x56\x2f\x73\x47\xd8\x6a\x4a\xc4\xf9\x0c\xad\x2b\x6b\xaa\xb6\xb1\x16\xbf\xaf\x68\xdd\x7f\x1f\xc1\xd6\x44\xa6\x5f\x31\xc0\x77\x75\x53\x74\xd8\xc6\xd3\x6f\x65\x24\x9a\x26\x0a\x17\x80\x1f\x30\xa3\xde\x2c\xc8\x32\x8d\x5c\xe4\xf2\x24\x52\x93\x43\x33\x2c\x15\x4a\x24\x19\x18\xe7\x2f\x21\x3f\xea\x4b\x95\x79\xa0\x35\x29\x93\x23\x47\x49\xb8\x25\x02\x71\xff\xa0\xb9\x40\x3b\x1c\x79\xac\x9e\x01\x4f\xf8\xa2\x49\xdf\xd0\xbe\x79\x1b\xdb\xee\x23\x36\xef\x7c\x6b\x60\x90\xd5\xd7\x79\x70\xe7\x48\x68\xea\x05\xd7\x44\xc0\x07\x26\x28\x24\x0a\x03\x37\xfe\x39\xf0\xdc\x03\xf5\x35\x13\x62\xdc\xfd\xdc\xea\x84\x3d\x13\xdf\x76\x2f\x6c\xed\x1b\xce\x92\xa3\x4e\xa3\x76\xf5\x02\xd3\xde\x83\xbe\xa2\xe9\x80\x53\xbe\x11\xc1\xb2\xfa\x61\x68\xb6\x9b\xcd\xe9\x9f\x69\xd0\xbf\xa7\x3f\xc2\xfe\xaf\x8a\xaf\x5a\x15\x57\x72\xfd\x19\xeb\x92\x73\x9e\xc4\xc8\x03\x61\xf3\x06\xab\xfa\xe5\x81\xbd\xe1\xaa\xa6\xeb\x80\x80\xd5\x82\x61\xc3\x71\x52\x5c\x78\x1e\x0c\xf1\x17\x5b\x7c\xad\x18\x44\x27\xdb\xa9\x25\x7a\x0e\x1f\xe0\x77\xb6\xb3\xc5\x19\x1a\x3e\x85\x1d\xd3\x95\x15\x29\x12\x49\xab\x52\xbd\x7b\x54\x05\x83\x3d\x22\xf5\xf5\x0d\xea\x70\xb4\xf4\x33\x7a\xfc\x9e\x97\x89\xeb\x12\xd9\x9a\x09\x8e\xb1\x9a\x08\xc1\x05\x0a\x01\x1d\x07\xa3\xcd\x6e\xfa\xf0\xa2\xdd\xec\xaa\x70\xfd\xe2\x66\x04\x65\x01\x47\xdd\x4a\x80\x46\x56\xf8\xa0\xee\x1f\x16\xee\xa0\xb6\x09\x64\xfd\x08\x38\xe3\x89\xa2\xd1\x0c\x27\xfa\x8e\x4b\x35\x34\x3f\x8b\xe7\x48\x16\xcf\xe4\x59\xc3\x41\x43\x12\x22\xcc\x20\x6a\xcd\x03\x2d\xd3\x81\xdd\x80\x0b\xe5\x1e\x0a\x5a\x15\x1e\xbe\xe2\x1a\xd7\xf7\x66\xae\x1c\xab\x57\x81\x63\x36\x2b\x55\xc8\xe5\xa1\xbe\x6f\x1f\xd2\x3c\x4c\x28\xf3\xd0\xae\xfa\xad\x5a\x2f\xe9\x0e\x47\xe8\x45\x42\x6a\x1f\x2b\x5b\x56\xa3\x71\xdf\x97\x73\x34\x2d\xcc\x37\x65\x83\x50\xb7\xa9\x22\xbd\x78\xed\x78\xa6\x2c\xf4\x7f\xfb\xc5\x3f\x01\x00\x00\xff\xff\x27\xf0\x1e\x7b\x88\x39\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 14728, mode: os.FileMode(420), modTime: time.Unix(1516032208, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

