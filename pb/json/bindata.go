// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6b\xdc\x3a\x16\x7f\xcf\x5f\x21\xbc\xfb\xb0\x0b\xa1\x4e\xcb\xb2\x0f\x81\xc2\xb6\xe9\x07\x81\xb0\xdb\x6d\xa0\xf7\xe1\x52\x8c\xc6\x3a\xf6\xa8\x95\x25\x57\x3a\x4e\x3a\xb7\x99\xff\xfd\x22\x8f\x67\xfc\x3d\x1e\x7f\x25\xe6\xb6\x0f\x85\x74\xec\x73\xfc\xd3\x4f\xe7\xdb\xf2\x8f\x33\x42\x1c\x73\x4f\xc3\x10\xb4\x73\x49\x9c\x17\xcf\x2e\x9c\x73\xfb\x1b\x97\x81\x72\x2e\x89\xbd\x4e\x88\x83\x1c\x05\xd8\xeb\xff\x43\xaa\x13\xf2\xea\xc3\x75\x7a\x17\x21\xce\x1d\x68\xc3\x95\xb4\xd7\x9e\x67\xb2\x84\x38\xbe\x92\x48\x7d\x3c\x28\x20\xc4\x91\x34\x2a\x68\x88\xb5\xfa\x02\x3e\x66\xf7\x13\xe2\x24\x5a\xd8\xab\x6b\xc4\xd8\x5c\xba\x6e\xc8\x71\x9d\xac\x9e\xf9\x2a\x72\xe5\x86\x7e\x47\x57\x59\xb1\xfc\x76\x88\x28\x4f\x05\x12\x90\xea\x3f\xe9\x2d\x06\x21\xb6\x02\x4e\x7a\xcf\xf6\x8c\x90\x6d\xba\x12\xe3\xaf\x21\x02\xe3\x5c\x92\xdf\x77\xe0\xd2\x67\xd8\xbb\x3e\xa7\xd7\x7d\x25\x4d\x52\xba\x81\xc6\xb1\xe0\x3e\x45\xae\xa4\xfb\xc5\x28\x99\xdf\x1b\x6b\xc5\x12\xff\xc4\x7b\x29\xae\x4d\x4e\xa1\x4b\x63\xee\xde\x3d\x77\x57\x42\xad\x0c\x2a\x0d\xae\xaf\x64\xc0\xc3\x22\x47\x21\x14\x29\x23\xc4\x51\x31\xe8\x54\xf7\x35\xb3\x8b\x7d\x0f\x78\xb5\x13\x3a\xcf\xef\xd1\x60\x62\x25\x0d\x98\x92\x28\x21\xce\x8b\x8b\x8b\xca\x4f\x84\x38\x0c\x8c\xaf\x79\x8c\xd9\x9e\x15\x14\xa5\x97\x53\xb2\x68\x4d\x8c\x10\xe7\xef\x1a\x02\x2b\xf1\x37\x97\x41\xc0\x25\xb7\x1a\x8c\x1b\xaf\xde\x03\xbe\xde\x2f\x69\x07\xee\x63\x06\xc8\x29\xa9\xd8\x9e\x35\xfd\xbd\x2d\x2c\x04\x69\x98\x13\x9b\xfd\x76\x50\x7d\x0b\xfa\x8e\xfb\x05\x9d\x9f\xcf\x8a\xba\x32\x3d\x0d\x2c\x83\x44\xcd\x4b\xe4\x9c\x42\xf3\xdb\x4c\x6a\x51\x3c\x67\xa0\x96\xc5\xaf\x06\xeb\x11\x9e\x4f\xfd\x35\x14\x49\x8e\x95\x39\xce\xf2\xc7\x54\xf0\x2a\x95\x5b\x0e\xcd\x05\x54\x43\x79\x8e\xa9\xa6\x11\x20\xe8\x2a\xdb\x15\xec\xfb\x88\xb8\x52\x6c\x53\x05\xce\x65\xdb\x15\x0d\xdf\x12\xae\xc1\x52\x88\x3a\x81\x69\x17\xfc\x2d\x01\x83\xa7\xac\xf7\xf3\x4c\x76\x15\x70\x01\x66\x63\x10\x22\x97\x22\x6a\xf7\x07\x67\xdb\x3e\xae\xfb\x0a\x51\x2f\xc8\x9a\x2c\x9c\xc7\x32\x23\xce\x9a\x8d\xc8\xe6\xa1\x7e\x46\x84\x9b\x38\xd5\x68\x50\x73\x19\x56\x65\x03\xa5\x23\x8a\x69\xee\xe5\x12\xff\xfd\xaf\xe2\xba\xb6\xe7\xdd\x38\x9b\xf0\xec\x90\x7e\x4b\x40\x1f\xb3\xf7\x80\x0a\xd3\x81\x75\x90\xb1\xbe\xe3\x02\x6e\x53\xa3\x1b\x6e\xad\xf6\xcf\x5e\xe1\xef\x4a\x03\x45\xb0\x8f\x5e\x90\xbd\xe6\xa0\x7e\x8e\xe0\x57\x5c\xef\x64\xb1\x6f\x2a\x73\xea\x1d\xfc\x3e\x02\x65\x0b\x33\xa8\x3d\xa4\x5f\x41\xb0\x8c\x53\x05\x81\x01\x9c\x2d\x0c\x4e\x8c\x56\x80\x0c\xe7\x08\xda\x5c\x22\xd8\xc6\xb3\x15\x6e\x1d\xed\xa4\x5e\x78\x68\x27\xe3\xe4\xb8\x67\xfd\xa6\xf9\xe2\x62\xf5\x01\xd3\x2f\xdf\x2a\xe3\x7c\xda\x94\x52\xd8\x96\x85\x65\x14\xc9\xfe\xab\x18\xf4\x49\x28\xef\x32\x99\x77\x89\x10\x1f\xca\xbb\xfc\xd4\xd6\x5f\x85\xf6\x58\x4e\xf0\xd7\xac\x5e\x45\xaf\xf9\xc8\x0d\x37\xf8\x86\x2f\xa9\xcf\xca\x10\x3d\x5d\x24\xac\xac\xe8\x3a\x20\x0f\x02\xe4\x3f\x38\xfb\xe7\x03\x79\xf9\x92\x5c\x9c\x13\x5c\x83\x24\xa9\x8d\x10\x6b\x43\xcf\xa6\x37\x22\xaa\x35\xad\x07\x3e\x84\xa8\xba\x29\xa4\x33\x06\x77\x44\xe1\x0a\xa7\x3f\x57\xd3\xc7\xa5\x62\xc0\x56\xae\x41\x8a\x7d\xc7\x8a\xd7\x36\x64\xbd\x79\x7d\x9b\x8a\x2e\xc7\x7d\x2a\xc8\xa6\x1c\x30\xee\xf5\xf6\xe3\x58\xa8\x30\x04\xed\xfa\x14\x21\x54\x03\xc6\xb7\x57\xb9\xe0\xa2\x58\xce\x71\x4d\xc9\xf1\x4d\xca\xd6\x28\x8a\x37\xee\x8f\xfd\x5f\xdb\x5e\x63\x8c\xdb\xc3\xa2\x36\x0b\xa2\xba\x80\xea\xb1\x72\x82\x5f\x67\x81\x4c\x58\x23\x2f\xb2\x06\x3e\xde\xc7\x1d\xef\xe4\x86\xd6\xc2\x63\x8c\x5d\x50\x04\x83\x9e\x50\xa1\x07\x12\xf5\xc6\xe3\xac\x67\x60\xb9\x49\x35\xdc\xa8\xf0\xad\x95\xbf\x66\x0b\xb2\xf9\x06\x74\x4b\x09\x32\x42\x85\xbd\x22\xf8\xff\x6d\x4d\x70\x63\x85\x96\x43\xef\x01\xd3\x63\x05\x94\x88\x4b\xaf\xad\xe5\x7e\xe4\xa1\xcb\x09\x01\xe7\x78\xf8\x7b\xb2\xb2\x76\x54\xd1\x2a\x78\xc4\x67\x98\xd1\xcd\x39\xf5\x1a\xe4\xa5\x59\x13\x58\x3a\xf2\x71\x5a\x38\xdc\x15\xd0\xd7\x56\x70\x39\x9e\x9a\x83\x9a\x32\xfe\xe5\x5a\x87\xb1\x9b\x1f\x94\xe9\x43\xf0\xa7\x4c\x6a\x39\xec\x66\x88\x9e\x86\xda\xc3\xa1\x9e\x02\xa6\xfc\x88\x4d\x65\x0a\x60\xff\x6b\x63\x40\x81\xf1\xbd\x0b\xaa\x55\xf9\xf4\x51\xac\x2d\xf5\xc8\x2b\xa4\x3a\x8c\xeb\x72\x8d\x40\x3a\x5a\xe7\x23\x6d\x73\x91\x85\xb4\xfa\x68\x53\x5b\x0f\x78\x2d\xe1\xae\x75\x8f\xd2\xa6\xeb\x13\x87\xfb\xe6\x20\xb2\x6d\xb4\xd7\xca\xdb\xea\x11\xac\x35\xae\xae\x07\xd6\x36\x7c\xf5\xb7\x75\x4f\xbb\xb5\xa5\xab\x0d\x13\xa0\xdd\x23\x4a\x03\x20\xb4\x4b\x20\x0f\x36\xc3\x3c\x10\x6a\x48\x90\x08\xb1\x1b\x07\x35\xda\x49\x96\x89\x8e\x41\x6c\x94\x4b\xda\x57\xd6\x94\x7d\xda\x73\x4f\x51\x69\x38\x87\xd2\x18\x74\xe4\x45\xe5\xb9\xf4\x44\xaa\x23\xc5\x78\xc0\x81\x79\xc8\x3b\x59\x3c\x51\xfb\x09\x86\x39\xde\x7d\xe6\x08\x38\xdc\x78\x12\xee\xbd\xca\x29\x85\x92\xf2\x95\x52\x02\xa8\x6c\xd3\xbe\xbf\xdc\x49\x46\xeb\x64\x7e\x09\x94\xb4\x60\x3e\x72\x88\x71\x04\xea\x15\xf5\xbf\x82\x64\x1e\x8f\x62\xe1\x0d\x75\xe5\xbd\x92\x40\xd0\xb0\x96\xf2\x4f\x51\x90\x9e\xcc\x1b\x87\x61\xa7\xa2\x1f\x82\x76\xa6\x1b\x86\x60\x23\x48\x3e\x34\x1e\xb3\x65\xd3\x5d\x4d\x7d\x98\x72\xf5\x4a\xa9\x0d\xa7\x36\xa7\x4e\xac\xd3\x2d\xb4\x0e\x36\x9d\x23\x8c\x5d\xf1\xdb\x0a\xea\xfe\x7e\x24\xd4\xca\x4b\x27\x68\x03\x6c\xd7\x20\xc5\x61\x8e\x67\x9f\x2a\x40\x4e\x93\x39\x0a\x8a\xef\xa8\xe0\x6c\x16\xcd\x66\x23\x7d\xcf\x57\x89\xc4\xc9\x55\x0b\x6a\xd0\x4b\x0c\x0c\x0c\xc4\x5d\x9a\xef\x35\xef\xdc\xa5\x81\xaa\x2d\x29\x93\x6b\x96\x49\xb4\x02\xed\xa9\x60\x87\x5c\x7b\x6b\x2a\x99\xa8\xf7\x64\x13\x3e\x68\xd2\x27\xb4\x3b\x6f\xe3\x8b\xa0\x11\xce\x3b\xdf\x1e\xa4\x9a\xf1\xfb\x3c\x7a\xe7\x28\xc2\xea\x23\x80\x89\x14\xef\x98\xe0\xfe\x57\x18\xe8\xf8\xc7\x94\xe7\x16\x28\x15\x03\x4f\x28\xff\x6b\xab\x11\xf6\x2c\xd6\xdb\xad\xb0\x75\x92\x3d\x4b\x11\x39\x0d\xec\xbc\x93\x5d\x42\xa5\x3b\x41\x17\x99\xdd\xd3\x3f\xe5\xf2\x3f\xa6\x8f\xe5\xbf\x5a\xda\x47\x6d\x69\xab\x27\x6a\xc6\x64\x80\xda\x1c\x8e\x4c\x59\xb7\xb6\x4c\xfd\x7a\x15\xad\x95\x12\x7f\xc6\x76\xe4\x98\xdf\x08\xb8\x03\x31\x6f\x8c\xaa\xbf\xc5\x5a\x6e\x3b\x52\xc3\x3a\xa0\x1b\x69\xd1\xb1\x84\x2c\x52\xdc\x78\xd5\xea\x1d\xc7\xdb\xf2\x65\xd8\x5a\x31\x65\x4c\x16\x97\x4a\xf4\xec\x3e\xb0\x1d\x3b\x7b\xa8\x7d\x8c\x30\xa6\x27\x55\xac\x8b\xf7\xb6\x41\xda\x06\xe1\x14\xac\xb5\xcf\xf2\xc6\x0c\xbb\xf5\xc6\xd3\x49\x2b\x81\xbd\x47\x7f\x85\xcd\x61\x60\xb8\x06\xe6\x9d\x90\xf4\xfb\x2d\x7a\xfc\x1e\x99\xc4\xf7\xc1\xb4\x16\xab\x63\x56\x0d\x5a\x2b\xed\x45\x60\x0c\x0d\x47\x2f\xbb\xe9\xb4\x52\xfb\xb2\xab\xc2\xf5\xb7\x9d\x23\x28\x0b\x95\x77\x5a\x97\xd2\xc8\x8a\x1a\x34\xa0\xa4\xda\x1f\x34\xd9\x91\x49\xe4\x85\x4a\xab\x04\xb9\x9c\xa1\xd6\x5a\x2b\x83\x43\x2b\xe7\x78\x8e\x32\xfe\x48\x05\x3c\x5c\x69\x04\x91\x47\x85\x50\x03\xdb\xf3\x2e\xd5\x66\x33\x70\x60\xd1\xd1\x91\x7a\x61\x2b\xe0\xe1\x3b\x6e\xf5\x06\x6c\xe6\xe6\xb6\xfa\xfe\x7c\x8c\xb3\x72\xf4\x7c\x15\x45\xbc\xab\xeb\x6f\x5c\xed\x2a\xe1\x82\x79\xeb\xea\x01\xcf\x5e\xd2\x27\xa4\xfb\x4e\x42\x6a\x1f\xcc\x2c\xac\x7b\xce\x3e\xd5\x9b\x5c\xef\xdc\x15\x44\xfd\xfb\xb0\xae\x9c\x72\x66\xff\x6d\xcf\xfe\x0c\x00\x00\xff\xff\x6e\x45\x07\xa6\x14\x46\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 17940, mode: os.FileMode(420), modTime: time.Unix(1517661641, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

