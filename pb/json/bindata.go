// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x5d\x6f\xdb\x36\x17\xbe\xcf\xaf\x10\xfc\xbe\x17\x1b\x10\x54\x69\x31\xec\xa2\x40\x81\xb5\x69\x33\x18\x08\xb6\x2e\x19\xba\x8b\xa1\x10\x68\x89\x92\xd9\x52\xa2\x4a\x52\x69\xbd\xc6\xff\x7d\x87\xb4\x6c\xeb\x8b\xfa\x96\x2d\xac\xbd\x68\x63\x8b\x3a\x47\x0f\x1f\x1e\x9e\x2f\xd1\x5f\x2f\x2c\x6b\x21\x3e\xa3\x20\xc0\x7c\xf1\xdc\x5a\x3c\x7b\x72\xb5\xb8\x54\xd7\x48\xe4\x33\xb8\xa0\xc6\xe1\x9b\x24\x92\x62\x35\xfe\xbb\x44\x3c\xb1\x5e\xbe\x5d\xea\xbb\x60\xe4\x01\x73\x41\x58\xa4\xc6\x9e\xa6\xb2\x70\xd5\x65\x91\x44\xae\x3c\x28\x80\x4b\x11\x0a\x33\x1a\x62\xce\x3e\x60\xb8\xe1\x72\x3f\x9c\x70\xaa\x46\xd7\x52\xc6\xe2\xb9\x6d\x07\x44\xae\x93\xd5\x13\x97\x85\x76\xb4\x41\x5f\xa4\xcd\x94\xd8\xf1\x76\x1c\x22\xa2\x05\x12\x1c\xb1\x5f\xf4\x2d\x42\xe2\x58\x09\x2c\xf4\x3d\x5b\xf8\x7f\xab\x67\x22\xdc\x35\x0e\xb1\x80\x9b\xff\xde\x81\xd3\xcf\x50\x77\xbd\xd7\xe3\x80\x55\x24\xb9\x1b\x50\x1c\x53\xe2\x22\x09\xf3\xb2\x3f\x08\x98\xdc\xe1\x5e\x80\xed\x25\x6e\xcb\x7b\x91\x5c\x8b\x23\x85\x36\x8a\x89\xfd\xf0\xd4\x5e\x51\xb6\x12\x92\x71\x6c\xc3\x83\x7d\x12\x64\x39\x0a\x70\x96\x32\xb8\xc0\x62\xcc\xb5\xee\xa5\xa7\x26\xfb\x2b\x96\xd7\x3b\xa1\xcb\xe3\x3d\x1c\x8b\x18\xa6\x80\x45\x4e\x14\x06\x9e\x5d\x5d\x15\x2e\xc1\x45\x0f\x0b\x97\x93\x58\xa6\x6b\x96\x51\xa4\x87\x35\x59\xa8\x24\x06\x23\xff\xe7\xd8\x57\x12\xff\xb3\x3d\xec\x93\x88\x28\x0d\xc2\x8e\x57\x80\xe9\xd5\x7e\x4a\x3b\x70\x77\x29\xa0\x45\x4e\xc5\xf6\xa2\xea\xf3\x36\x33\x11\x89\x82\x23\xb1\xe9\xb5\x83\xea\x7b\xcc\x1f\x88\x9b\xd1\xf9\xfe\x22\xab\x2b\xd5\x53\xc1\x32\x8e\x24\x27\x39\x72\xda\xd0\xfc\x26\x95\x9a\x15\xcf\x29\xa8\x79\xf1\xcb\xb1\xda\x11\x8e\x8b\x60\x46\x59\x92\x63\x26\xea\x59\xbe\xd3\x82\xd7\x5a\x6e\x3e\x34\x67\x50\xf5\xe5\x39\x46\x1c\x7c\x9d\x04\xc7\x58\x60\xbb\x80\x7d\xef\x11\x57\xcc\xdb\x14\x81\x93\xc8\x34\xc2\xf1\xa7\x84\x00\xe9\x30\x2e\x79\x82\xc7\x9d\xf0\xa7\x04\xc3\xaa\xb5\x98\xef\xfb\x89\xec\xca\x27\x14\x8b\x0d\xb8\xf2\xd0\x46\x52\x72\xfb\x2b\xf1\xb6\x5d\xb6\xee\x4b\x10\x9a\x91\x35\x29\x38\xa7\x32\x23\xe2\x55\x1b\x91\x8a\x43\xdd\x8c\x48\x6e\x62\xad\x51\x80\xbb\x89\x82\xa2\xac\xcf\x78\x88\xa4\x8e\xbd\x24\x92\x3f\xff\x94\x9d\xd7\xf6\xb2\x19\x67\x15\x9e\x1d\x52\xb0\x3e\x5e\x67\xef\x3e\xa2\xa2\x01\x6b\x2f\x63\xbd\x01\xa3\xbb\xd7\x46\xd7\xdf\x5a\xd5\xc7\xce\xd6\x7a\x87\x91\xa7\x1e\x3e\x23\x8b\xdd\x43\xfa\x6e\xb5\x79\x9c\xcc\xf7\x05\x96\x93\xd9\xed\xc8\x68\x29\x8e\x82\x29\x76\x19\x80\xc1\xaa\x52\x30\xc2\x2d\xa3\x1d\x75\x17\x1e\xf2\xff\x38\xa9\xdf\x59\x7f\x71\x22\xf1\xcc\xb6\xd6\x01\xd3\xf7\xbd\x95\xc7\x79\xde\x04\x28\xb3\x2c\xa3\xa5\x3f\xe3\x44\x94\xc8\xfb\x8d\x79\xb8\x4b\x40\xb9\x49\x65\x6e\x12\x4a\xdf\xe6\x57\xf9\xdc\xd6\x5f\x84\x76\xaa\x4d\xf0\xdf\x4c\x37\x68\xa7\x82\xf6\x96\x08\xf9\x9a\xcc\x29\x31\x4e\x11\x9d\xcf\x13\x16\x66\xb4\xf4\xad\x47\x08\x9a\x3f\x10\xef\xc7\x47\xeb\xc5\x0b\xeb\xea\xd2\x92\x6b\x1c\x59\xda\x46\x2c\x65\x43\x4f\xc6\x37\x22\xc4\x39\x2a\x3b\x3e\x58\xde\xe2\xa2\xe4\xa4\x2a\x7d\x70\x83\x17\x2e\x70\xfa\xcd\x66\xe9\x51\xc1\x9f\x36\x36\x29\xae\x39\x46\x72\x4e\x49\xc4\x0e\xd0\xb7\xd1\x9a\xd8\xcf\xf5\xfc\x61\x99\x28\xc3\xf1\x56\xb6\x90\x48\x76\x6d\x25\x2e\x55\xd4\x7b\xfd\xea\x5e\x8b\xce\xc7\x90\x0a\xc8\xc6\x6c\x2a\xee\xf5\x76\xe3\x98\x32\xf5\x12\xc2\x76\x61\xc9\x03\xd6\xa3\x65\x7b\x7d\x14\x9c\x15\xcb\x47\x5c\x63\x72\x7c\xab\xd9\x1a\x44\xf1\xc6\xfe\xba\xff\xb4\xed\xe4\x14\xef\x0f\x93\xda\xcc\x88\xea\x0c\xaa\x53\xb9\x47\xb7\xcc\x82\x1e\x1f\xa9\xcc\xea\x18\xb2\x4f\xe3\xac\xeb\x5b\x01\xf5\xcd\x80\xbe\x7e\x7b\x88\xb1\x53\x58\x23\x21\x1d\xf8\xe6\xa8\x57\x41\x1b\x87\x78\x1d\x1d\xcb\xad\xd6\x00\x18\xd4\xfb\x97\xcd\xd2\x9b\x91\xcd\x57\xa0\x9b\x8b\x93\x81\x3f\x9d\x3c\xf8\x1f\x2a\xad\xbc\x55\x42\xf3\xa1\xf7\x80\xe9\x54\x0e\x25\x24\x91\x63\xea\xda\x9c\xb8\x6f\xd7\xc2\xe1\xd4\xbb\xbf\xb3\x55\x46\xe6\x35\x6a\xd3\x39\x25\x21\x99\xa0\xcd\x3b\x65\xe3\xb4\xd7\x2e\x4d\x0b\xa2\xdc\x31\x8f\x76\xee\x70\x97\x40\x2f\x95\xe0\x7c\x76\xea\x11\xd4\x98\xfe\xef\xa8\xb5\x1f\xbb\xc7\xc3\x31\x5d\x08\x7e\x97\x4a\xcd\x87\xdd\x14\xd1\x79\xa8\xbd\xd8\x1f\xe4\xc9\x60\x3a\x80\x5f\x14\x1a\x49\xea\xab\xf2\x01\x19\xc6\xf7\x5b\x90\xad\xf2\x27\x8e\x62\xae\xa8\x97\xa4\x40\xea\xc2\x23\x3c\x9f\x23\xe4\xb4\x54\x74\x5f\x6a\x3a\x2f\x59\x16\x74\xf6\x61\x52\x5b\x76\x78\x06\x77\x67\x5c\x23\x5d\x74\xbd\x23\xf8\x73\xb5\x13\xd9\x56\xda\x6b\xe1\x0d\xf5\x00\xd6\x2a\x67\xd7\x01\xab\x09\x5f\xbe\x07\x70\xde\x65\xcd\x8d\x56\x34\x10\x77\x8f\xc8\xf5\x0f\xa5\x82\x6f\x3d\xaa\xe8\xf2\x68\x21\x61\xf9\x09\xa5\xbb\x6e\x62\xa5\x8d\xa4\x51\xa8\x0e\x62\xa5\x5c\x62\x9e\x59\x55\xe4\x31\xc7\x9d\xac\xd2\x60\x0a\xa5\xb0\x36\xa1\x13\xe6\xdb\x70\x23\xa9\x06\xad\xc4\x27\xd8\x73\x24\x69\x64\xb1\xbb\xf6\x54\x41\x7b\xfb\xfe\x53\x09\xb4\xb6\xef\xe1\x3b\x70\x0a\x9f\x45\x84\x13\xc1\x2e\x35\xe8\x5d\x31\x46\x31\x8a\x4c\x8a\xf7\xc3\x8d\x1c\x18\x5f\x0d\xcd\x81\x0d\x03\xe6\x9a\x63\x8f\x03\x50\xaf\x90\xfb\x11\x47\x9e\x43\xc2\x98\x3a\x7d\x9d\xc1\x5e\x89\x4f\x51\x50\x4a\x18\xda\x28\xd0\x67\xf9\x86\x61\xd8\xa9\xe8\x86\xc0\xcc\x74\x45\x0b\x6d\x00\xc9\x87\xb2\x65\xb2\x58\xbc\xcb\xc8\x0f\x3d\xb2\x4e\x01\xb9\xe2\x9c\xe7\xd8\x61\x79\xbc\x89\x96\xc1\xea\x2e\xc4\xd0\x19\xbf\x29\xa0\xee\xbe\x8f\x60\x6b\x3a\xba\xff\xd6\xc3\x76\x55\x93\xbf\xdf\xc6\x53\x4f\xa5\x38\x1a\x3d\xf6\x3c\x20\x4a\xbc\x49\x34\x8b\x4d\xe4\x3a\x2e\x4b\x22\x39\xba\x6a\x8a\x84\x74\x12\x81\x7b\x3a\xe2\x26\xcd\x9f\xd5\xb1\x8d\x69\x54\x2b\x52\x46\xd7\x1c\x25\xe1\x0a\x73\x87\xf9\x3b\xe4\xdc\x59\xa3\xc8\xa3\xe5\x8a\x6e\xc4\x07\x8d\xfa\x04\xf3\xe6\xad\x7c\x8d\x34\x60\xf3\x4e\xb7\x06\x5a\xb3\xfc\x32\x8d\xde\x29\xf2\xaf\x72\x03\x61\x24\xc5\x3b\x26\x08\x24\x0a\x3d\x37\x7e\x9d\xf2\xa3\x05\xaa\xd7\xa6\x0e\x65\xee\x47\xa3\x11\x76\x4c\xf7\xcd\x56\x68\xec\x83\x4f\x92\x44\x8e\x03\xfb\x58\x27\x54\x80\x2c\xf0\x0f\xa1\x3c\x09\x17\xd9\x2e\xca\xe2\x66\x79\xfb\x26\xdb\x25\x7a\xbd\xbc\xdb\x3f\xf3\xd0\x33\x54\x5d\x13\x94\x50\x8d\x4a\xdf\x5f\x05\x41\x97\xe2\x73\x48\xb6\x47\x28\x85\x87\xd6\x69\xd9\xe0\x48\xfe\x19\x3f\xc2\x7c\x2f\xd5\xad\x49\x4a\x75\xc3\x16\x2b\x1e\x34\x1b\x12\x97\x4a\xbd\xc5\x9c\x9a\xa1\xd9\xb4\xa1\x93\x99\x11\x6d\x4e\xa5\x0b\x85\xc7\x84\x45\x52\xdd\x16\xa4\xf8\x01\xd3\x69\x3d\x67\xf9\xcd\xdc\x7c\x8b\xa4\x12\xd6\x1e\x35\x92\x41\xc7\x1c\x62\x5b\x76\xe1\x99\x71\x77\xd4\x37\x0b\xe6\x61\x6b\xd9\x28\x32\x45\x0b\x11\x12\x21\x24\x9b\xd3\xb9\x46\x63\x28\xfd\x46\x67\x48\xa5\xac\x8e\x86\xf4\x9a\xe8\x6a\x23\x5b\xf4\x37\x2b\x7e\x5e\x38\xa4\x89\xcf\x37\x0e\x4f\x8c\x04\x76\x6e\x48\x66\x16\xc7\xc3\x42\xbd\xc7\x75\x5a\x04\xfd\x6e\x93\x1e\xbe\x46\x22\x71\x5d\x2c\x8c\x29\xf4\x90\x59\x63\xce\x19\x77\x42\xd0\x8e\x82\xc1\xd3\xae\x3a\x81\x65\x9e\x76\x51\xb8\xfc\x06\x77\x00\x65\x01\x73\xda\xd5\x4e\x95\xac\xb0\x5e\x6d\x53\xc4\xdd\x5e\xfd\x26\xc8\xeb\x1d\xe0\x8c\x25\x10\xef\x27\xc8\xb5\xd6\x4c\xc8\xbe\xc9\x74\x3c\x45\x66\x5f\x93\x01\xf7\x57\x1a\xe2\xd0\x41\x14\x3c\xec\x34\xaa\xc5\xa6\x67\x1b\xa5\xa1\x4e\x76\x02\x23\xe0\xfe\x2b\xae\xf4\xfa\xde\xc4\x25\x77\xf1\x4c\xc0\x90\xcd\x4a\xa4\xe3\xb2\x50\x1d\xbc\xe9\xd3\x75\x4d\x08\xf5\x9c\x75\xf1\xd0\x6a\x27\xe9\x16\xe1\xbe\x91\x90\xd2\xef\xc8\x66\x56\x50\xa7\xbf\x60\x1d\x5d\xef\xd4\x19\x44\xf9\x67\x93\x4d\x31\xe5\x42\xfd\xdb\x5e\xfc\x1b\x00\x00\xff\xff\x88\x1a\x27\xca\xdc\x46\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 18140, mode: os.FileMode(420), modTime: time.Unix(1520223254, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

