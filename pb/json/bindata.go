// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x10\x6c\x8f\x8b\x55\x76\x51\xf4\x90\x53\xdb\x45\xb1\xc8\xa9\xc5\x2e\xd0\x4b\x11\x08\x34\x35\x96\xb9\x95\x48\xee\xcc\x30\x5b\xb7\xf0\x7f\x2f\x48\x2b\xd1\x47\x24\xc7\x96\x1c\xd4\xb7\x44\x33\xf3\xf4\xe6\x91\xf3\x21\xff\xbb\x12\x42\xd2\x37\x55\x96\x80\xf2\x56\xc8\xf7\x6f\x6f\xe4\x9b\xf8\xcc\xd8\x8d\x93\xb7\x22\xda\x85\x90\x6c\xb8\x82\x68\xff\x8d\x15\x06\xf1\xf3\xef\x77\xc9\x4b\x08\xf9\x00\x48\xc6\xd9\x68\x7b\xd7\xc4\x0a\x21\xb5\xb3\xac\x34\x3f\x01\x08\x21\xad\xaa\x3b\x08\x1e\xdd\x17\xd0\xdc\xf8\x0b\x21\x03\x56\xd1\xba\x65\xf6\x74\x9b\x65\xa5\xe1\x6d\x58\xbf\xd5\xae\xce\xec\x4e\xfd\xcd\x99\x8b\x61\xad\x3b\xd4\xca\xa4\x80\x00\xd6\xfd\x94\x5c\x88\xc1\xc7\x00\x99\x7c\xf6\x2b\x21\xf6\x29\x13\xd2\x5b\xa8\x81\xe4\xad\xf8\xf3\x40\x2e\xbd\x23\x7a\xdd\x27\xbb\x76\x96\x42\xcf\x41\x79\x5f\x19\xad\xd8\x38\x9b\x7d\x21\x67\x5b\x5f\x8f\xae\x08\xfa\x44\x5f\xc5\x5b\x6a\x25\xcc\x94\x37\xd9\xc3\xbb\x6c\x5d\xb9\x35\xb1\x43\xc8\xb4\xb3\x1b\x53\x76\x35\x2a\xa1\x2b\x99\x10\xd2\x79\xc0\x84\x7d\x57\xc4\x64\x3f\x02\x7f\x38\x04\xbd\x69\x7d\x10\xc8\x3b\x4b\x40\xbd\x50\x21\xe4\xfb\x9b\x9b\xc1\x23\x21\x64\x01\xa4\xd1\x78\x6e\xce\xac\x03\x94\xcc\x49\x2c\xf5\x2c\x4c\x08\xf9\x3d\xc2\x26\x46\x7c\x97\x15\xb0\x31\xd6\x44\x04\xca\xfc\xfa\x23\xf0\x2f\x8f\x29\x1d\xc8\x7d\x6a\x08\xc9\x1e\xc4\x7e\x35\xf6\xf7\xbe\x93\x08\xab\xb2\x15\xb6\x79\xf6\x04\xfd\x19\xf0\xc1\xe8\x0e\xe6\xfd\xaa\x8b\xd5\xe0\x8c\xa8\x0c\x96\xd1\xf4\xc4\x39\x45\xe6\x5f\x9b\xa8\xab\xd2\xb9\x21\x75\x5d\xfa\x22\xc4\x8a\xc8\xb5\xd2\x5b\xe8\x8a\xec\x1d\x1d\x57\xf9\x53\x0a\xfc\x90\xe2\xae\x47\xe6\x0e\xab\xb9\x3a\x7b\x85\xaa\x06\x06\x1c\xaa\x3d\xe0\xfe\xd8\x11\xd7\xae\xd8\x0d\x89\x1b\x3b\x65\x41\xf8\x1a\x0c\x42\x94\x90\x31\xc0\x65\x13\xfe\x1a\x80\xf8\x94\x7c\xef\x5f\xe9\x5e\xd1\x8e\x18\xea\xac\x37\x7d\x4e\xab\xd8\xcf\x29\xf2\x2e\x06\x5e\xcf\x6d\x6a\x49\x5d\xb2\x68\x5b\xd4\x79\xea\xb6\x33\xfb\x1c\x81\xff\x68\xa2\xae\x47\xdd\x86\xd1\xff\x23\xed\xd3\x7e\xd1\xe1\xd4\x4e\xfb\xe7\xdd\x3a\xfe\xbb\xeb\x4a\xce\x3b\x9f\xca\xdf\xad\xfb\x9b\x90\xc7\xa8\x3d\x9b\x81\xaa\x32\xb6\xdc\x3c\x2e\x15\x43\xb1\x1f\x81\x88\xd1\xd8\x52\x8e\xe6\x4a\xac\x18\xe6\x04\xa6\xb7\x56\x60\x5f\x88\xed\x9e\xa5\xdc\x38\xac\x55\xbc\x4f\xd2\x58\xfe\xf1\x87\x71\xe0\x07\x55\x99\xe2\x55\x90\x69\x67\x75\xae\x5d\xb0\x7c\x71\xe8\x4a\x11\xe7\x81\x52\xf7\x7d\x05\xe4\x6f\x68\x5e\x3c\xa5\x99\xd0\x51\x94\x8b\x23\xdb\x50\xaf\x01\x73\xb7\x39\x30\xc7\x7c\xab\x6c\x51\x3d\x6f\x07\x17\x7c\xd1\x45\xdf\x30\xda\x2c\x8f\xae\xb4\x4b\xea\x57\xe9\xbf\xc0\x16\xb9\xa9\x7d\x95\x37\xb3\xff\xfc\x72\x6c\x40\x36\xd5\xa1\x79\x9d\x0d\x90\xf6\xb4\x65\x1c\x0e\x10\xe7\x31\x98\x56\x7a\xb8\xd4\x2e\x50\x18\x06\x2d\xb6\x07\xa2\x10\x55\x7f\x99\x92\x86\xa1\x1e\xa6\x30\x39\x6e\xa6\x3a\xfa\xf8\x98\x99\xc8\x77\x64\xd9\x5a\x90\x6f\x81\xbb\x1c\xc3\x64\x03\x5d\x3b\x57\x81\xb2\x53\xc5\xf0\x68\x1e\x3d\xe3\x02\x28\x2e\x99\x39\x99\x7f\x4e\xbf\x23\xa7\x24\xbd\xfc\x94\x29\x68\x0d\x34\x79\xf5\x96\x64\x0d\x88\x0e\xf3\x1a\x88\x54\xb9\x38\xed\x91\xdd\x6f\x41\xd6\xa5\xcb\x9f\xaf\x6d\xc7\x79\x75\x12\x73\xb3\x7a\x85\x42\x3d\x6b\xd9\xb0\xa1\xce\x4b\x87\x2e\xb0\xb1\x93\x32\x1a\xcb\x50\x02\xce\x18\x06\x5b\x47\x3c\xb7\x77\x79\x33\x73\x74\x87\x23\x84\xc2\x6b\x80\xd6\x50\xe7\xaa\xaa\xdc\xcc\xa9\xfd\x12\x34\xed\x66\xce\xd0\x63\xc0\xe9\xe0\x27\x09\xcf\x3f\xf1\x88\xbb\x29\x26\x09\x9f\x09\x3c\x51\xaf\xc3\xaf\x89\x25\xc5\x6a\x38\xd7\xae\xae\xcd\x4b\x1b\xe8\xf8\x8c\x0f\xa6\x2a\xf2\xed\xf0\xf7\x93\xb3\xa2\xd9\x9c\x51\x1f\x7d\x41\xe2\x87\xcd\x6a\xbf\xfa\x2f\x00\x00\xff\xff\x4d\x8e\xcb\xfb\x1a\x16\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 5658, mode: os.FileMode(420), modTime: time.Unix(1511532779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

