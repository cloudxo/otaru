// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x5a\x4d\x6f\xdc\x36\x13\xbe\xef\xaf\x30\xf6\x7d\x8f\x46\xe4\x04\x45\x0f\x39\xb5\x71\xd2\xc2\x80\xd1\x8f\x18\xe8\xa5\x30\x08\xae\x44\x69\x99\x50\xa4\x42\x52\x4e\xd4\x60\xff\x7b\x87\x5c\xed\xae\xbe\x28\x4b\x94\xe4\xea\x90\xd8\x16\x39\x8f\x66\x9e\x19\xce\x0c\x67\xf7\xfb\xe6\xea\x6a\xab\xbe\xe2\x24\x21\x72\xfb\xf6\x6a\xfb\xe6\xd5\xcd\xf6\xda\x3c\xa3\x3c\x16\xf0\xc0\xac\xc3\x5f\x9a\x6a\x46\xcc\xfa\xef\x1a\xcb\xfc\xea\xe7\x3f\xee\xec\x2e\x58\x79\x22\x52\x51\xc1\xcd\xda\xeb\x52\x16\x9e\x86\x82\x6b\x1c\xea\x33\x00\x3c\xe2\x38\xad\x20\x64\x52\x7c\x22\xb0\xe1\xfa\xb4\x9c\x4b\x66\x56\xf7\x5a\x67\xea\x6d\x10\x24\x54\xef\xf3\xdd\xab\x50\xa4\x01\x2f\xf0\x37\x1d\x08\x23\x76\xd9\x4e\x52\x4c\xad\x40\x4e\xb8\xf8\xc9\x6e\x51\x9a\x64\x46\x60\x6b\xf7\x1c\xe0\xff\x83\xb5\x44\x85\x7b\x92\x12\x05\x9b\xff\x3e\x2a\x67\xdf\x61\x76\x3d\xda\x75\xd0\x55\xe5\xb5\x0d\x38\xcb\x18\x0d\xb1\x06\xbb\x82\x4f\x0a\x8c\x3b\xef\x05\xb5\xa3\x3c\x1c\xb8\x17\xeb\xbd\xba\x50\x18\xe0\x8c\x06\x4f\xaf\x83\x1d\x13\x3b\xa5\x85\x24\x01\xbc\x38\xa6\x49\x95\xa3\x84\x54\x29\x83\x07\x22\x23\xd2\x62\xdf\x45\xc6\xd8\x5f\x89\xbe\x3d\x0a\x5d\x5f\xf6\x48\xa2\x32\x30\x81\xa8\x9a\x28\x2c\xbc\xb9\xb9\x69\x3c\x82\x87\x11\x51\xa1\xa4\x99\x2e\x7d\x56\x01\xb2\xcb\x96\x2c\xdc\x12\x83\x95\xff\x4b\x12\x1b\x89\xff\x05\x11\x89\x29\xa7\x06\x41\x05\xd9\x0e\x74\x7a\x77\x32\xe9\xa8\xdc\xc7\x52\xa1\x6d\x0d\xe2\xb0\xe9\xfa\xfd\x50\x31\x44\xe3\xe4\x42\x6c\xf9\xec\x0c\xfd\x40\xe4\x13\x0d\x2b\x98\x8f\x9b\x2a\x56\x89\xd3\xc1\x32\xe1\x5a\xd2\x1a\x39\x43\x68\xfe\x50\x4a\xad\x8a\xe7\x52\xa9\x75\xf1\x2b\x89\x39\x11\x28\xc4\x60\x51\x95\xe4\x4c\xa8\x7e\x96\x3f\x5a\xc1\x5b\x2b\xb7\x1e\x9a\x2b\x5a\xf9\xf2\x9c\x61\x09\xb9\x4e\x43\x62\x6c\xb0\xdd\xd0\xfd\x94\x11\x77\x22\x2a\x9a\x8a\x53\xee\x5a\x91\xe4\x4b\x4e\x81\x74\x58\xd7\x32\x27\xf3\x1a\xfc\x25\x27\xe0\xb5\x01\xf6\x3e\x2e\x14\x57\x31\x65\x44\x15\x90\xca\xd3\x80\x8d\x3a\xb3\xf7\x54\xe9\xf7\x54\xae\x28\x92\x4a\x8d\x5e\x2a\x8a\x4c\xb9\xe9\x8e\x22\x70\xaa\xec\x0b\xa3\x18\x33\xd5\x8c\x23\x5d\x64\x16\x55\x41\xc6\xe1\xc9\xd6\x2b\x06\x7e\x01\x5f\x3e\x58\x5f\x8e\x0c\x02\xca\x45\x44\xa2\x5d\xa0\x34\xd6\x63\x13\xf7\xdd\x6f\x20\xfb\xfe\xdd\x83\x15\x5d\x4f\x30\x34\x34\x9b\x33\x85\x9f\x70\xc7\x71\xcc\x84\x69\xf9\x02\xe8\x5c\x48\x22\x3c\x0a\xe4\xed\x45\x70\x55\x2c\x5f\xf4\x9a\x93\xe3\x7b\xcb\xd6\x24\x8a\x8b\xe0\xfb\xe9\xb7\xc3\xa8\x3a\xf9\x70\x36\xaa\x58\x11\xd5\x15\xad\x5e\x2a\xc3\x85\x6d\x16\xec\xfa\x31\xcb\x75\xe5\xbf\xfe\x5a\xd9\x93\xe3\xae\xd7\x52\xb5\x4f\x3a\x52\x0e\xb6\x13\xd9\x80\x85\x0d\xb1\x90\x29\xd6\xe5\x96\x1f\x7f\x98\xa3\x76\x4f\x09\x76\x06\x3e\x52\x1a\xc1\x5f\xc8\x34\xde\x05\xa2\xd1\xc8\xc4\x72\x6f\x11\x40\x07\xd3\xed\x16\xf0\x78\x3d\x31\xdf\xa1\xdd\x5a\x92\x0c\xfc\x18\x95\xc1\xff\x34\x3d\xc1\xbd\x11\x5a\x0f\xbd\x67\x9d\x5e\x2a\xa1\xa4\x94\x9b\xf8\x9c\xbd\x69\xea\x3e\xac\x7d\x47\x75\x48\xc2\xe9\x4f\x7f\x53\xf4\xc5\x52\xe2\x36\x2c\xf4\x6d\xcd\x40\xa8\x49\xb5\xd3\x66\xc3\x47\x03\x6c\x62\x34\xa5\x7a\x15\x0e\x58\x36\x3b\x96\x57\x9a\xda\x50\x6d\x58\x3a\x3c\x36\xd0\x77\x46\x70\x3d\x27\xf5\xa2\xd4\x9c\xf9\xef\x82\xea\xc7\xee\x65\x14\x39\x86\xe0\xbf\x4a\xa9\xf5\xb0\x5b\x6a\xf4\xdf\x50\xbb\x39\x8d\x4d\x2b\x3a\x9d\x95\xdf\xf6\x8e\xfb\x2a\xbc\x9f\x0e\xa2\xd8\xd5\xa7\xbc\x99\x34\x0e\xd0\xb4\x41\xed\x76\x87\xc3\xcf\x84\x47\x88\xa6\x19\x43\x65\x72\xa8\x31\xef\x4a\x3a\x55\xc3\x4f\x20\x31\xc3\x49\xcb\x75\x43\x00\xec\x0c\x6b\x9a\x0e\x47\x88\x71\x1a\x74\xc6\xb6\xeb\x32\x33\x81\xe4\x73\x01\x71\x28\xd6\x2e\x03\x8e\x22\xe0\x1e\x79\xd8\xdc\x78\xbe\xad\x74\x87\xaa\xdb\xdc\xe6\x7c\x73\x82\xad\xb6\xf9\x5c\xce\xd0\xb6\xb2\xb6\x1f\x9c\x6a\xf1\x87\x86\xd6\xe3\xcf\x11\x1c\x4d\x64\x6f\x42\x1e\xb1\x6b\xc6\x2d\x7e\x07\xcf\xbc\x95\x11\xfe\x8c\x6c\x8d\x70\x67\x2d\xae\x02\x3f\x61\x46\xa3\x45\x90\x55\xc1\x43\x14\x8a\x9c\xeb\xd9\xa1\x19\x86\x0b\x50\xae\x48\xb4\x0c\xf2\x57\x49\x9f\xf5\x92\x27\xb4\x21\x65\x76\x64\x9e\xa7\x3b\x22\x91\x88\x8f\x9a\x4b\xb4\xc7\x3c\x62\xed\xda\x3a\xe3\x8b\x66\x7d\x83\xfb\xf0\x76\x0e\xf4\x26\x1c\xde\xe5\x7c\x60\x91\xf5\xb7\x65\x70\xa9\x67\xa0\xe7\x7d\x07\xbf\xd5\xca\xcd\x04\x7c\x64\x82\x42\xa3\xe0\x79\xf0\xfb\xc0\x2f\x11\x68\x06\xd8\x88\x89\xf0\xb3\x33\x08\xbb\xae\x28\x5e\x51\xe8\x9c\x48\x4c\x88\x44\xb7\x4b\xe7\x51\xbb\xf9\xd1\xc8\x7a\x0b\x7d\x43\x53\x8f\x2a\xdf\x89\xb0\x88\x6f\x26\x04\xae\x67\xb7\x5b\xee\x19\xdf\x69\xd0\x7f\xe6\x2f\x61\xf9\x6c\x51\x5b\x01\x4d\x96\x00\x05\xbf\xa6\x28\x85\x14\x31\x3f\x34\xa0\xd2\x98\x92\x08\x72\xdc\xb3\x2e\x9d\x78\x86\xeb\xbd\xfe\x82\xf7\x92\xbe\x48\x62\xe4\x89\xb0\x65\x93\x55\x7b\x2c\xb9\xde\x74\xd5\xd2\xd5\x23\x61\x39\x30\xd6\x50\x4e\xaa\x8e\x17\x89\x4f\xbc\xac\x25\xd6\xaa\x49\x74\xb6\x93\x5a\xa3\xe7\xf8\x9d\xb4\xc1\x76\x3a\x82\xa1\xe3\xdb\x21\x13\x02\x21\x92\x05\x92\xb9\x53\xa9\x9d\x10\x8c\x60\xee\x32\xf7\xb4\xdc\x69\x70\x44\x94\x19\x0c\xa3\x01\xa5\x65\x9c\xd1\xd3\xcf\xbc\xca\xc3\x90\x28\x67\x27\x38\xc5\x6a\x22\xa5\x90\x28\x05\x74\x9c\x4c\x36\xbb\xeb\x23\x5d\xb7\xd9\x4d\xe1\xf6\x48\x78\x02\x65\x89\x40\xc3\xae\x00\x9d\xac\x08\xaf\xe9\x1f\x96\xa1\xd7\xd8\x04\xba\x7e\x04\x9c\x89\x5c\x53\xbe\x40\x45\xdf\x0b\xa5\x7d\xfb\xb3\x6c\x89\x66\xb1\xa7\xcf\xf2\x07\x4d\x49\x8a\x30\x83\xac\xb5\x0c\xb4\x2a\x3c\xa7\x01\xcf\x5c\xf7\x50\xe2\x54\xd8\xdf\xe3\x06\x37\x8e\x16\xbe\x39\x36\x3f\x64\x98\x72\x58\xa9\x46\xa1\x48\xcd\x27\x79\x3e\xc3\xc3\x9c\xb2\x08\xed\x9b\xdf\x82\x19\x25\x3d\xa0\x84\xba\x08\xd9\x98\x7f\x87\xcd\xbf\x01\x00\x00\xff\xff\xdd\x5d\x33\x6b\x08\x2f\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 12040, mode: os.FileMode(420), modTime: time.Unix(1512871482, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

