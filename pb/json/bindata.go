// Code generated by go-bindata.
// sources:
// src/otaru.swagger.json
// DO NOT EDIT!

package json

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _otaruSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x5d\x6f\xdb\x36\x14\x7d\xcf\xaf\x30\xbc\x3d\x06\x55\x5a\x0c\x7b\x28\x50\x60\x6b\xda\x0e\x01\x82\xad\x6b\x80\xed\x61\x28\x08\x5a\xba\x92\xd9\x52\xa4\x4a\x52\x69\xb5\xc6\xff\x7d\x24\x2d\xdb\xfa\xb4\xf5\xe9\x10\x58\x1e\xb6\x3a\x22\x79\x7c\xee\xe1\xe5\xe5\xe5\xa5\xfc\xfd\x62\xb1\x58\xca\xaf\x38\x8a\x40\x2c\x5f\x2e\x96\x2f\x9e\x5d\x2d\x2f\xcd\x33\xc2\x42\xae\x1f\x98\x76\xfd\x97\x22\x8a\x82\x69\xff\x43\x61\x91\x2e\x7e\x7d\x7f\x63\x7b\xe9\x96\x7b\x10\x92\x70\x66\xda\x9e\xe7\x63\xf5\x53\x9f\x33\x85\x7d\xb5\x07\xd0\x8f\x18\x8e\x0b\x08\x89\xe0\x9f\x40\x77\xb8\xdc\x35\xa7\x82\x9a\xd6\xb5\x52\x89\x7c\xe9\x79\x11\x51\xeb\x74\xf5\xcc\xe7\xb1\xc7\x32\xfc\x4d\x79\xdc\x0c\x3b\x74\x87\x18\x13\x3b\x20\x05\xc6\x7f\xb1\x5d\xa4\x82\xc4\x0c\x58\xda\x3e\x1b\xfd\xff\x8d\xb5\x44\xfa\x6b\x88\x41\xea\xce\xff\x6c\xc9\xd9\xef\x30\xbd\x3e\xda\x76\xcd\x55\xa6\xa5\x0e\x38\x49\x28\xf1\xb1\xd2\x76\x79\x9f\xa4\x36\x6e\xdf\x57\xd3\x0e\x52\xbf\x63\x5f\xac\xd6\xf2\x20\xa1\x87\x13\xe2\xdd\x3f\xf7\x56\x94\xaf\xa4\xe2\x02\x3c\xfd\xc5\x21\x89\x8a\x1a\x45\x50\x94\x4c\x3f\xe0\x09\x08\x8b\x7d\x13\x18\x63\x7f\x03\x75\xbd\x1d\x74\x79\xe8\x23\x40\x26\xda\x04\x90\xa5\xa1\xba\xe1\xc5\xd5\x55\xe5\x91\x7e\x18\x80\xf4\x05\x49\x54\x3e\x67\x05\x20\xdb\x6c\xc5\xc2\xb5\x61\xba\xe5\x47\x01\xa1\x19\xf1\x83\x17\x40\x48\x18\x31\x08\xd2\x4b\x56\x9a\xd3\xeb\x9d\x49\x5b\x72\x1f\x72\x42\xcb\x12\xc4\xe6\xa2\xe9\xf3\xa6\x60\x88\xc2\xd1\x41\xd8\xfc\xd9\x1e\xfa\x0e\xc4\x3d\xf1\x0b\x98\x1f\x2f\x8a\x58\x39\x4e\x83\xca\xc0\x94\x20\x25\x71\xba\xc8\xfc\x36\x1f\xe5\x94\xce\x39\x29\xb7\xf4\x15\x60\x56\x04\xf2\xb1\xb6\xa8\x28\x72\xc2\xe5\x71\x95\x3f\xd8\x81\xd7\x76\x9c\x3b\x32\x17\x58\x0d\xd5\x39\xc1\x42\xc7\x3a\xa5\x03\x63\x45\xed\x0a\xf7\x5d\x44\x5c\xf1\x20\xab\x12\x27\xac\xad\x45\xc0\x97\x94\x68\xd1\x75\xbb\x12\x29\x4c\x6b\xf0\x97\x14\xf4\xac\x75\xb0\xf7\xe3\x4c\x7e\x15\x12\x0a\x32\xd3\xa1\x3c\xb6\x1f\x7b\x39\xd4\xb5\x00\xac\xe0\x9d\x19\xe6\x8e\x3f\x1d\x48\xfd\x3f\xdc\xa9\x68\xef\x64\xde\x64\xe0\xee\xac\x57\x8c\x73\x27\xef\x3b\x09\x36\x7d\x76\x82\x0f\x80\x03\xc7\x1c\x6a\x47\xe9\x5c\xee\x44\x82\x66\x67\x32\xe9\x4d\x3f\x67\x52\x59\x62\x11\xa5\xde\xc5\x58\x54\x1d\x1b\x72\x11\x63\x65\x53\x3a\xc2\xd4\xcf\x3f\x15\xed\xda\x5c\x9e\xe6\xc9\xc3\x50\x82\x6a\xe6\xaa\x1d\x51\x1c\xf3\xfc\x10\x53\x79\x5e\xb6\x14\x58\x54\xd7\x6f\x3c\x5b\x4d\x06\x4c\x2a\xdf\x4a\xb7\xce\x76\xd2\x55\xb8\x4f\xd0\x93\xf4\xf8\xca\xfa\x5b\x10\xe7\x62\xf5\x9e\xd3\xd3\xda\x2a\xf3\x7c\xdc\x2d\xa5\x30\x2d\x8e\xed\x28\x2c\xf8\x9d\x07\xd0\x67\x43\x79\x97\x8f\x79\x97\x52\xfa\xbe\x3c\xcb\x8f\xed\xfd\x55\x6a\xe7\x5a\x04\x4d\xce\x3e\x59\xd8\x7e\x34\xe7\xa0\xbd\x4e\x9c\xb7\x44\xaa\x37\x44\x38\xe4\x0d\x39\xa3\x27\x27\xe8\xed\x04\x84\xe9\x45\x14\xac\x3c\xa9\xb0\xea\x5b\x76\xb8\x31\x0b\xf0\xcd\xeb\x3b\x3b\xd4\x1d\x67\xa8\x30\x9b\xb2\x00\xb1\xc3\xed\xa7\x31\xe5\xa6\x60\xe9\xf9\xfa\xa8\x11\xf1\x01\xe5\x9d\xeb\xc3\x40\xa7\x54\x3e\xf0\x9a\x52\xe3\x5b\xab\xd6\x28\x89\x33\xef\xfb\xee\xd3\xa6\xd7\xa1\xfc\x6e\x6f\x54\xe6\x90\xd4\x05\x56\xe7\x8a\x70\x7e\x5d\x05\xdb\x3e\x51\xc6\xe7\x64\x46\x77\xfc\x54\x72\xfc\x5c\x32\x34\xb3\x1b\xe3\xec\x54\xcf\x91\x54\x48\xff\x85\x4c\xd9\x38\x43\x24\xe8\x19\x58\x6e\x2d\x82\xe6\x60\x6a\xb5\xd9\x4d\xe0\x90\xcf\x37\xb0\x73\x25\xc8\xe8\x7f\x7a\x45\xf0\x3f\x4d\x4e\x70\x6b\x06\xb9\x23\xef\x9e\xd3\xb9\x02\x4a\x4c\x18\x6a\x3b\x40\x9e\xb9\x84\xd0\x21\xe0\x1c\x0f\x7f\x63\xf8\x62\x21\x70\x1d\x56\xe7\x6d\x55\x47\x28\x8d\xaa\x87\xcd\xca\x1c\x75\x29\xe2\x90\x98\xcc\x50\x71\x9a\xb3\x86\x33\x68\x95\xe6\x47\x9a\xd2\x95\x70\xb7\x70\xb8\x4d\xa0\x6f\xcc\x40\x77\x56\xea\x81\xd4\x94\xf1\xef\x80\x3a\x4c\xdd\xc3\x45\x7a\x1f\x81\xff\xca\x47\xb9\xa3\x6e\xce\xe8\x71\xa4\xbd\xd8\x5d\xfa\x17\x38\xed\xc9\x2f\x9b\x6e\x27\x0a\x72\xef\xd6\x1f\x5f\x95\x5f\x4d\x48\x84\xd1\x5d\x91\x8a\xa2\xcb\x80\x88\x72\x82\x50\x42\x69\xa8\xc4\xd5\xeb\x70\xa5\xd6\xca\x54\xdc\x84\x8b\x87\xed\x57\x3c\x2c\x5e\xbd\x5a\x5c\x5d\x2e\xd4\x1a\x98\x4e\xc0\xb4\x09\x8b\x07\x13\x83\x1e\x16\x58\x2e\xc2\x94\x52\x93\x3d\x3e\x5b\x36\xea\x99\xc7\xaa\x63\x14\x1b\xc7\xa5\xed\x96\x35\xc5\xa7\xf6\xe8\x54\x04\x8d\xe6\x00\xd5\x73\x13\xa3\xb8\x5c\x87\x9b\x08\x5a\xa3\x92\x90\x40\x80\x14\x39\xa9\x62\x47\xf4\xc6\x50\xd0\x78\x4d\x38\xc2\x33\x47\x7a\x65\xa3\x16\x44\x22\x06\x5f\x51\xe5\x56\xb6\x04\xbe\xe2\x9c\x02\x66\x6d\xe8\xbb\xe6\x93\x62\xb4\x56\x22\x5d\x90\xa4\x85\xf3\x91\xd7\x60\x46\xb0\x5e\x61\xff\x33\xb0\x00\x91\x38\xa1\x68\xe8\x52\xde\x81\x84\x14\x47\xb5\x4d\xa1\x0b\x80\x7d\xb7\x63\x1c\x87\x2d\x44\x3f\x06\xed\x4a\x37\x94\x49\x46\x88\xbc\x4f\x4d\x5b\x88\xd5\x13\xcc\x96\xf4\xb2\xbd\x98\x6a\xb3\xae\x7d\x1d\xa4\x79\x13\x6c\x37\xb7\xfa\xde\xcf\x08\x5b\xed\xb1\x76\x3e\x43\xeb\x64\xed\x49\x73\xac\xc5\x6f\x2b\xac\xfb\xaf\x23\xbd\x34\x91\xad\xb1\x0c\xf0\x5d\x53\xc8\x1d\xb6\xf0\xcc\xb7\x52\x60\xd3\xec\x1c\x05\xe0\x7b\x4c\x49\x30\x0b\xb2\xcc\x98\x8f\x7c\x9e\x32\x35\x39\x34\xc5\x52\xa1\x54\xc2\xc0\x40\x7c\x0a\xf9\xab\xb9\x25\x9c\x07\xda\x88\x32\x39\x32\x4b\xe3\x15\x08\xc4\xc3\x2d\x73\x81\xd6\x98\x05\xb4\x9e\xb5\x4f\xf8\x45\x93\x7e\x43\xfb\xe2\x6d\xbc\x2a\x18\xb1\x78\xe7\x9b\x03\x8b\xac\xbe\xcd\x83\x3b\x47\x12\x56\x3f\x24\x4e\x04\xbc\x55\x82\xe8\x44\x61\xe0\xc2\x3f\x06\x7e\xf0\x40\x73\x35\x86\x28\xf7\x3f\xb7\x3a\x61\xcf\x64\xbd\xdd\x0b\x5b\x6b\x9d\xb3\x24\x91\xd3\xd0\xae\x5e\xba\xba\xbb\xd1\x57\x98\x0e\xd8\xe5\x1b\x11\x5c\x48\xf0\x27\x38\x3c\xe7\x7d\xfa\x67\x1a\xe4\xdf\xe9\xb7\xb0\xa7\x93\xfc\xe2\x9c\x27\xf9\x4a\xae\x3f\xe3\xb9\xe4\x98\x27\x51\xb8\x07\x3a\x6f\xb0\xaa\x5f\x78\xb8\x1b\xae\x6a\x5c\x07\x04\xac\x16\x0c\x17\xb6\x93\xe2\xc4\xf3\x68\x88\xbf\xb8\xe2\x6b\xc5\x20\x3a\xd9\x4a\x2d\xc9\xb3\xfd\xad\x56\x67\x3b\x5b\x9c\xa1\xf6\x16\xf6\x98\xc3\xa9\xb9\x71\x1f\x64\xe8\x2a\x53\xd0\x85\x6b\xed\x17\x1e\x63\xaa\xde\x22\x43\x22\x6d\x15\xb0\x77\x0d\xb0\x30\x39\x01\x48\x73\x3d\x86\x3a\x6c\x83\xfd\x8c\x1e\x3f\x47\x32\xf5\x7d\x90\xad\x59\xeb\x18\xab\x41\x08\x2e\x50\xac\xd1\x71\x34\xda\xec\xa6\x17\x5b\xda\xcd\xae\x0e\xae\x5f\x8c\x8d\x90\x2c\xe2\xa8\xdb\x71\xa5\x51\x15\x3e\xa8\x52\x89\x85\x3f\xa8\xc4\xa3\x4f\x28\x48\x6b\xc6\x53\x45\xd8\x0c\xd9\xc7\x9a\x4b\x35\x34\x97\x4c\xe6\x48\x6c\x8f\xe4\x84\xc3\x41\x63\x88\x11\xa6\x3a\xc2\xce\x03\x2d\xb3\x81\x95\x8b\x13\x47\x53\x14\xb5\x12\x1e\x3e\xe3\x06\x37\x0c\x66\x3e\xe5\x56\xaf\x5a\xc7\x2c\x56\xa2\x90\xcf\x63\xf3\x3e\xc3\x90\x42\x67\x4a\x68\x80\xd6\xd5\x77\x01\x7b\x8d\xee\xb0\xdd\x9f\x14\xa4\xf6\x4b\x01\xc7\xce\x93\xf9\x6f\x94\x26\xc7\x9d\x3b\x83\xa8\xff\x30\xe6\xd4\x9e\x72\x61\xfe\xdb\x5c\xfc\x17\x00\x00\xff\xff\x94\xc0\x3a\x4d\x5f\x40\x00\x00")

func otaruSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_otaruSwaggerJson,
		"otaru.swagger.json",
	)
}

func otaruSwaggerJson() (*asset, error) {
	bytes, err := otaruSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "otaru.swagger.json", size: 16479, mode: os.FileMode(420), modTime: time.Unix(1516051299, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"otaru.swagger.json": otaruSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"otaru.swagger.json": &bintree{otaruSwaggerJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

