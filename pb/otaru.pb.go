// Code generated by protoc-gen-go. DO NOT EDIT.
// source: otaru.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	otaru.proto

It has these top-level messages:
	GetBlobstoreConfigRequest
	GetBlobstoreConfigResponse
	ReduceCacheRequest
	ReduceCacheResponse
	GetSystemInfoRequest
	SystemInfoResponse
	GetVersionRequest
	VersionResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetBlobstoreConfigRequest struct {
}

func (m *GetBlobstoreConfigRequest) Reset()                    { *m = GetBlobstoreConfigRequest{} }
func (m *GetBlobstoreConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlobstoreConfigRequest) ProtoMessage()               {}
func (*GetBlobstoreConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetBlobstoreConfigResponse struct {
	BackendImplName string `protobuf:"bytes,1,opt,name=backend_impl_name,json=backendImplName" json:"backend_impl_name,omitempty"`
	BackendFlags    string `protobuf:"bytes,2,opt,name=backend_flags,json=backendFlags" json:"backend_flags,omitempty"`
	CacheImplName   string `protobuf:"bytes,3,opt,name=cache_impl_name,json=cacheImplName" json:"cache_impl_name,omitempty"`
	CacheFlags      string `protobuf:"bytes,4,opt,name=cache_flags,json=cacheFlags" json:"cache_flags,omitempty"`
}

func (m *GetBlobstoreConfigResponse) Reset()                    { *m = GetBlobstoreConfigResponse{} }
func (m *GetBlobstoreConfigResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBlobstoreConfigResponse) ProtoMessage()               {}
func (*GetBlobstoreConfigResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetBlobstoreConfigResponse) GetBackendImplName() string {
	if m != nil {
		return m.BackendImplName
	}
	return ""
}

func (m *GetBlobstoreConfigResponse) GetBackendFlags() string {
	if m != nil {
		return m.BackendFlags
	}
	return ""
}

func (m *GetBlobstoreConfigResponse) GetCacheImplName() string {
	if m != nil {
		return m.CacheImplName
	}
	return ""
}

func (m *GetBlobstoreConfigResponse) GetCacheFlags() string {
	if m != nil {
		return m.CacheFlags
	}
	return ""
}

type ReduceCacheRequest struct {
	DryRun      bool   `protobuf:"varint,1,opt,name=dry_run,json=dryRun" json:"dry_run,omitempty"`
	DesiredSize string `protobuf:"bytes,2,opt,name=desired_size,json=desiredSize" json:"desired_size,omitempty"`
}

func (m *ReduceCacheRequest) Reset()                    { *m = ReduceCacheRequest{} }
func (m *ReduceCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*ReduceCacheRequest) ProtoMessage()               {}
func (*ReduceCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReduceCacheRequest) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *ReduceCacheRequest) GetDesiredSize() string {
	if m != nil {
		return m.DesiredSize
	}
	return ""
}

type ReduceCacheResponse struct {
	Success      bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
}

func (m *ReduceCacheResponse) Reset()                    { *m = ReduceCacheResponse{} }
func (m *ReduceCacheResponse) String() string            { return proto.CompactTextString(m) }
func (*ReduceCacheResponse) ProtoMessage()               {}
func (*ReduceCacheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReduceCacheResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReduceCacheResponse) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

type GetSystemInfoRequest struct {
}

func (m *GetSystemInfoRequest) Reset()                    { *m = GetSystemInfoRequest{} }
func (m *GetSystemInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSystemInfoRequest) ProtoMessage()               {}
func (*GetSystemInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type SystemInfoResponse struct {
	GoVersion    string `protobuf:"bytes,1,opt,name=go_version,json=goVersion" json:"go_version,omitempty"`
	Os           string `protobuf:"bytes,2,opt,name=os" json:"os,omitempty"`
	Arch         string `protobuf:"bytes,3,opt,name=arch" json:"arch,omitempty"`
	NumGoroutine uint32 `protobuf:"varint,4,opt,name=num_goroutine,json=numGoroutine" json:"num_goroutine,omitempty"`
	Hostname     string `protobuf:"bytes,5,opt,name=hostname" json:"hostname,omitempty"`
	Pid          uint64 `protobuf:"varint,6,opt,name=pid" json:"pid,omitempty"`
	Uid          uint64 `protobuf:"varint,7,opt,name=uid" json:"uid,omitempty"`
	MemAlloc     uint64 `protobuf:"varint,8,opt,name=mem_alloc,json=memAlloc" json:"mem_alloc,omitempty"`
	MemSys       uint64 `protobuf:"varint,9,opt,name=mem_sys,json=memSys" json:"mem_sys,omitempty"`
	NumGc        uint32 `protobuf:"varint,10,opt,name=num_gc,json=numGc" json:"num_gc,omitempty"`
	NumFds       uint32 `protobuf:"varint,11,opt,name=num_fds,json=numFds" json:"num_fds,omitempty"`
}

func (m *SystemInfoResponse) Reset()                    { *m = SystemInfoResponse{} }
func (m *SystemInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*SystemInfoResponse) ProtoMessage()               {}
func (*SystemInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SystemInfoResponse) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *SystemInfoResponse) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *SystemInfoResponse) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

func (m *SystemInfoResponse) GetNumGoroutine() uint32 {
	if m != nil {
		return m.NumGoroutine
	}
	return 0
}

func (m *SystemInfoResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *SystemInfoResponse) GetPid() uint64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *SystemInfoResponse) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *SystemInfoResponse) GetMemAlloc() uint64 {
	if m != nil {
		return m.MemAlloc
	}
	return 0
}

func (m *SystemInfoResponse) GetMemSys() uint64 {
	if m != nil {
		return m.MemSys
	}
	return 0
}

func (m *SystemInfoResponse) GetNumGc() uint32 {
	if m != nil {
		return m.NumGc
	}
	return 0
}

func (m *SystemInfoResponse) GetNumFds() uint32 {
	if m != nil {
		return m.NumFds
	}
	return 0
}

type GetVersionRequest struct {
}

func (m *GetVersionRequest) Reset()                    { *m = GetVersionRequest{} }
func (m *GetVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetVersionRequest) ProtoMessage()               {}
func (*GetVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type VersionResponse struct {
	GitCommit string `protobuf:"bytes,1,opt,name=git_commit,json=gitCommit" json:"git_commit,omitempty"`
	BuildHost string `protobuf:"bytes,2,opt,name=build_host,json=buildHost" json:"build_host,omitempty"`
	BuildTime string `protobuf:"bytes,3,opt,name=build_time,json=buildTime" json:"build_time,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VersionResponse) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionResponse) GetBuildHost() string {
	if m != nil {
		return m.BuildHost
	}
	return ""
}

func (m *VersionResponse) GetBuildTime() string {
	if m != nil {
		return m.BuildTime
	}
	return ""
}

func init() {
	proto.RegisterType((*GetBlobstoreConfigRequest)(nil), "pb.GetBlobstoreConfigRequest")
	proto.RegisterType((*GetBlobstoreConfigResponse)(nil), "pb.GetBlobstoreConfigResponse")
	proto.RegisterType((*ReduceCacheRequest)(nil), "pb.ReduceCacheRequest")
	proto.RegisterType((*ReduceCacheResponse)(nil), "pb.ReduceCacheResponse")
	proto.RegisterType((*GetSystemInfoRequest)(nil), "pb.GetSystemInfoRequest")
	proto.RegisterType((*SystemInfoResponse)(nil), "pb.SystemInfoResponse")
	proto.RegisterType((*GetVersionRequest)(nil), "pb.GetVersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "pb.VersionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlobstoreService service

type BlobstoreServiceClient interface {
	GetConfig(ctx context.Context, in *GetBlobstoreConfigRequest, opts ...grpc.CallOption) (*GetBlobstoreConfigResponse, error)
	ReduceCache(ctx context.Context, in *ReduceCacheRequest, opts ...grpc.CallOption) (*ReduceCacheResponse, error)
}

type blobstoreServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlobstoreServiceClient(cc *grpc.ClientConn) BlobstoreServiceClient {
	return &blobstoreServiceClient{cc}
}

func (c *blobstoreServiceClient) GetConfig(ctx context.Context, in *GetBlobstoreConfigRequest, opts ...grpc.CallOption) (*GetBlobstoreConfigResponse, error) {
	out := new(GetBlobstoreConfigResponse)
	err := grpc.Invoke(ctx, "/pb.BlobstoreService/GetConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobstoreServiceClient) ReduceCache(ctx context.Context, in *ReduceCacheRequest, opts ...grpc.CallOption) (*ReduceCacheResponse, error) {
	out := new(ReduceCacheResponse)
	err := grpc.Invoke(ctx, "/pb.BlobstoreService/ReduceCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlobstoreService service

type BlobstoreServiceServer interface {
	GetConfig(context.Context, *GetBlobstoreConfigRequest) (*GetBlobstoreConfigResponse, error)
	ReduceCache(context.Context, *ReduceCacheRequest) (*ReduceCacheResponse, error)
}

func RegisterBlobstoreServiceServer(s *grpc.Server, srv BlobstoreServiceServer) {
	s.RegisterService(&_BlobstoreService_serviceDesc, srv)
}

func _BlobstoreService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlobstoreConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobstoreServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlobstoreService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobstoreServiceServer).GetConfig(ctx, req.(*GetBlobstoreConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobstoreService_ReduceCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobstoreServiceServer).ReduceCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlobstoreService/ReduceCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobstoreServiceServer).ReduceCache(ctx, req.(*ReduceCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlobstoreService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BlobstoreService",
	HandlerType: (*BlobstoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _BlobstoreService_GetConfig_Handler,
		},
		{
			MethodName: "ReduceCache",
			Handler:    _BlobstoreService_ReduceCache_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "otaru.proto",
}

// Client API for SystemInfoService service

type SystemInfoServiceClient interface {
	GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type systemInfoServiceClient struct {
	cc *grpc.ClientConn
}

func NewSystemInfoServiceClient(cc *grpc.ClientConn) SystemInfoServiceClient {
	return &systemInfoServiceClient{cc}
}

func (c *systemInfoServiceClient) GetSystemInfo(ctx context.Context, in *GetSystemInfoRequest, opts ...grpc.CallOption) (*SystemInfoResponse, error) {
	out := new(SystemInfoResponse)
	err := grpc.Invoke(ctx, "/pb.SystemInfoService/GetSystemInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemInfoServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/pb.SystemInfoService/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SystemInfoService service

type SystemInfoServiceServer interface {
	GetSystemInfo(context.Context, *GetSystemInfoRequest) (*SystemInfoResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*VersionResponse, error)
}

func RegisterSystemInfoServiceServer(s *grpc.Server, srv SystemInfoServiceServer) {
	s.RegisterService(&_SystemInfoService_serviceDesc, srv)
}

func _SystemInfoService_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemInfoService/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).GetSystemInfo(ctx, req.(*GetSystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemInfoService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemInfoServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SystemInfoService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemInfoServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SystemInfoService",
	HandlerType: (*SystemInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemInfo",
			Handler:    _SystemInfoService_GetSystemInfo_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _SystemInfoService_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "otaru.proto",
}

func init() { proto.RegisterFile("otaru.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x94, 0xcf, 0x72, 0x1b, 0x45,
	0x10, 0xc6, 0x6b, 0x65, 0x47, 0xb6, 0x5a, 0x16, 0xb6, 0xc7, 0xd8, 0x59, 0xd6, 0xc4, 0x98, 0x4d,
	0x15, 0x15, 0x5c, 0x44, 0x4b, 0xcc, 0xcd, 0x27, 0x1c, 0x57, 0x45, 0xf8, 0x00, 0xa4, 0xe4, 0x40,
	0x71, 0x62, 0x6b, 0xff, 0xb4, 0x57, 0x13, 0x76, 0x66, 0x96, 0x99, 0x59, 0x83, 0x72, 0xa0, 0x0a,
	0x1e, 0x01, 0xde, 0x80, 0x87, 0xe0, 0x2d, 0x38, 0xf1, 0x0a, 0xdc, 0x78, 0x09, 0x6a, 0x7a, 0x77,
	0x15, 0x39, 0x8a, 0x4f, 0xda, 0xf9, 0xf5, 0xa7, 0x6f, 0x7a, 0x7a, 0xba, 0x07, 0x86, 0xca, 0x26,
	0xba, 0x1e, 0x57, 0x5a, 0x59, 0xc5, 0x7a, 0x55, 0x1a, 0xbc, 0x5f, 0x28, 0x55, 0x94, 0x18, 0x25,
	0x15, 0x8f, 0x12, 0x29, 0x95, 0x4d, 0x2c, 0x57, 0xd2, 0x34, 0x8a, 0xe0, 0x13, 0xfa, 0xc9, 0x1e,
	0x17, 0x28, 0x1f, 0x9b, 0x9f, 0x92, 0xa2, 0x40, 0x1d, 0xa9, 0x8a, 0x14, 0xab, 0xea, 0xf0, 0x10,
	0xde, 0x9b, 0xa0, 0x7d, 0x5a, 0xaa, 0xd4, 0x58, 0xa5, 0xf1, 0x42, 0xc9, 0x6b, 0x5e, 0x4c, 0xf1,
	0xc7, 0x1a, 0x8d, 0x0d, 0xff, 0xf2, 0x20, 0x78, 0x5b, 0xd4, 0x54, 0x4a, 0x1a, 0x64, 0x27, 0xb0,
	0x9b, 0x26, 0xd9, 0x0f, 0x28, 0xf3, 0x98, 0x8b, 0xaa, 0x8c, 0x65, 0x22, 0xd0, 0xf7, 0x8e, 0xbd,
	0x47, 0x83, 0xe9, 0x76, 0x1b, 0xb8, 0x14, 0x55, 0xf9, 0x55, 0x22, 0x90, 0x3d, 0x84, 0x51, 0xa7,
	0xbd, 0x2e, 0x93, 0xc2, 0xf8, 0x3d, 0xd2, 0x6d, 0xb5, 0xf0, 0x99, 0x63, 0xec, 0x23, 0xd8, 0xce,
	0x92, 0x6c, 0x86, 0x4b, 0x76, 0x6b, 0x24, 0x1b, 0x11, 0x5e, 0x98, 0x7d, 0x00, 0xc3, 0x46, 0xd7,
	0x58, 0xad, 0x93, 0x06, 0x08, 0x91, 0x51, 0xf8, 0x1c, 0xd8, 0x14, 0xf3, 0x3a, 0xc3, 0x0b, 0xc7,
	0xda, 0xe3, 0xb0, 0xfb, 0xb0, 0x91, 0xeb, 0x79, 0xac, 0x6b, 0x49, 0x59, 0x6e, 0x4e, 0xfb, 0xb9,
	0x9e, 0x4f, 0x6b, 0xc9, 0x3e, 0x84, 0xad, 0x1c, 0x0d, 0xd7, 0x98, 0xc7, 0x86, 0xbf, 0xc2, 0x36,
	0xb7, 0x61, 0xcb, 0xae, 0xf8, 0x2b, 0x0c, 0x5f, 0xc0, 0xde, 0x2d, 0xc7, 0xb6, 0x04, 0x3e, 0x6c,
	0x98, 0x3a, 0xcb, 0xd0, 0x98, 0xd6, 0xb2, 0x5b, 0xba, 0x03, 0xa3, 0xd6, 0x4a, 0xc7, 0x02, 0x8d,
	0x49, 0x8a, 0xce, 0x74, 0x8b, 0xe0, 0x97, 0x0d, 0x0b, 0x0f, 0xe0, 0xdd, 0x09, 0xda, 0xab, 0xb9,
	0xb1, 0x28, 0x2e, 0xe5, 0xb5, 0xea, 0x0a, 0xff, 0x67, 0x0f, 0xd8, 0x32, 0x6d, 0x77, 0x7b, 0x00,
	0x50, 0xa8, 0xf8, 0x06, 0xb5, 0xe1, 0x4a, 0xb6, 0x95, 0x1e, 0x14, 0xea, 0xdb, 0x06, 0xb0, 0x77,
	0xa0, 0xa7, 0xba, 0xc2, 0xf6, 0x94, 0x61, 0x0c, 0xd6, 0x13, 0x9d, 0xcd, 0xda, 0x1a, 0xd2, 0xb7,
	0x4b, 0x4b, 0xd6, 0x22, 0x2e, 0x94, 0x56, 0xb5, 0xe5, 0x12, 0xa9, 0x78, 0xa3, 0xe9, 0x96, 0xac,
	0xc5, 0xa4, 0x63, 0x2c, 0x80, 0xcd, 0x99, 0x32, 0x96, 0x2e, 0xe0, 0x1e, 0xfd, 0x79, 0xb1, 0x66,
	0x3b, 0xb0, 0x56, 0xf1, 0xdc, 0xef, 0x1f, 0x7b, 0x8f, 0xd6, 0xa7, 0xee, 0xd3, 0x91, 0x9a, 0xe7,
	0xfe, 0x46, 0x43, 0x6a, 0x9e, 0xb3, 0x43, 0x18, 0x08, 0x14, 0x71, 0x52, 0x96, 0x2a, 0xf3, 0x37,
	0x89, 0x6f, 0x0a, 0x14, 0xe7, 0x6e, 0xed, 0x6e, 0xc1, 0x05, 0xcd, 0xdc, 0xf8, 0x03, 0x0a, 0xf5,
	0x05, 0x8a, 0xab, 0xb9, 0x61, 0xfb, 0xd0, 0xa7, 0xd4, 0x32, 0x1f, 0x28, 0xa7, 0x7b, 0x2e, 0x27,
	0xd2, 0x3b, 0x7c, 0x9d, 0x1b, 0x7f, 0x48, 0xdc, 0xa9, 0x9e, 0xe5, 0x26, 0xdc, 0x83, 0xdd, 0x09,
	0xda, 0xf6, 0xf0, 0x5d, 0xe5, 0x24, 0x6c, 0x2f, 0xc8, 0x52, 0xd5, 0xb8, 0x8d, 0x33, 0x25, 0x04,
	0xb7, 0x8b, 0xaa, 0x71, 0x7b, 0x41, 0xc0, 0x85, 0xd3, 0x9a, 0x97, 0x79, 0xec, 0x8e, 0xd8, 0x56,
	0x6f, 0x40, 0xe4, 0x0b, 0x65, 0x96, 0xc2, 0x96, 0x2f, 0xda, 0xb1, 0x09, 0xbf, 0xe0, 0x02, 0x4f,
	0xff, 0xf3, 0x60, 0x67, 0x31, 0x1f, 0x57, 0xa8, 0x6f, 0x78, 0x86, 0xac, 0x84, 0xc1, 0x04, 0x6d,
	0x33, 0x2d, 0xec, 0xc1, 0xb8, 0x4a, 0xc7, 0x77, 0xce, 0x58, 0x70, 0x74, 0x57, 0xb8, 0xc9, 0x3e,
	0x3c, 0xfe, 0xed, 0x9f, 0x7f, 0xff, 0xe8, 0x05, 0xcc, 0xa7, 0x71, 0xbf, 0x79, 0x12, 0xa5, 0x9d,
	0x30, 0xca, 0x9a, 0x0d, 0x38, 0x0c, 0x97, 0x5a, 0x93, 0x1d, 0x38, 0xc3, 0xd5, 0xee, 0x0f, 0xee,
	0xaf, 0xf0, 0x76, 0x87, 0x8f, 0x69, 0x87, 0x87, 0xe1, 0xd1, 0xea, 0x0e, 0x9a, 0xe4, 0x31, 0x4d,
	0xd6, 0x99, 0x77, 0x72, 0xfa, 0xb7, 0x07, 0xbb, 0xaf, 0xfb, 0xb2, 0x3b, 0xee, 0xf7, 0x30, 0xba,
	0xd5, 0xc5, 0xcc, 0x6f, 0xcf, 0xb4, 0xd2, 0xd8, 0x01, 0x25, 0xb7, 0xda, 0xd9, 0xe1, 0x21, 0xe5,
	0xb0, 0xcf, 0xf6, 0xba, 0x1c, 0x0c, 0x69, 0x22, 0xee, 0xec, 0xbe, 0x03, 0x78, 0x7d, 0xd1, 0x6c,
	0xbf, 0x35, 0xbf, 0x7d, 0xf1, 0xc1, 0x9e, 0xc3, 0x6f, 0x5c, 0x7d, 0x78, 0x44, 0xb6, 0x3e, 0x3b,
	0x78, 0xc3, 0xb6, 0x1d, 0xa1, 0xa7, 0xbf, 0x7a, 0xbf, 0x9f, 0xff, 0xc2, 0xbe, 0x81, 0xc1, 0xd7,
	0xee, 0x89, 0x3d, 0x3e, 0x7f, 0x7e, 0x19, 0x5e, 0xc0, 0xa8, 0x59, 0x54, 0x5a, 0xbd, 0xc4, 0xcc,
	0xb2, 0xa3, 0x99, 0xb5, 0x95, 0x39, 0x8b, 0xa2, 0x82, 0xdb, 0x59, 0x9d, 0x8e, 0x33, 0x25, 0x22,
	0x39, 0x4f, 0x7e, 0xb6, 0x11, 0xbd, 0xcb, 0x01, 0xab, 0x51, 0xaa, 0xcf, 0x89, 0x18, 0x8b, 0x95,
	0x8b, 0x9f, 0xae, 0x3d, 0x19, 0x7f, 0x7a, 0xe2, 0xf5, 0x4e, 0x77, 0x92, 0xaa, 0x2a, 0x79, 0x46,
	0x2f, 0x6e, 0xf4, 0xd2, 0x28, 0x79, 0xb6, 0x42, 0xd2, 0x3e, 0x3d, 0xc4, 0x9f, 0xfd, 0x1f, 0x00,
	0x00, 0xff, 0xff, 0x99, 0xda, 0x84, 0xd4, 0xe7, 0x05, 0x00, 0x00,
}
