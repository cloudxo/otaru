// Code generated by go-bindata.
// sources:
// dist/app.js
// dist/index.html
// dist/nav.js
// dist/styles.css
// dist/util.js
// DO NOT EDIT!

package webui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _appJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xc1\x6e\xdb\x38\x10\xbd\xeb\x2b\x66\x1d\x01\xa4\xb0\x8e\x9c\xc5\xde\x22\xb8\x97\x22\x87\xa2\x3d\xb6\xa7\xa0\xb0\x09\x6a\x24\x33\xa6\x38\x02\x39\x92\x63\x18\xfa\xf7\x82\xb2\xa4\x38\x69\x7b\x22\x39\x1c\xbe\x79\xf3\xde\xd0\x34\x2d\x79\x06\x91\x6f\x9c\xea\xf3\x97\x20\x8a\x64\x0a\x5d\xd2\x35\xa4\xe9\x00\x95\xa7\x26\xde\x77\x6c\xec\x35\x21\xb1\xc8\xa0\x5a\xd3\x7a\xac\xcc\x2b\x6c\x61\x9f\x5e\x4e\xc6\x95\x74\xca\x4b\xd2\x5d\x83\x8e\x73\x4b\x5a\xb1\x21\x97\x93\x37\xb5\x71\xc3\x46\xb5\x66\x5f\x24\x52\x66\xb0\xfd\x04\x97\x04\x40\x93\x0b\x37\x30\x3b\xe3\xda\x8e\x61\x0b\xa9\x5c\xdd\x2d\xd1\x55\x56\x24\xf0\x31\x29\xef\x95\xed\x10\xb6\x6f\xf1\x3f\x25\xa9\xb2\x7c\xea\xd1\xf1\x37\x13\x18\x1d\x7a\xb9\xd2\x07\xe5\x6a\x5c\xad\x01\xfb\x99\x04\xbc\xeb\x03\xfb\x2b\x74\x84\x1b\xb2\x22\x19\x32\x99\x15\x49\x72\x65\xea\x5b\x1d\x4b\x86\xb3\xd3\x20\xd1\x95\x2d\x19\xc7\x1f\xba\xf1\x18\x5a\x72\x61\xe4\x76\x52\x86\x61\x92\xa5\x42\xd6\x07\x39\xd6\xbb\xad\xf8\x2f\xcc\x38\xeb\xe9\xee\xd2\x50\x89\x8f\x20\x34\xf9\x20\xd6\xa0\x95\x3e\xc4\xa3\x47\x4b\xaa\x14\xc3\xa8\x86\xa9\x40\xfe\x33\x57\xca\xe9\x98\x4d\x9d\xf0\xc1\xd3\x09\x1c\x9e\xe0\xc9\x7b\xf2\x72\x3f\x56\x85\x4a\x19\x8b\xe5\x23\xa4\x97\xe5\x4d\x60\xc5\x5d\x18\xf6\x23\xdc\x90\x00\x78\xe4\xce\xbb\x89\xf3\x92\xf6\x12\xc8\x45\x01\x86\x45\x83\xae\x2d\x15\xe3\x17\xc7\xe8\x7b\x65\x61\x0b\xff\x3f\x3c\x3c\x14\xd3\x25\x7b\x53\xd7\xe8\x7f\x8c\x39\x6f\x52\x2d\x12\xb1\x3f\x4f\x4c\x17\xb1\x3a\xcb\x8b\x54\xbe\xd5\x72\xb5\xe9\xff\xdb\x84\x73\x60\x6c\x36\xc6\x55\x14\xed\xbf\x79\x51\x19\x6b\xbf\xe2\x39\xc0\x16\x9e\x45\x4d\xbb\x1e\x7d\x30\xe4\xc4\x1a\x04\x45\xb9\x84\xf2\xfa\x10\x57\xd7\x35\xbb\x9a\x3c\x75\x6c\x1c\xc6\xc0\x81\x02\x3b\xd5\x8c\xfb\xd6\x94\x71\xe9\xae\x4b\x83\xcd\x4e\x59\x4b\x7a\x3e\x84\x73\x58\x20\xf4\xbc\xab\xca\x20\x7e\x16\x23\x95\x8a\x3c\xc8\xf8\x03\x8e\x40\xd5\x42\x69\x36\x01\x20\x95\xfb\xbb\x80\xcc\xc6\xd5\xe1\x3e\xbd\x1c\x87\x7d\x96\x33\xbe\xf2\x67\x72\x8c\x2e\xf6\x7b\x6d\xfc\xf9\x38\x01\x46\x03\x06\xd0\x2a\x9a\x25\x31\xbb\xd1\x88\x2c\xe6\x96\x6a\x89\x8b\x51\xd1\xfb\x54\x8a\x3c\xa0\x8e\xbf\xeb\xfe\x7e\xae\x24\xb2\x5c\x5b\x15\x42\x9c\xf6\x5c\x93\x63\x65\x5c\x90\xe2\x26\xcf\xa2\x66\x2c\x45\x96\x8d\xf0\xd3\x60\x06\xe4\xef\xa6\x41\xea\x58\xbe\xb3\x6f\xfd\xc1\xea\x38\x05\xc9\xdf\x0a\xff\xf6\xd3\x44\x38\xd0\x29\xda\x82\x6f\xde\xdf\x80\x8f\x33\x95\x15\xc9\xaf\x00\x00\x00\xff\xff\x9d\x23\xda\x50\x7c\x04\x00\x00")

func appJsBytes() ([]byte, error) {
	return bindataRead(
		_appJs,
		"app.js",
	)
}

func appJs() (*asset, error) {
	bytes, err := appJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.js", size: 1148, mode: os.FileMode(420), modTime: time.Unix(1511424900, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x96\xcf\x4e\xdc\x30\x10\xc6\xef\x79\x0a\xd7\x9c\x43\xc4\x15\x39\x96\x28\x14\xca\xa1\x02\x89\xd2\xaa\xa7\xc8\x71\x66\x13\x77\x1d\x3b\xb2\x27\x29\xdb\xa7\xaf\xf2\xb7\xab\x0a\x5a\x36\x8b\x7b\x5a\xaf\x33\xdf\xe7\x5f\xc6\x9e\x71\xd8\xbb\xab\xbb\xcb\xcf\xdf\xee\x3f\x90\x0a\x6b\xcd\x23\x86\x0a\x35\xf0\x3b\x14\xae\x25\x5f\x21\x7f\xbc\x3d\x27\xb7\x46\xa1\x12\x5a\xfd\x54\xa6\x64\xc9\x18\x10\x31\xad\xcc\x96\x38\xd0\x29\xf5\xb8\xd3\xe0\x2b\x00\xa4\xa4\x72\xb0\x99\x67\x4e\xa5\xf7\x94\x47\x2c\xb7\xc5\x8e\x47\xcc\x88\x8e\x48\x2d\xbc\x4f\xa9\x11\x1d\xe5\x11\x21\xac\x3a\xdb\x9b\xca\x32\x85\x50\x93\x65\x14\xc7\xda\x96\x96\x8e\x30\x2c\xa9\xce\x06\x89\x78\x41\x81\x22\x9f\x97\x3f\xc9\xb5\xcd\x3d\x5a\x07\x94\x2f\x43\x96\x88\x57\xeb\x3d\x20\x2a\x53\x7a\xca\xe7\xd1\xa0\x66\x89\x11\x1d\x8f\x98\x07\x89\xca\x9a\xd9\x68\xfe\x3b\xfd\xc6\xf1\xde\xf2\xfd\x8a\x85\x5a\x5e\x7c\xdb\x75\x0a\x7e\x0c\xd3\xcf\x3d\x18\x79\xa6\xc7\x84\x30\xdf\x08\xf3\x67\x84\x16\x39\x68\xca\xaf\xb5\x28\xfd\x39\x4b\xfa\x90\xbf\xc6\x77\x42\xb7\x40\x89\x2a\x52\xba\x70\xc5\x9b\x5e\x4d\x79\xbc\xaf\x67\x49\xa1\xba\x37\x20\x7b\x2f\xe4\x16\x4c\xb1\x9a\x2d\x1f\xf5\x99\xaa\x1b\x9d\x19\x51\x43\x20\xce\x4b\x21\x2b\x58\x4d\x29\x7b\xf5\xff\x61\x7c\xf4\xa2\x84\x07\x14\xe8\x09\x18\x74\x0a\xd6\xef\x7b\xdb\x5b\x65\xbe\xf7\xca\x26\xaf\x90\xe4\xd3\x51\xf8\x02\xce\xf7\x05\x72\x2c\xbd\xcc\xbb\x7f\x51\x4f\x03\x96\x4c\xc5\xf8\x8a\x6a\xfd\x5d\xec\xc7\x15\xeb\xf0\xe2\xcf\x67\x83\x6c\xac\x4b\xa9\x68\x54\xe3\x60\xa3\x9e\xa6\x96\x46\x2e\xee\x6f\xc9\x03\xb8\x0e\xdc\x39\x61\xc9\x10\xba\xb8\x29\xd3\xb4\xf8\x42\x56\x70\xd7\x40\x4a\x11\x9e\x70\xcc\xd0\x9e\xf1\x9b\xee\xe1\x8d\x25\xdd\xb8\x75\x07\x6e\xd9\x9c\xd2\xb8\xb4\xd9\xe4\x10\xe8\x98\xdd\x3d\xac\x45\xb3\xa1\x4e\xfe\x85\x93\xd5\x5a\x28\xe1\x64\x15\x08\xeb\x84\xdc\x58\x67\x5b\x54\xe6\xe0\x0a\x5c\xf0\x4c\x5b\x67\xe5\xec\x12\x88\xf3\xa3\xf5\xd8\x77\xd4\xb5\x8c\xd5\xa4\x0f\x84\x77\xaf\x0e\xbd\xd9\x16\xb2\x46\x15\x81\xa0\x1e\xd7\x43\xb5\xc1\xa0\x3e\x41\x4d\x84\xd6\x56\x0a\x84\xd5\x78\x35\xd4\xd9\x60\x12\x10\xd2\xef\x7c\xff\x15\x28\x6d\x5d\x2b\x3c\x92\xd5\xef\x42\xb5\x95\x9b\x4b\x22\x6d\x6b\xf0\xa8\xda\x0d\x95\xc6\x13\x72\x7d\x75\x54\x57\xd9\x14\x07\x5d\xe9\xd2\xa9\x06\xa7\x7b\xb0\xb6\x45\xab\x81\x12\xef\x64\x4a\x4f\x13\xd1\x34\xa7\xdf\x3d\xe5\x2c\x19\xa3\x78\xf4\x2b\x00\x00\xff\xff\xea\x70\xa2\x24\xe4\x0c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3300, mode: os.FileMode(420), modTime: time.Unix(1511357658, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _navJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4d\x8b\xdb\x30\x10\xbd\xeb\x57\x4c\xbd\x06\x4b\xd4\x71\xe8\xd9\xb8\x50\xca\x42\x0b\xa5\x97\x1e\xb7\xdb\x5d\x59\x9a\xac\xd5\xca\x52\xb0\xc6\x09\x25\xe4\xbf\x17\x25\x72\xe2\x24\x5b\x7a\xe8\x21\xa0\x3c\xe9\xcd\xc7\x9b\x37\x36\xfd\xda\x0f\x04\xbb\xbc\x84\x3c\xdf\xc3\x6a\xf0\x3d\x14\xd5\x72\x24\x63\xab\x9f\xa1\xa8\x19\xcb\x73\x9e\x55\x4e\x6e\x9e\x9e\x0c\x61\x9f\x89\x6a\xe5\x87\x7b\xa9\x3a\xde\xa3\x1b\x0f\x18\x34\xef\x61\xc7\x00\x4e\x40\x25\xb5\xbe\xdf\xa0\xa3\x2f\x26\x10\x3a\x1c\x78\xa6\xac\x51\xbf\xb2\x12\x70\x33\xbd\x06\x58\x2e\xa1\x33\x81\xfc\xf0\xbb\x5a\x8f\xa1\xfb\x46\x92\x90\xbb\xd1\xda\x12\xb4\x57\x63\x8f\x8e\x2a\x32\x64\xb1\x9c\x85\x7e\x41\xfa\x40\x34\x98\x76\x24\xe4\x59\x37\xe0\x2a\x13\xa2\x3e\xc4\x1b\x90\xc6\xc1\xc1\x4a\xda\x80\x35\x30\x80\xbd\xa8\x59\xfc\x31\xe5\x5d\x20\xd8\x48\x6b\xf4\x47\xef\x08\x1d\x05\x68\xe0\x81\x01\x14\xad\xf5\x6d\xac\x01\x8b\x32\xfe\x0d\x48\x64\xdc\x4b\x28\x4a\xf6\x58\x33\x66\x91\x20\x74\x7e\x9b\x58\xd0\x00\x17\x53\x03\xf1\x4e\x1d\xf1\xcf\x1a\x1a\xc8\xb2\x3a\xa1\x7d\x3c\x98\x15\xf0\x1e\x1a\xd8\x1a\xa7\xfd\xb6\xb2\x5e\x49\x32\xde\x55\x9d\x0c\x5d\xd5\x4b\x52\x1d\x5f\xfe\xb8\xe3\xdf\xb7\x6f\x45\xbe\x14\x22\x69\x32\x0f\xd8\x3f\xbc\x7b\x8c\x91\xf6\x2c\x85\x7b\x73\xd1\x41\x65\x9c\xb2\xa3\xc6\xc0\x4f\x24\x21\x66\x42\xd4\x91\x76\xec\x3c\x3d\xf8\x24\x43\x07\x0d\x3c\xdf\xe5\xbb\x13\x65\xff\x1c\x53\x9c\x87\x4c\xb2\x9d\xcd\x98\x64\x7b\x9e\x57\x2c\x81\x64\xfb\xea\x08\xa0\x69\x9a\x79\x9a\xa9\x1f\x80\xc8\x50\x56\x86\x10\xcd\x10\x9d\xc1\xb3\x93\x9b\x16\x8b\x80\x16\x15\xa1\xce\xd2\x0c\xf7\x80\x36\xe0\x5f\xc8\x03\xf6\x7e\x83\xff\xe0\xa7\xb9\x4f\xad\x07\x54\x51\xf6\xaf\x88\xda\x62\x6c\x3e\x01\x8b\xc5\x95\x08\x93\x0a\xe9\x7e\x26\x42\x42\x2e\x85\x48\xe0\xac\xba\x18\x4d\x1a\x17\xf8\x45\x4a\x71\x56\xe2\x96\x72\x50\xe3\x54\xd0\x75\x2f\x67\x86\x36\x61\x1d\x1d\x73\x58\x2a\xee\x70\x0b\xc7\x53\x11\xbd\xe9\x0a\xf1\xba\x78\xb7\xf9\x26\x01\xff\x27\x65\x67\xb4\xc6\x59\xce\x69\xcf\x6a\xc6\x92\xd5\x6f\xb7\x3f\x7a\x5e\x75\xd2\xbd\xe0\xc5\x27\x60\xb6\x59\xfc\xb0\xaa\xec\x0a\xf9\x13\x00\x00\xff\xff\x49\x1e\x63\x20\x9e\x04\x00\x00")

func navJsBytes() ([]byte, error) {
	return bindataRead(
		_navJs,
		"nav.js",
	)
}

func navJs() (*asset, error) {
	bytes, err := navJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nav.js", size: 1182, mode: os.FileMode(420), modTime: time.Unix(1511416844, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\xa3\x30\x10\xc6\xef\x3c\xc5\x48\x7b\xd9\xae\xe2\x2a\xe4\x5f\x5b\xe7\xb4\x97\xbe\x46\x65\xec\x31\xb1\x62\x3c\xc8\x38\x84\x6c\xb5\xef\xbe\xc2\x4d\x02\x26\x6d\xf6\xd4\x23\xfc\x3c\xdf\x7c\x7c\x33\x86\x7b\xa2\x00\xef\x19\x00\x63\x95\x30\x8e\xe9\x92\x49\xb2\xe4\x39\xfc\xd0\x5a\xca\xcd\x66\x1b\x99\x12\x7e\x9f\x32\xb1\xbe\x30\x6b\xca\x5d\x48\xa1\x96\x88\x1f\x50\x52\x55\x5f\x81\xd8\x68\x8d\x6a\x04\xa2\xec\x85\x2e\x95\x94\xcf\x4f\xdb\xc1\x4b\x91\x48\xce\x65\x31\xf2\x32\x62\x2f\x2f\xcf\xfa\x49\x0c\x6c\x31\x86\xeb\xd5\xea\x75\xb5\x1c\xe0\x72\x0c\x17\x79\xfe\x9a\xff\xde\x66\x7f\xb3\xac\x20\x75\x9a\x81\x32\xed\x0c\xea\x19\x34\xb5\x70\x33\x30\xae\x3e\x84\x19\xec\xf2\x3e\x9f\x4a\xf8\xd2\x38\x0e\xf3\x5e\xab\x16\x4a\x19\x57\xc6\xa7\x73\x71\x0c\xb1\x10\x72\x5f\x7a\x3a\x38\x75\xe9\xd1\x0a\xff\x73\xf2\x39\x0f\xb1\xe6\x57\x2c\xd0\xe4\x02\xd3\xa2\x32\xf6\xc4\xa1\x22\x47\x4d\x2d\x64\x8c\x2e\x92\xc6\xfc\x41\x0e\xf9\xaa\xee\x62\xcd\xa3\x13\x6d\x2c\x53\xa6\xa9\xad\x38\x71\xd0\x16\xbb\x2d\x64\x00\xb7\xed\xf4\xd0\xee\x6b\x63\x49\x96\x0f\xd7\x26\x6f\x6f\x26\x60\x95\xb6\x2a\x2c\xc9\xfd\x36\xcb\x00\x76\xd8\x4f\x9c\xc3\x62\xde\xfb\x02\xb0\xc6\x21\x9b\xbe\xbc\x46\xb4\xae\x3b\xc8\xcf\x2f\x03\x76\x81\x29\x94\xe4\x45\x30\xe4\x38\x38\x72\x18\x35\xbf\xc3\x3f\x63\x96\x4a\x1a\x72\x3e\x9e\x2d\x16\x64\xd5\xff\x44\x17\x77\x54\x1b\xb4\x28\x03\xaa\xaf\x95\x13\xb9\xc9\xa6\xdf\xfd\x9e\x4f\x16\xe5\xb1\x41\xd9\x87\x95\x4e\xe3\x1a\xdc\x38\xe7\xe4\xfc\xc4\xe7\x74\x8e\xfd\xc9\x7d\xdb\x1a\x3c\xc2\x7b\x36\x7a\xfa\x6c\xf4\xd7\x2d\xbb\x59\xca\xdb\x65\x48\xe6\x1e\x2f\x4b\x41\x5e\xa1\x67\x05\x85\x40\x15\x87\xbc\xee\xa0\x21\x6b\xd4\x9d\x11\x8e\xad\xf0\x1d\xb5\xe8\xef\x5e\xaf\xf4\x0f\x34\xd1\xb0\xa2\x40\x1b\xcb\x8f\x46\x85\x1d\x87\xe5\xbc\xb7\x0a\xc9\xa1\x56\xd8\x03\x7e\xcc\xd3\x62\xc7\x4a\x4f\x47\x0e\x79\x2f\xf4\x2f\x00\x00\xff\xff\x96\xc3\x14\x56\x22\x05\x00\x00")

func stylesCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesCss,
		"styles.css",
	)
}

func stylesCss() (*asset, error) {
	bytes, err := stylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.css", size: 1314, mode: os.FileMode(420), modTime: time.Unix(1511095962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _utilJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\x2b\x2e\x51\x50\x51\xb0\x55\x48\xc9\x4f\x2e\xcd\x4d\xcd\x2b\xd1\x2b\x2c\x4d\x2d\xaa\x0c\x4e\xcd\x49\x4d\x2e\xc9\x2f\xd2\x4b\xca\xcc\x4b\xd1\x80\xc9\x69\x5a\x73\x41\x35\xe0\xd6\xe1\x98\x93\x83\xa1\x89\x2b\xb5\xa2\x20\xbf\xa8\x44\xa1\x5a\x45\x47\x41\x45\xa5\xd6\x9a\x0b\x10\x00\x00\xff\xff\xc5\xa8\x54\x18\x77\x00\x00\x00")

func utilJsBytes() ([]byte, error) {
	return bindataRead(
		_utilJs,
		"util.js",
	)
}

func utilJs() (*asset, error) {
	bytes, err := utilJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "util.js", size: 119, mode: os.FileMode(420), modTime: time.Unix(1511091455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app.js": appJs,
	"index.html": indexHtml,
	"nav.js": navJs,
	"styles.css": stylesCss,
	"util.js": utilJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app.js": &bintree{appJs, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"nav.js": &bintree{navJs, map[string]*bintree{}},
	"styles.css": &bintree{stylesCss, map[string]*bintree{}},
	"util.js": &bintree{utilJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

