// Code generated by go-bindata.
// sources:
// dist/api.js
// dist/app.js
// dist/index.html
// dist/nav.js
// dist/styles.css
// dist/util.js
// DO NOT EDIT!

package webui

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _apiJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\xcf\x8e\x9b\x30\x10\xc6\xef\x7e\x8a\x69\x8a\x84\x51\x11\x7b\x5f\x94\x5e\xaa\x3d\xb5\xa7\x5e\xab\xaa\x58\x66\xd8\x78\x63\x3c\x96\x3d\x84\xac\x90\xdf\xbd\x02\x12\x92\x6e\x7a\xc4\x7c\xfe\xfe\xfc\x64\xd3\x7b\x0a\x0c\x53\x96\xa0\x0b\xd4\x43\x5e\x3d\x0d\x6c\x6c\xf5\x16\xf3\x5a\x08\x8b\x0c\xca\x1b\x1f\xb0\x33\x67\xd8\x43\x93\x4d\xa3\x71\x2d\x8d\x55\x4b\x7a\xe8\xd1\x71\x65\x49\x2b\x36\xe4\x2a\x0a\xe6\xd5\xb8\xf4\xa4\xbc\x69\x6a\x21\x65\x01\xfb\xaf\x30\x09\x00\x4d\x2e\xde\xd9\xfc\x31\xce\x0f\x0c\x7b\xc8\xe4\xee\xf3\x76\xba\x2b\x6a\x01\x1f\x45\xd5\x49\xd9\x01\x61\x7f\x3b\xff\x9f\x48\xb5\xed\xcb\x09\x1d\xff\x30\x91\xd1\x61\x90\x3b\x7d\x50\xee\x15\x77\x25\xe0\xe9\x5a\x02\xfe\xd9\x81\xa7\xd5\x7a\xb6\x4b\x45\x2d\x52\x21\x8b\x5a\x88\xb5\x69\xf0\x7a\x8e\x8c\xef\x4e\x83\x44\xd7\x7a\x32\x8e\x3f\xac\x09\x18\x3d\xb9\xb8\x74\x1b\x95\x61\xb8\x60\xe9\x90\xf5\x41\x2e\x79\xf7\x89\x5f\xe0\xea\x53\x5e\xfe\x4d\x3d\xb5\xf8\x0c\xb9\xa6\x10\xf3\x12\xb4\xd2\x87\xf9\x33\xa0\x25\xd5\xe6\x69\xa1\x61\x3a\x90\x9f\xae\x49\x15\x1d\x8b\xcb\x12\x3e\x04\x1a\xc1\xe1\x08\x2f\x21\x50\x90\xcd\x92\x0a\x9d\x32\x16\xdb\x67\xc8\xa6\xed\x4e\x64\xc5\x43\x4c\xcd\x62\x97\x04\x40\x40\x1e\x82\xbb\x74\xde\x64\x6f\x91\xdc\x0c\x20\x6d\x0c\x3a\x63\xed\x4f\xec\x89\xf1\x1b\x39\x46\xc7\x8f\x44\x4a\x58\xc7\x95\x8b\xf8\x3b\xbe\xc7\x47\x46\x83\xe5\x8d\x50\xf0\xfa\x46\xb3\x16\x02\xa0\xa3\x00\x72\x7e\x62\x47\xa0\xee\xce\x65\x5d\x99\xc9\x26\x9b\xd6\x88\x94\x4d\xc7\xd4\x14\x15\xe3\x99\x6f\x7d\x56\xff\x5f\xc7\xdf\xeb\xb8\xb9\x3c\x9e\xd7\xd7\x1c\xbc\x2e\x1f\x37\xa4\x5a\xfc\x0d\x00\x00\xff\xff\x67\xab\x01\x9c\xef\x02\x00\x00")

func apiJsBytes() ([]byte, error) {
	return bindataRead(
		_apiJs,
		"api.js",
	)
}

func apiJs() (*asset, error) {
	bytes, err := apiJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "api.js", size: 751, mode: os.FileMode(420), modTime: time.Unix(1511617327, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _appJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xc1\x8e\xd3\x30\x10\xbd\xe7\x2b\x86\x72\xb0\x23\x85\xb6\x88\x63\x55\x2e\x88\x03\x12\x27\x16\x4e\x08\x45\xae\x33\x49\x0c\xb6\x27\xb2\x27\xa9\xaa\x55\xff\x1d\x39\x69\x9a\x96\x1e\x59\x69\x73\xf0\x8c\x27\x6f\x9e\xed\xf7\xc6\xb8\x8e\x02\xc3\xb3\x26\xcf\xe8\xf9\x09\x35\x1b\xf2\x05\x98\x78\x49\x9f\xd0\xa2\x66\xac\xce\x50\x07\x72\x20\xd6\x1b\xaf\x86\xf5\xef\x28\x76\xd9\xdc\x1b\x3a\x5d\x40\x6d\xac\xfd\x86\x8e\x18\x3f\x4d\x54\x4b\x83\xea\xcc\xd8\x00\x59\xa6\xc9\x47\x86\xbe\xab\x14\xe3\x17\xcf\x18\x06\x65\x61\x0f\x1f\xb6\xdb\xed\x2e\xcb\xa4\xcc\x61\xff\x11\x9e\x33\x80\x09\xc8\xc1\x34\x0d\x86\x1f\x23\x1e\xf6\xa0\xe2\xc9\x6b\x58\x50\x00\xa6\x06\xf9\xe6\xe1\xb2\x52\x1c\x2c\x1d\x22\x53\x40\x91\xe7\x23\x10\x20\x20\xf7\xc1\xef\xb2\x71\xcb\xe1\x74\x61\x00\x50\x47\x65\xf8\xf1\x01\x72\xb5\x19\xde\x6f\xae\x44\x1b\x4d\xbe\x36\xcd\xaa\x80\xd5\xdb\x6b\xf1\xdd\xaa\x80\x9f\x17\x9a\xf4\x89\x83\xd2\x7f\xd0\x57\xa5\x71\x9d\x2d\xbd\x72\x28\x8a\xa5\x58\x5b\xd5\x44\x51\xdc\xe2\xb5\xd2\x2d\xde\xa3\xa7\xd2\x84\xfd\x95\xef\x46\xf4\x19\xb4\x62\xdd\x82\xc4\xfc\x7a\xed\x24\x11\x59\x5c\x5b\x6a\x24\xce\xb8\x71\x3d\x1a\x5f\xd1\x71\x1d\x91\xbf\x1b\x87\xd4\xb3\xbc\x13\xb2\xf8\xc7\x80\xb1\xf7\x3c\x89\x7e\x33\x04\x77\x22\xae\x55\x55\x7d\x1e\xd0\xf3\x57\x13\x19\x3d\x06\x29\x62\x4b\x47\x2f\x0a\xc0\xc5\x8d\xbb\x63\xe4\xc4\x9b\xef\xb2\x73\x9e\xf2\x97\xb4\x37\x22\xb3\xf1\x4d\xfc\x5f\x77\xe3\x29\x32\xba\x8d\xf1\x35\x8d\xc6\xce\xbc\x0f\xbe\x36\x54\x0e\x18\xa2\xa1\xf4\x62\x41\x31\xad\x2a\xe8\x36\x45\xdf\xbb\xb2\xa1\x40\x3d\x1b\x3f\x3a\xd8\x52\xe4\xd9\xcd\xce\x54\x29\xf4\x29\xdc\x12\x3a\x74\xa5\xb2\x96\x74\xfa\x9b\x36\xf1\x14\xaf\x64\x7a\xce\xea\xea\xb5\x67\x60\x51\xfa\x05\x46\xe0\x6f\x00\x00\x00\xff\xff\xee\x65\xc1\x5e\x6e\x04\x00\x00")

func appJsBytes() ([]byte, error) {
	return bindataRead(
		_appJs,
		"app.js",
	)
}

func appJs() (*asset, error) {
	bytes, err := appJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "app.js", size: 1134, mode: os.FileMode(420), modTime: time.Unix(1511618151, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcf\x6f\xdb\x20\x14\xc7\xef\xfe\x2b\x18\x3d\x3b\x56\xaf\x11\x46\xea\xd2\x35\xcb\x61\x4a\xa4\xae\x9a\x76\xb2\x30\x7e\xb1\x59\x30\x58\x80\xbd\x66\x7f\xfd\xe4\x9f\x8b\xa6\xb6\x6a\xec\x72\x0a\xc1\xef\xfb\xe5\xc3\x33\xef\x61\xf2\xe9\x7e\xbf\xf9\xfe\xf3\xf0\x05\x15\xae\x94\x34\x20\x4e\x38\x09\x74\xef\x98\xa9\xd1\x0f\x48\x9f\x76\x6b\xb4\x53\xc2\x09\x26\xc5\x1f\xa1\x72\x12\xf5\x01\x01\x91\x42\x9d\x90\x01\x19\x63\xeb\xce\x12\x6c\x01\xe0\x30\x2a\x0c\x1c\xc7\x99\x15\xb7\x16\xd3\x80\xa4\x3a\x3b\xd3\x80\x28\xd6\x20\x2e\x99\xb5\x31\x56\xac\xc1\x34\x40\x88\x14\xb7\x17\x53\x49\x22\x1c\x94\x68\x1a\x85\xa1\xd4\xb9\xc6\x3d\x0c\x89\x8a\xdb\x4e\xc2\x5e\x51\x38\x96\x8e\xcb\xdf\xa4\x52\xa7\xd6\x69\x03\x98\x4e\x43\x12\xb1\x77\xeb\x2d\x38\x27\x54\x6e\x31\x1d\x47\x9d\x9a\x44\x8a\x35\x34\x20\x16\xb8\x13\x5a\x8d\x46\xe3\xdf\xe1\x37\x0c\x2f\x96\x6f\x57\xcc\xc4\xb4\xf1\x53\xd3\x08\xf8\xdd\x4d\xbf\xf4\xa0\xe7\x19\x1e\x23\x44\x6c\xc5\xd4\xff\x11\x92\xa5\x20\x31\xfd\xcc\xf8\x09\x54\xb6\x26\x51\x1b\xf4\xa6\xa2\x61\xb2\x06\x8c\x44\x16\xe3\x89\x2c\x4c\x7b\x7d\x22\xca\x4a\x26\x8a\x95\x80\x69\x78\xe9\x45\xa2\x4c\x34\x1f\xc7\x89\x1e\x24\xcb\xed\x62\xda\x63\xeb\xe2\x89\x74\xc3\x78\x01\xb3\x09\x79\xab\xf6\x9e\xcd\x8e\x71\x61\x2e\x7b\xd2\x37\x33\x39\x0c\x48\x34\x1c\xe9\x77\x9c\xf9\x7f\x25\xb3\xec\xc8\x77\x1b\x7d\x79\xf7\xe8\xa8\x4d\x8c\x59\x25\x2a\x03\x47\xf1\x3c\x34\x06\x74\x77\xd8\xa1\x47\x30\x0d\x98\x35\x22\x51\x17\x3a\xb9\x09\x55\xd5\xee\x95\xac\xb8\x73\x05\x31\x76\xf0\xec\xfa\x0c\x5d\x18\x7f\xe8\x3b\xdb\x6a\xd4\x80\xb1\x42\xab\x2b\x5f\xd9\x98\xd2\x30\xd7\xc9\xe0\xe0\xe9\x58\xed\x1f\xe7\xa2\x69\x5f\xd5\x78\x67\x78\x31\x17\x8a\x19\x5e\x78\xc2\xba\x41\x5b\x6d\x74\xed\x84\x82\x6b\x2b\x70\xc2\x53\x75\x99\xe4\xa3\x8b\x27\xce\xaf\xda\xba\xb6\x0f\xcd\x65\x2c\x06\xbd\x27\xbc\x83\xb8\xf6\xe6\x9a\xc8\x2a\x91\x79\x82\x7a\x9a\x0f\x55\x7b\x83\xfa\x06\x25\x62\x52\x6a\xce\x1c\xcc\xc6\x2b\xa1\x4c\x3a\x13\x8f\x90\xf6\x6c\xdb\x6f\x29\xae\xcb\x52\xb8\x85\xac\xf6\xec\xab\xad\x6c\x37\x88\xeb\x5a\xb9\x45\xb5\xeb\x2b\x8d\x37\xe8\xe1\x7e\x51\x57\x39\x66\x57\x5d\xe9\xdc\x88\xca\x0d\xf7\x60\xa9\xb3\x5a\x02\x46\xd6\xf0\x18\xaf\x22\x56\x55\xab\x5f\x16\x53\x12\xf5\x51\x34\xf8\x1b\x00\x00\xff\xff\xa1\xe9\x90\x5f\x2a\x0c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3114, mode: os.FileMode(420), modTime: time.Unix(1511617871, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _navJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x55\x41\x6f\xdb\x3c\x0c\xbd\xfb\x57\xf0\x73\x0d\x58\xc6\xe7\x2a\xd8\x75\x86\x07\x0c\x5b\x81\x15\xe8\xb6\x43\x8f\x5d\xd7\x28\x16\x53\x6b\x93\xa5\x42\xa2\x93\x0d\x41\xfe\xfb\x20\x47\x4e\x9c\x26\xdd\x30\xec\x10\x20\xa6\x45\xf2\xbd\xa7\x47\x5a\x75\x4f\xd6\x11\x6c\xb2\x12\xb2\x6c\x0b\x4b\x67\x3b\xc8\xf9\xac\x27\xa5\xf9\x37\x9f\x57\x49\x92\x65\x2c\xe5\x46\xac\x1e\x1e\x14\x61\x97\x16\x7c\x69\xdd\x95\x68\x5a\xd6\xa1\xe9\x87\x18\xd4\x6f\x60\x93\x00\xec\x03\x5c\x48\x79\xb5\x42\x43\x37\xca\x13\x1a\x74\x2c\x6d\xb4\x6a\xbe\xa7\x25\xe0\x6a\x3c\x0d\x30\x9b\x41\xab\x3c\x59\xf7\x93\x3f\xf5\xbe\xbd\x25\x41\xc8\x4c\xaf\x75\x09\xd2\x36\x7d\x87\x86\x38\x29\xd2\x58\x4e\x4a\x3f\x22\xbd\x25\x72\x6a\xd1\x13\xb2\xb4\x75\xb8\x4c\x8b\xa2\x1a\xea\x39\xa4\xde\x19\x58\x0a\xed\xb1\x82\x04\x60\x5b\x54\x49\xf8\x25\x8d\x35\x9e\x60\x25\xb4\x92\xef\xac\x21\x34\xe4\xa1\x86\xbb\x04\x20\x5f\x68\xbb\x08\x18\x30\x2f\xc3\xa3\x47\x22\x65\x1e\x7d\x5e\x26\xf7\xfb\xc4\x66\x97\x73\x8b\x0d\x29\x6b\xa0\x1e\x03\xd7\x72\x24\xa3\x96\xc0\xfe\x3b\xaa\xcf\x95\x69\x74\x2f\xd1\xb3\xfd\xe1\xa2\x18\x60\x52\xeb\xec\x1a\x0c\xae\xe1\xca\x39\xeb\xd8\xfc\xda\x0c\x99\x93\xaa\x69\xb6\xd9\x3f\x6c\xd3\x79\xa0\xb0\xa7\x97\xb1\x39\xf7\x3b\x24\x97\x97\xd3\x73\xf3\x22\xd9\x56\x11\xb1\xf2\x11\xec\x2d\x6a\x6c\x08\xe5\x33\xd0\x09\x3c\x23\x35\x41\xc9\x1b\x2d\xbc\x0f\x57\xc7\x43\x50\x28\xe3\x59\xbe\xef\xe8\x63\xc1\x3c\x80\xd2\x48\xe0\x5b\xbb\x8e\xa4\xa1\x06\x56\x8c\x92\x84\x77\x93\x96\x90\xa6\x55\x8c\x76\x55\x54\xac\x83\x1a\xd6\xca\x48\xbb\xe6\xda\x36\x22\x34\xe0\xad\xf0\x2d\xef\x04\x35\x2d\x9b\x7d\xbd\x60\x5f\xd6\xff\x17\xd9\xac\x28\xa2\x65\xa6\x05\xbb\xbb\x57\xf7\xa1\xd2\x36\xf9\xcb\x0b\xd8\x09\x39\x68\x7a\x74\xbf\x1f\x84\x6f\xa1\x86\xf9\xc5\x91\xaa\xa1\xc5\x61\x06\x48\x2c\x26\x23\x40\x62\x71\xb0\x73\x80\x40\x62\x71\xd6\xa1\x50\xd7\xf5\xb4\xcd\xc8\x07\x20\x64\x1c\x04\x17\x52\xb2\x74\x3f\x6c\x07\xb5\xd3\x68\xf1\x2d\xa0\xf6\xf8\x42\xb2\xc3\xce\xae\xf0\x0f\xf9\x71\x2c\x46\xea\xf1\x5e\x3f\x21\x4a\x8d\x81\xfc\x79\x6b\x0d\x62\x0d\x2a\xc4\xf7\x13\x11\xfc\x38\x16\x53\x21\x62\xf0\x9c\x97\x8e\x5a\x16\x07\x25\x4e\x53\x06\x35\x4e\x9c\x37\x72\x39\x64\x48\xe5\x9f\x82\x63\x86\x9d\xc3\x86\xc9\x1a\xfe\xe5\xc1\x9b\x26\x2f\xce\x8b\x77\xda\x6f\x14\xf0\x5f\x5a\xb6\x4a\x4a\x9c\xf4\x1c\xd7\x50\x95\x24\xd1\xea\xa7\xcb\x31\x78\xbe\x69\x85\x79\xc4\xb4\x9c\x4c\xd0\x64\xb2\xd8\xb0\xc9\x5e\xae\xf0\xfe\xf3\xc7\x78\xf2\xc6\x0a\x89\xf2\xb7\x75\x4a\xd8\x58\x83\xbe\xb5\xf4\x1a\xc8\xf5\x38\xac\x48\xfc\xb1\xfb\x10\x1c\xaf\x85\xf2\x74\x93\x6c\xab\xe4\x57\x00\x00\x00\xff\xff\x2e\x1c\xa2\xa6\x35\x06\x00\x00")

func navJsBytes() ([]byte, error) {
	return bindataRead(
		_navJs,
		"nav.js",
	)
}

func navJs() (*asset, error) {
	bytes, err := navJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nav.js", size: 1589, mode: os.FileMode(420), modTime: time.Unix(1511618134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\xa3\x30\x10\xc6\xef\x3c\xc5\x48\x7b\xd9\xae\xe2\x2a\xe4\x5f\x5b\xe7\xb4\x97\xbe\x46\x65\xec\x31\xb1\x62\x3c\xc8\x38\x84\x6c\xb5\xef\xbe\xc2\x4d\x02\x26\x6d\xf6\xd4\x23\xfc\x3c\xdf\x7c\x7c\x33\x86\x7b\xa2\x00\xef\x19\x00\x63\x95\x30\x8e\xe9\x92\x49\xb2\xe4\x39\xfc\xd0\x5a\xca\xcd\x66\x1b\x99\x12\x7e\x9f\x32\xb1\xbe\x30\x6b\xca\x5d\x48\xa1\x96\x88\x1f\x50\x52\x55\x5f\x81\xd8\x68\x8d\x6a\x04\xa2\xec\x85\x2e\x95\x94\xcf\x4f\xdb\xc1\x4b\x91\x48\xce\x65\x31\xf2\x32\x62\x2f\x2f\xcf\xfa\x49\x0c\x6c\x31\x86\xeb\xd5\xea\x75\xb5\x1c\xe0\x72\x0c\x17\x79\xfe\x9a\xff\xde\x66\x7f\xb3\xac\x20\x75\x9a\x81\x32\xed\x0c\xea\x19\x34\xb5\x70\x33\x30\xae\x3e\x84\x19\xec\xf2\x3e\x9f\x4a\xf8\xd2\x38\x0e\xf3\x5e\xab\x16\x4a\x19\x57\xc6\xa7\x73\x71\x0c\xb1\x10\x72\x5f\x7a\x3a\x38\x75\xe9\xd1\x0a\xff\x73\xf2\x39\x0f\xb1\xe6\x57\x2c\xd0\xe4\x02\xd3\xa2\x32\xf6\xc4\xa1\x22\x47\x4d\x2d\x64\x8c\x2e\x92\xc6\xfc\x41\x0e\xf9\xaa\xee\x62\xcd\xa3\x13\x6d\x2c\x53\xa6\xa9\xad\x38\x71\xd0\x16\xbb\x2d\x64\x00\xb7\xed\xf4\xd0\xee\x6b\x63\x49\x96\x0f\xd7\x26\x6f\x6f\x26\x60\x95\xb6\x2a\x2c\xc9\xfd\x36\xcb\x00\x76\xd8\x4f\x9c\xc3\x62\xde\xfb\x02\xb0\xc6\x21\x9b\xbe\xbc\x46\xb4\xae\x3b\xc8\xcf\x2f\x03\x76\x81\x29\x94\xe4\x45\x30\xe4\x38\x38\x72\x18\x35\xbf\xc3\x3f\x63\x96\x4a\x1a\x72\x3e\x9e\x2d\x16\x64\xd5\xff\x44\x17\x77\x54\x1b\xb4\x28\x03\xaa\xaf\x95\x13\xb9\xc9\xa6\xdf\xfd\x9e\x4f\x16\xe5\xb1\x41\xd9\x87\x95\x4e\xe3\x1a\xdc\x38\xe7\xe4\xfc\xc4\xe7\x74\x8e\xfd\xc9\x7d\xdb\x1a\x3c\xc2\x7b\x36\x7a\xfa\x6c\xf4\xd7\x2d\xbb\x59\xca\xdb\x65\x48\xe6\x1e\x2f\x4b\x41\x5e\xa1\x67\x05\x85\x40\x15\x87\xbc\xee\xa0\x21\x6b\xd4\x9d\x11\x8e\xad\xf0\x1d\xb5\xe8\xef\x5e\xaf\xf4\x0f\x34\xd1\xb0\xa2\x40\x1b\xcb\x8f\x46\x85\x1d\x87\xe5\xbc\xb7\x0a\xc9\xa1\x56\xd8\x03\x7e\xcc\xd3\x62\xc7\x4a\x4f\x47\x0e\x79\x2f\xf4\x2f\x00\x00\xff\xff\x96\xc3\x14\x56\x22\x05\x00\x00")

func stylesCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesCss,
		"styles.css",
	)
}

func stylesCss() (*asset, error) {
	bytes, err := stylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.css", size: 1314, mode: os.FileMode(420), modTime: time.Unix(1511095962, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _utilJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xce\xcf\x2b\x2e\x51\x50\x51\xb0\x55\x48\xc9\x4f\x2e\xcd\x4d\xcd\x2b\xd1\x2b\x2c\x4d\x2d\xaa\x0c\x4e\xcd\x49\x4d\x2e\xc9\x2f\xd2\x4b\xca\xcc\x4b\xd1\x80\xc9\x69\x5a\x73\x41\x35\xe0\xd6\xe1\x98\x93\x83\xa1\x89\x2b\xb5\xa2\x20\xbf\xa8\x44\xa1\x5a\x45\x47\x41\x45\xa5\xd6\x9a\x0b\x10\x00\x00\xff\xff\xc5\xa8\x54\x18\x77\x00\x00\x00")

func utilJsBytes() ([]byte, error) {
	return bindataRead(
		_utilJs,
		"util.js",
	)
}

func utilJs() (*asset, error) {
	bytes, err := utilJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "util.js", size: 119, mode: os.FileMode(420), modTime: time.Unix(1511091455, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"api.js": apiJs,
	"app.js": appJs,
	"index.html": indexHtml,
	"nav.js": navJs,
	"styles.css": stylesCss,
	"util.js": utilJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"api.js": &bintree{apiJs, map[string]*bintree{}},
	"app.js": &bintree{appJs, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"nav.js": &bintree{navJs, map[string]*bintree{}},
	"styles.css": &bintree{stylesCss, map[string]*bintree{}},
	"util.js": &bintree{utilJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

